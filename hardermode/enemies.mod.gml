//{ sprites
global.sprVan = sprite_add_base64("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",18,38.5,19.5)
global.sprSiren = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAPkAAAAyCAYAAACeYH3nAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4QYREwgufEY9MwAAAelJREFUeNrt3UFOwzAURdG6Ys6iWDeLYgVmBEiFAUnsxH3/XKmTSkiN7Ztnfyem3Qrz+t7743cfb63dgBn03+Pt1uaPt0buvyE7psp9ouyN4ETHxYJPFr0RnOhYQPCJojeCEx2LCD5J9LveALIpkVBHUlya49QUn5DmkhwIh+QAyQE8My+awJpxOk09g+SL81RFt7MFHvWbkm4ErbWV+iFa8hFVdWJfcA2S/6c9BrRFI/iTp3gPvZEliD6qbw62RSN4wDQ9TfSkJF9A9EbwgHV4gvDJU/SLRVd4S5F7y0BQXb+mTy66AUdJXqbQRrqa9N739J2HYYBwSA6QHADJAZD8DI5Wxr0zjqlcVPCU5MAzsWMbjuRSHOFpHiX53n1ygiM5ze/VBQfSMV0HSJ6f4mYBIDkAkgM4iY0Veq+aVsSrpjXaneQG0lK/Kf1GcOHBERHT9fL73L33749rIPjjn6W0Y9ljnxzkSPAqkhOd4JF940hmoscIn7gmX+S/mzqSueJaX3W9lOSR1fUvOT3JRjp4GOaUGQFAcgAkB8otiwYtq0gOSHIAp6fxwOJofJX1SPHMsVAYxpbttMG7H5IcWCnRJ2xvlkiqPWkuxXFqqk98dqHMQN4iOsERNYmodLH/EZ3gIHmo7ORGKp/+TvJjblGySAAAAABJRU5ErkJggg==",3,38.5,23.5)
global.sprOutline = sprite_add_base64("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",18,38.5,19.5)
global.sprVanStop = sprite_add_base64("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",18,38.5,19.5)
global.VenuzChickIdle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAAB3RJTUUH4QwOEy4AIYTssAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACHElEQVR4nO1aQU7DMBCMOAC9wAUhPgDP4A2cEQckxD964QH8of1Ff8APekFc+QMENpKjlXFiO7tjZ2ksjdKmyuxkZl07apvb59cmht/R+ki5bi5A6z9kf5KIn3Ynf6BpFCoAtP7Fn5EGootPH487hAq4zyQ3gwxgSP/H9kJFP5q/lj+5+Y4WoOETO4MINLQD0GrQkP79w3kPDf1ofvQE0Mg3WmTMIOkMQDaor3+1WXUgfvdaYwlD8aMbVCvfaAFnBjoA7QYd0s9hgR89AaT5JhUJFdLYyKEbFK2/hj+IGhL9WUXcmot4EkAFjNY/xK/NXdqf5GtTyIn47fqsfX+56zGXG5iqn95rzWDiX99cdksNHaVPXzX8mao/qQCREngA9F47AJpZ2gGU0E9cJRoU6Q/pdfutHO1ZAfiwEgBKe0n9c+WfFIL2HgjdoCH9GtpLNCnaH6n+5AKoDVyJBqWv/JL6tZsU6Y9Uf1YA/IgIWJufG8P5EZtQi/7wGlP5swJw0JplJfhpLXfg/IgGteYPr8H5nV/iJcwPwId2wAh+bjrnRjSoRX98X/hEU2kgv+t5t2oHjOB3PwNY1V+LP/WnpKMmMu6vvrvjev/Zg5+XDjT/dtMG+bWGdX/c4Pzt7qv3LTpiHer/bSB0TjIDFn7b/OZvIIWf81jUX4M/lXtyAFLxC///4I8W8IlC5yQ3sPDb5heLWHDYqC5ggW38APPlITXS1X0OAAAAAElFTkSuQmCC",6,12,12)
global.VenuzChickWalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAAB3RJTUUH4QwOEy4IL19kggAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACbUlEQVR4nO1ay03EQBTbE7AXuCA6gDKogQI4ICH64EIB9ABd0AEdcEFUAsxKjt4+JmE+9swEEelpg1ax59nO5iVhc3n3uPnr9b19+uq9ppGqRp9hDFBxBJzbl8MfxexBrY9SmyV9UnjkBD1NDscf3RxMpQiQOqAttInh47vfeOQEtY3U4EP8sFnMj+fTXY0eULU2Xhdog/2wVQWIQVDSCAxmBcjX2/XJVKMHVKVNTB+rSyq+nKDEZJbBwN8+bfeKaXCLgLbWBvuUANUSlDQCg1kcmNcsh2rtzID20iYHW04wgsnAx8y2xrW3wC/Rp5iAbYLSZODeX5ztGbC2gKq1KdEnmcAbEPZbmMzEDvV6fjzhs++WrAkso2sNztXm/eFqqvB38V3YkvhB+PCZQlBrMlukYIIVio3vjWAMunPYTHwE1BctQF741ISOZHKuOKVrZ3IsYbN68NrkjCnF4rMvYWoei62aU2ImKLGV+MnH9hbHctizjSmSxVbeQbKezjMNTsWHNrnzVTIBwNUCsTmAbQViD+i45KoNVpwAdv3QBr3Q7sJs+lVnMLAxoKsDxLwDU+pj8dEDa/a0PwwIkT0Rql6mepIguCVRiKT8hbBnMIPDXmJ9gNhv42NzIetFtl2vreq38SCA6AgQs4E5LtWTVuasMjevsS8z3gPmrBWO92/2aQHyglih2MOixVQMojGz2f+KAjxvNmv9dgZlPZGOBT7X3yxxSghSG2kRTt8Da47wpXySzgiOx/V4ORzJ4qQQs41WicQ0oUUfLbXJxuhF3AJTHZZWvai0AXbV8aOY0sNoVbF7GVmb7gv4r3XXF5WQWbbzUOGYAAAAAElFTkSuQmCC",6,12,12)
global.VenuzChickHurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAAAB3RJTUUH4QwOEy4bq+ElXAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABiUlEQVR4nO2XQUoDQRBFGxdqFupGcgM9hidxIYhncCfiLsvcId7CG3gDd57BA4zUwA+VpntmqupPehAbPmEyzefX666KprunbfpXXaMbumzRA6TUaS3N3wSHDUoCP36cHYgJiuFvBsMAhZA6+Pf7NQ1Uyd8LKgTHA0lCYenAX/dXvfCMZYUk+88fTnvlB6APAXvG/BcBSMBgAVIEUA1+6RDMgI7ZYqvdai+ExzOjxbQ/bpDVf/AlG8xQIXl4tr9WeEi3AKVnAvtnv+ZPATRHi5XCv96uu8+bywMxAGl/fYvkOdxixwIkYUtiAYKf5wBCgKLhhwAx26vmTwFUg8QIr4vwDtG5/d23h9VemBESHJ+sAc3wd8OJQsqvfj5Ao23G8j9JDdfm5aeXrOe3i73wbhH+kdvjvUWpMBO08D3+qWzpPxmQ5f3UAiRgaWgm9YedZ2gz/ScB8u4ZKmAsnC7CA4jlHyrcA8hSOPZaALH9w0V7AU0tGnOjlX+4YKusBbf2nyXkX1LzAEvXL+EqGzdQ1gDhAAAAAElFTkSuQmCC",3,12,12)
global.VenuzChickDead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAAB3RJTUUH4QwOEy4QPDP81AAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACkklEQVR4nO2YTU7DQAyFI4FoqaBsEBeAsucCZcmKFRIrFlQIzsEVuAPcghtwA3acJGiiPuRYyfx47KQtE+mpSTtyMn5fPFNXy+e3qqhIquCAmh3qD1BVNdW2xf/vSoJHGyRn6NPnpCVNo63jF/UA5ANHAySYSI39+ThVM7orfgFpIIBS4JFA5EzDQQ39fjhphGscqSa78dPHg0YcUAopxhSIdgAgBw4OQJQDUB+cXZAWgJQBSoVIdNP18nH4fvgnmItrjSWMxkcF0ohfFAAoBiSVmxOjubna8akKOAMBNCRIdE+i/be7L/7Yyd8FZcGjARDMfb08q78W85Y0TKbxaRVy1wWiHQHImdklLYAQzwLQmFypGsYqtHY1rar9uksmAGklxAqeUHzNxFu/aJiLr6+lAc/iZtKpPojEydFKPBJjucm1jh+CRyNnocZoLkQ+eHwQZSVGw1jsUZyx+NSqDtbxY8HJyRmdQ1dzlF5LGqNYovYuJo0oMPfXR61r9zuHaLS3ii8tfIObu4xZx5fAk5ovzCGle58yJwfD1fy4F6C781mjjQWIG8oNzwXIMr41QPz5aSVF4xWHO0+tqg00y2mjFkTr7xw4q9VLI3fet5lWSU6OuXRJ4Y0/6bpuHX8IeDhAWMJoNUUFksDDAUIFas4JRD54kgBK+T3WYGdgVyWga76kUljEl0ITmycKOH02+gJQgPgGOjQP+pccsAAU+j0A4htojBMBJB3jS1bIPN493oT4PihyAeIQ8R4P39PxnlbMns7X48F+CLqdz1rCMhcEKGXCEoBSjMPYtPJsG18CmPRFiwWMwyaP3w2Yr6GYDYUUoNjJpq/vtvGLIgEyu6GxYQWIYTX6AxRtt0Z/gKLt1i8m3zF4YMW5pQAAAABJRU5ErkJggg==",6,12,12)
global.VenuzMonsterIdle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAASAAAAAwCAYAAACxIqevAAAAB3RJTUUH4QwNFTMU0gqHjQAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAD50lEQVR4nO2bvYrVQBSAo2ghiOAW2+o2Ym1jZ7MI2ir6BoLWvsP2dr6CoLXV9hYiWPsAwha2FhZqFmaZnTuZzCRncs7c+QY+csnvd05OZpLce4dHr94NAAAaqAsAQL+oCwBAv6gLAEC/qAsAQL+oCwBAv6gLAEC/qAsAQL+oCwBAv6gLAEC/qAsAQL+oCwBAv6gLAEC/qAsAQL/I7mwY/uaiHTj++r5L3S36l8ah7WnFX1T4/YPDc348uXPBzzePdxjnWzkR+LflHvpbimEqjjAWK/kv8Q+R8hcrnLmkW7oQ8Lfhv8ZdM4bc/M/FoZ1/C/6rC2eut5wLYGTcxxYnAv/99PdjaMnfxWA1/7kDwBr/IvmUbM5t21TxuO1f3L1d7STg377/HFb9cweBHv1F5KUYA6gxkuHfjv/aOGtcxFL5T93BWcl/rnsshiX+4vISBSR5EvDHH3+7/lkBlAhIBTB+FnnLjn9T/mtxjwKt5r91/9L6MVU80icA//319y+U8KJpwT9Fy/6l9ZOUr/neIaeA1pwE/PHHv/57wxgl/leHRDs+vJFabL7hr9uk/E/Pfu8wtptH984J15Fq5H+6+Xlek/NrEjJzbUrQFc9w9l20cKQb/vrt9Nef3Xmfv0bXPbl/q7ZOcYvlt6X8V2tb3L6558Jcwm2H0t8W4N+sf2y70enjpy8709i80H/JY0yN/Jfgx2ClfmK4r+LX+FNA+Jvzj70TcW5jc1P/sz/V9o/NWzoA7Lv/ZABL5C0VEP7t+fujaOi/9QVcK/9bDQCt+CdfQpe21HPsh7dPz6cvjw4upv5nNz0+uC6pVNTw1/OXegdiNf+uPX/28GLqf/anWk3Ff2kPGvaS4XPg1Ajmj8RuxHXzRmK3gEOFEQB/Xf+Y81QMFv2X5n+O3vw3KaDcIGLbWbgA8K/3CCDtHzuGdv4tdqBW/KsUUKqYHbF/025dQPjjX9PfX6+lAWBLf9EARolx21yx2D40Cwh//CX9U04WO1ANf9EAYsUTY1zPrZu67d76BOCPfw3/VOdpqQPV8J8MYO6g4cGnRq9UEdUsIPz79Jd6hCH/2/hHv4b/v+DK629nsUWXWo2fj4f/51lyDPyXt9b9w/225t96/ov953rRnNsvv0cchuHSLXKqB42NXuHxhsLeH3/88W/Hf/VtXPj86B/QzQsFXYD+7V+tE4A//vjb9Z8NInzbPfX2OxWAL+iWx5Y5ebf/cbr0BOCPP/72/Vf1on4P6HrFcPsY4f6le3/88ce/Df+sIHJYmiDpfeKPP/7t+K8OEABgKeoCANAv6gIA0C/qAgDQL+oCANAv6gIA0C//AG0sQpz9Q576AAAAAElFTkSuQmCC",6,24,28)
global.VenuzMonsterWalk = sprite_add_base64("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",6,24,28)
global.VenuzMonsterHurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAwCAYAAAD+WvNWAAAAB3RJTUUH4QwOACIYgD0mwwAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAADIklEQVR4nO1Zu24VMRC10iHRpElL0vABaehoEFLqoChfkIKPoaDjG3jUVOnzDymgQ6IIJUWKhL3SRHPN+O294+M7Ix3tXl+vfXbmzNi7615ffXQGQy3UCRiwoU7AgA11AgZsqBMwYEOdgAEb6gQM2FAnYMCGOgEDNtQJGLChTsCADXUCBmyoEzBgQ52AARtdBnmoMO0b33KCcw+l0OY8Cv+dCWYkIfnOvD17EcSv92+3QO2aQhqJv5pwNIRETvt0erRBieNHENKI/IcQzy6ERI6POb0mADTm2kIalf9Q4llLSKkyXxqEUP8lGGsIaWT+Q4qnp5Bqnd+KbnuMwfkPLR6yFueXlP21AjEz/+HFQ4bo/BYRofCHEdBiawSgtE9tUEtFhMIfRjxkJc4fKQC0QZ2N/4Gb3K5//y3u72Ox5ycvN5D65Mz15uhZBXsA/kjVh6xn9vr9lt8Xx4dZ4NfnZrZLbUrB+E9bgXIz/vrufjsL//3+/ONuc86PUtvSdy1r4X/54fvmnB+lth78pxRQjvP9cl26VEhz1Y4RGzNkOfzfnb96OvJzfmzmj7Z8kbU+ufBSz0s5tbnAV2x/GaAxaZymJxpA/lNWoJRR1n35+afLeL2qWa4NxR+1Ai3W+vLNsaz0MzgXfONKlSCHgxOqECJ/aAEt1hoA/zru3MXoyM9TAYjNSR80pfcqvfl//XbzH39q68V/7wTkv1SjLObtJdnLxykJgFSFEPlPKaCQE3iJJkgBSDlOGjc1jsQrJCAk/sMIqHb+UABSoL58DyE5T7o2tZT4faSnpZSAUPjvjYB8h1LGha6JZbM0VigAoeWD5kbn3/Qpo6foSudPfQrgDghlsNQ/twKEKgkPQijI0hMYKv/hBOSPKc2R+pbk37AUhFAAtspz4EVcaAnwOfA5/LZZ+Is3URLwXFHE+sccWoNQ1khOkAIQqxJ+/5QgZucf/XMNUexCQFImxbK/ZonJ6bsP/LvcaKkodiWgkkCVONXfJ+wz/1UEVNJf2/nk0Nw9it9fm7s2f/WbN2BDnYABG+oEDNhQJ2DAhjoBAzbUCRiw8QiJ3OPpyRGfKwAAAABJRU5ErkJggg==",3,24,28)
global.VenuzMonsterDead = sprite_add_base64("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",11,24,28)
global.VenuzTop = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAC4jAAAuIwF4pT92AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAAYklEQVR42u3QAQ0AAAgDIN8/9M3hhAikbeexCBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAfctskn/Qdbzj7QAAAAASUVORK5CYII=",1,16,20)
global.MinigunnerIdle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAQAAAAAgCAYAAAD9qabkAAAAB3RJTUUH4QscEQEP6JNeJgAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAEiUlEQVR4nO2bPa7UQAzH9ypwCBokOAINDQdAoqXjEFBwEXrEwXgF0mMdPa+83vGMPV+eJEayXpKd5OcZ/21nk+Xy7vPPS9j+7PrvmduZ+GGd4rhXAZyVf+N9+/doE/zw5ufWf6YGjqK/3QngzHy49quP3++YsP/36en++CAfvPmp9X/gT4jBkfS3KwHM5qeqrJbfozNIfOAlWdf922etnUHosDX8Gh+8+SvobwZ/WQF68+G8L19/PP/6/edmsG/hw3iw2gRAPlwTDH3Q8tFvc1dgc0c+2DYfIsCNdx1/5xPjW32Q+Dj/VNd76IoN/FUK0Az9VwnQGoDeCTCab0mAEQLk51IfsAhpEpDOoZWPPnC+aKQAjuSPmv8KBWiG/ncjwBX49C5Ay69NAH73gey37z9sfLRU8sHx128+bWPhr/UuhPvO+XBN5MM2NXq8Jx/3KZ+zqQ9wDRgLVsPvVYB6FcBR+m8SoFT9qQBqA3B2Pj0X7E7cCRZNvtTnVj71IXd9ZEhFycqnHU3Lpz5IsfAsQGCr6q9JgLkOwD8fkQAj+DCOL54HXyN6TQLgZ6P5JdOsweXlO64Xf6UCpNUfvxOz6m+KAGYkQK/g8+o+m8+76ewE5MLqwb5Z7rvo5SKK+66QVXBpQmh86K0/SxGQ9K9tAlLspbmrBNgr+NoO4M2XBDgrAUfwNeLn42cmoIY/cg1WKkC9cyBXgJYRoDdfI4DRfDpeuuWTrp0TDO5nbwXZ2ls6oFa0mgIgdWDpeiXTJEGpAGm7r8ZXrwJYvANoEWBpAW77gxKgN58nwPT5k68iJRHwhJEeFqoLwMudEufnTOKnxmX5xFz4hQLUatoCJMVRW4iTyS8UgeQCaAWoCYC1Ap+db00AfEiUMnz6zC2XgLitTYBefO5Ljk9j0Hv+owpQ8WFcJv6lAiAVraoC4CrAs/NJAmJQNXx8WkxfO4Gl3iNrkhD5d8IRhOfJxwIwgi8lcmr+owpwrgFpNKjhqwU4OgBn56cSIFf5adVPvSumQsAfkMBx2C69l+b8Utc5Kt+zAM1qALsQ4Nn5JfFRNvylx5DH/Qn++gVohv52G4Dgp/lcAPQ4HW/pgF587/nvMf5W/tICCL7u6T/y8dYPzue3gugTbgd//QI0Q39LByD4dhHmfMDAa7+DBn/d+Pfi7zYAo/nSu/QZfGsX4h0ADVnUStyaLtSbT9ne/KPrf0kBBF/fBWgn4EbH5t5B1/Bpgkp8em4LX3oIZuFv25UFKLcGe9efaRFyVvoxRKsAPPg9fwxi5WvXQGI9CNjI1vBzc23la9bfwh+lP6n48AJsXYNZ+q9yQgN7+FVSRwHujV+T/LkkyIku5VdvvtaHluLnzUe2dv1TBWgV/eX4TVVYs/ijBHAGPvqQ6iQ565F8wU/HH69X4o8ugL30t3QAgv/Iz10rJb4WdvDb+avrT+XABjUuAK2UrQEIfvl/E0r8FraVz304Gl9TUDh/pv5q+GontJOxjLUsQvD1T7CDf8z4j+B3cTAsLGyf5u5AWFiYn7k7EBYW5mfuDoSFhfnZf5nFa9vbSoabAAAAAElFTkSuQmCC",8,16,20)
global.MinigunnerFire = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAIAAAAAgCAYAAADaInAlAAAAB3RJTUUH4QscEQAD+D4jTAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAADcklEQVR4nO2ZO44UMRCGW9xkOQQJEhyBhIQDIJGScQiQ4CKkvCIgJ4B078EGSAtuqUZ/19TLZbe3l3VLpZnp1/f/rvJDnuXR83fLjLsb+QeX5ZrHUOGT34WfB7/6cx4DGmLy+/Kr4RdPX2+g5ffvq6vt+Z0a4Qh8qeELnyfitvBj1QZBDc6rjsSdrrUOTQI7y++qgTf4YP8ZvqXBFPDi5Zvr95++rC8tUb6Xc9Kwc1ad/36X+0tUD0vARn6JDL9FA7Jr+fRMi/8efEuDKgAbD4UUATjc0sulYQiTWDUsCXzSUMsnDVm+lwCLj8+3+G/h0/PVBYDJoyjnHj5+siaAz8V8Xr7/4Nl6b4lVdGUDYPI4v7ybNJTvGHie7s3ye/j3EpDxj2xsAzpP+si/1QFUAZi8EhzC4TwB/Hq0AXBIIw3Su3mDY0jJqE2A5F97PzGk6738R4pOu76ejxQAgbWEZiOaBI3dyqdERPiShla2lwTu3yro3vyt+UCP2rMISMMe/DUC7EiP2qsIpBz05IcLgCehlwCrACL8rBackqL8Fl6mACL8Vv9SEYi9D4fBaAK8ebimAfjCxjPO2dZaIZQAGIprEuD513qhVACZKSjUYc0CgIjMwdpKXEqcNwWcGkDhW2Hx+X0mX/EfafTI2qXVfy0/0gGqFiNS0CpZirKC5Q3rJYAvBkfx76p/tQGoqrxeQCD6xJA2MyJJIP5m6lCqP8Lnmzm9+DX+cT9glH/uW/JvCrDmPhx2pM0KbhxFUWV6DeANvRE+8bBXeEXQm48aRvnHhFv+0wKw+hFePkckoIbPh8Y9+aMK0PPPt481//cW47i4fGtdFo/PH39WP7MHv3z21BI5fv34tkYvfov/D1+/r+EekTkoOgThvj+vuMwUkOHTuzl7xBRg+edD81H8pwVow5DVCNlFUC1faoSWRWAr/8j+m0XgP1Z8riGzGJbxEfyohsgoMIK/t/+QgB6bMZl/5CIbIBqb76K18LMa8N7e/pEf2YjT+KkCiCT7TEiF+YwG6domgZX8I/n31gCW/9Mz2gaUJ8DajdJ6Xmvvj/K93t+LL/X4kf735LsCeNVp8woGCsiaPyKfelKU7/W+I/DjQ1BwAUMCTvNg5eLvf+Hj0H9kfqwKE/Nni/HJH8dvEjfj9seNC5gxC2DGLIAZNxV/AcP9Oo3Z4xiqAAAAAElFTkSuQmCC",4,16,20)
global.MinigunnerHurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAgCAYAAADtwH1UAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAEFElEQVRo3u2az0sbQRTHvwOC0f9BIeKpRQ8KXsQEiho9CSKI0B7aU6CBGuJBcxIK1oPBCBG89VChCFLw1CSVgileCuaQUE/BgD34JySBwPagM042O7Mz2WSzKZnj/no77/OdN++9XWIYBnp5EELYBAzDID33/g4AiG4kbju+Uq1iyOdzFQJv34kAWgGgekNHHFGt1Zj9od0BYH/g+eR2HZXdOgDANzhIOur47Xrzyad30QEhA9Du2EScKoyqXQUAXRHtDE+EEMO/doDy+CY75i8lcXsawYvXqefj+wPK9kQAOrUxENWJhqMJLC5NYjk4J7zOCgCvxgZYPp+eMgUC8K8d4PY08mibUz0vgKb3kgjAswC+ZX40HKMgojvHyPw1GtQmAjAbXEEsHsFycE4LAC8A3vb3q1/Ipgs4GfzQFHas7PNzWA0tWNr39AoAwJyQTRcAAMV8Dg+VYRij0yD3N/iT+4whnw+VahUvA28fX350GuXzLcwGV9gzr68utACYBUBBmAVQ2a0z+2xVPAHgIeoA6GReSnSWPnXgQ2WYORZAQwzmY7HVOX8pCXJ/g7vfX7VXgIoALNVrEsD11YUwDJkBuFEUELtNjp+YzOk6Y+znGyUIbguAB+BmRUbsMgw6IX5S/lKyJRD0Pn8pifL5lnhD7JAAZBA8BYDfxKwAOB0yAN0SgOcAULWYFSha3naDd540FEgEoCICu+tZiPI0AD5mz2w0OF/6MIvN0OpeFQAyATietIV9t9NQpWyIEGKMzWwIHcCrK1w7Ej6nmM+xDMSuKOq0AOg1XgGglA1RZ8tib7h2hGI+h4mpAIr5XMO5WDzSVMipNO1kAjC3IUIjxJEAuglACMGq5yLKLADg4OM7djybLjAgdBx+eo/ozjGK+RwuM2eI7hzj5DBmmw25IYCeBcBPnk40my5gcWkSib0UO7YcnMN8aL0JiKw10WkBzIfWWWX+3wGgS586gE6eDwuXmTPHANolAE8DkKV/VgpM7KVY6c/3gajqJqYCDIhKCGqHABaXJtlxei4Wj7DeUE9swjpOkEHQ2YTbKYBYPILEXgoTUwG2QroZgpQactQBdhDCtaOmhhkdJ4cxpRTUDQHQ86uhBaVN2BMtaRkEvvKUdiX5NoKkDySzLWvAhUaIIwF4GoBdMSSqWMn9jWUhpNuSNkNQLcLouHv1xbYPZfdRvuvfhUUQZBM3Q9F1vl0xZlf5UgHwQhA2ARX+ijC64XxZk6x8viW9h4fWivNlAqDPs7OvKoBWARBNWC3/kWAGIPvjwEq1qnG/U/btBNAKANLm65VicXl8U+l3D94JrSpfZF9lIzfbt015FX/MMjScabTL+eZOpWoGo5Ny6thXeaaufdLr/4b2+ugD6APoA+h7oYvjH6xO8+61eqznAAAAAElFTkSuQmCC",3,16,20)
global.MinigunnerDead = sprite_add_base64("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",7,16,20)
global.bigcrystalmask = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAAcklEQVRIx+3XSw7AIAgEULn/oenO+MGKBpg0xbXxzcLoQMxcDtZuM2kPIgV8lEwb4g2+BVUBVrAVusQl2BoV8RH2Qie8hb3RDofDUWjF/wlHo/VWJ5xwwmZwPpmhMPQ/hjUQKAwre9B6axmAPjXCuA5tD9iKd71YQVJnAAAAAElFTkSuQmCC",1,15,15)
global.rogueback = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAASAAAAAYCAYAAABa3SD0AAAAB3RJTUUH4QsFBR4mUUXbbQAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAB5ElEQVR4nO3YMUrEQBTG8cEL2Nl7EcEL2NkKFlYW9l5CLKxsPIWVINgJNl5AzyDYr07gyRA2My/JZubF9x/4yCLZ3+Q92eHthqOL20AIIS3S/AEIIX7T/AEI8Z7ftdHEqj+rdgsF4ON79eP79o/vtubg/PMvVv25/WleAD6+Vz9nr8HfRX/2Qma93F9FKHfLrIWP79lf+9pFf7IHEIvFarsevw+7TF1fz5ddWvnFVRqvJEMj1ttp6BImjoj4+PjD/tSvSPH+1/ePzc3DU3fdtkcNv9Qf8wXg43v2pxxw6cHWT22/1B/zBeDje/blw6v15WAbSrpHDX/0BGStAHx8fJ0f7zk5u+6c/lUSJy7Zw4K/+gLw8f+jLxnzFU/eIwdZem3hTzqALBWAj+/Vj1d5rfFTO5eavqY/pgvAx/fsxylLDimNH++X50oTpyyZtNIDYWlf0x/TBeDje/flQ5yz0z20B5z8zrS0X+qP+QLw8T37MRo/PRBz6R9wS/ul/pgvAB/fs6+ZrsQPIRQnrPQ3rBp+qT/mC8DH9+rL/Ro/3Sc3XdX0Nf0xXQA+vmd/rJ3uocnSvmYP0wXg4+OP9/t7xemq71jx1c3S/n3qPwMfH9+fP2tzQgiZk+YPQAjxm+YPQAjxmx+i6/2bQJAG2wAAAABJRU5ErkJggg==",12,12,12)
global.yetihurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAwCAYAAAD+WvNWAAAAB3RJTUUH4QsCABUpuRLlZQAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAADZ0lEQVR4nO1au4pUQRBtRP/ByERYzATBSFgEU3/BbPcfzExNzQxMDc00ETYRTFwQjHZZA8FJ5idktNetoaao7tuv6arq6YLjXO/zzDmnuu+9s+749I2bmCiFOIEJ2xAnMGEb4gQmbKP5CTc3Jf3FigVxbuMhzcMK/6Yn26CSFrJU/NVqZTZAEvyrw0L/v1TSImOxsdAgPhgQgjRvbfyrwlNS0sJjsbGwVPyPZ1+36/A2ae7a+B9keEBcTmhcWsOjiX/XAGkIEe5WDtQAbJCGEGnj3z1A0iHiDMAi47r7+ss18H7SIdLGXyRAkkHiDOBEf/p5ff0Jxd2gTv4ZAWoZnKXal/D0hjNkgBcfQA2g3dzrSU0r/2hYegeHVq3YeJl7KgEhcYHwcBx0cuj4mDGHwF98tEmtXANCTykcaNfSjgQTUgygTz5FXW2Iv5kA+co1ILXrsPicAbBPrgGlN6+W+JsJj68c8XMAwseWU82MdfOI/M2EB2pJ/FKh4Dj/ic9RK3xOiCzyv+UGq4dH96qO85/4HLHz/bj6XbQthUfpcd35Wxp9fLXq3hadibuddj13z+FiN6NG+d9Oi9mY5bustON9+WPfffq2s+7FxZ1//95vdo1YaeA/1BSWI2ZLU89/rtn1j9//2i6nTAkW+Q8VIK78F/dd9b+zdoUICVdzrcvvVzvrTs7/bK9dek7V/C3dA+U+/sJcjoHn+ldvPzR5MnE39y/wwg4Dv5sZkb+KAKVeP9UAEJm+od2XAXB9uEZtgCzxH2oKw8M7LHNDcuiY3GuFjl2/PN4i95x0WT1/jSMQxynlDS4e8rkuoj8s+g6mL95SH30Bjvzo6VCncutG46/iTfSSuKlwaBjm5nNsiBcPG1CKlHCMzH+oKYzWg0dHwXXPnz3pTSe7TPCnibI6+nBTQah78S/WWkYfq/zZlTnmawsQNYEa4ci8XmPCPgJkjX92gErD1jtAob+PCZmFEbu3wNv2GSAr/IMbcozWFiBqwpJQ2AQvMDaMokeALPGPbiwNUKt9W5gQ6tyQAS33PQT+zb5sTih6BSjXrFRRU409BP7NAyQtZI0BmgJhhb/4F5+wDXECE7YhTmDCNsQJTNiGOIEJ2xAnMGEb4gQmbEOcwIRtiBOYsA1xAhO2IU5gwjbECUzYxl/xO8uWaI+qKAAAAABJRU5ErkJggg==",3,24,24)
global.bigcrystaltop = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAADGklEQVR42u3aPW7bMBQH8EfPhaoCHt1CyOQlQK/goYUH+wLtAbp66NAbuGMukV4gHYwiQK9goEtGNe0YoInRtWaHhuwTRVIUwic9KuIowAb+P5GPXxJSSuiqCSGklFIAoya6AhBCyPJ4B8XkKXBC6ARAh3//DibLAo6vP7JBIAdQ4QFAAwAAGwRSADM8AGgALghkADg8BuCGQALgC28C9I0QHaApvAYobwCKae8IUQHM8F4AoyUPEBqeG0IUABz+5c/P+vnt2YUfgMEwiAaQX5/XnrcF6AOBBwCCGBRAEIKldYkQtQimOAx4AOhpo1oQcaMCYQ0w+fKBvFf0CmBdFu/KTtcJLABU6D4KJDmAD6FteAqE6HuB0F7gCh8CEBOhNwBr8PkTOF79dk6PFAgkAIerb/pZNj8NAqiEBxgOAK7svvAAUH37xrSYFECrQmiGV28frw0cvSF5ABXe+vYtiyOKXkByJBZSCM3wAAD5Zv1v+LRASBIAd3sTJVsu/teQgFqQLIAZ3olAvB7oDAAj4O7vatlyUXtmQ2EJoHZx2fw0KoAV9cVbvgB4MfSoAMrjHZxcbuvdVW11GwBCw7MDsB2P43EbG+Ch4aNvh/HFCL4fUBCDBbDdCpkAGGFQALbwPoTbsws/QDGtzR5U4R8M4AvvQmgC6PLtRwHIr89hP1sFIwwSAAC8CCeX28paoAKA1/nlTRBArPBRAdogHHZf7fv7XQn5Zp0OQBOCbSqstfvDDjVFJg/gak27O3xshhHU7/QQihi+EwBncLTXN88MbcfiyQE0BkdF0ATQJ0MpALgQnOPdqPxqZYgPSFwAv56/4Xk5GgzgGPO2EyJbMRwEgPM6zNILqMNH3Q0++/Gp8kf72apyJhByOaIAcBFUY589gImwn62CP5nDCLYF0p9XW7LPZaKfCLkQvF+K3C+Ns+WiemxWTEnDkwBghBAAHF4tk/E1WZIACiFkGOCNkUZABTRZANW+y4P09QJ8S6Qq/+AA1MbIBYDvBjEAdfhOAMy64LsiyzdrsumudwCubQQYAUaAEWAEGAEecfsLbPOvrqrJdtIAAAAASUVORK5CYII=",1,32,52)
global.bigcrystal = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAB3RJTUUH4QoeFTsnaO9hQgAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAEAklEQVR4nM1bvYoUQRDuWwxFLjAUWYwuEXwCQTC4QHPBVDFUxMB7AmNTjX0Dg0MEwScQTC6SRQwNdDHedXrcGmtqqrp7Zqqq54PC3XFne+qr367eC7cfvw5e0mDvuV7RM3kqv9n93i+NBF/lnz/Yrz68XBQJq2CMz2+fRuV71xoS2uvWaxfBw/JgffAAkLAATzDzAM7yEbvzTfd6EZ5gbXlsfc4LanuCugdQy69fPOE/uPnZvazpCaoESG7PYn1Vc+npsHJ7zvVTYVArFFQ8AFv+1o/3nWSBwqAW1EKgWOkEauQC80aoCDU9QSv+j7+/Y2VsHvDOBSoe0HzR0a/rD6fdXDkPLCcEmL4Ai9XSyyBAQCQCxIqEqgS0+4LYEIEcrkWJSmNYkbAIDwCl8UaJgwkJmp3g2ErQZvwR1cGiSqiWFImEMcqXEKBJQrUQ4Nx9dXL5/5tMedQKBxMCthdfOyl+kEb53cWfsDpdWzySvK71AiUk9Cwf4dkceeSAZCJ886iVXuwfrrUC743yQNUyOLB8BGd9YXiikge0NxehsBJgK8O1+LmBBwjW1/KCKh4Alo9JLwpge/4pXDm52esMrXHJZRUGWHF8bRsaEk7v/EueDiS4ecDxs/v9hRsv4CQCPIGKBUz7AG1YkGLqAVZEaMKEgG93z3rvxxIRc4AbtEsgnAlA+euVLKYEciI1U4PSuqRGSDoVskxgGlA/GJEQSfDe6BRB0+2pSB1hMgSaUPFy/9khkLP8l2v3Rn+nd7jMDoHccdgUEjyhkgNyJCRLIJkKlyAewjTue1R8QwKqh6MSYl8AJHQtMaM0tz8wh/b2N5UE2S3tIfHhLbFXAmyfX5sASbJTXjQr4O6zUF61EZIgtsHoPJBOiKcMVafCbB4gPnzBwDOWQrdNlEocMWEgxjsZcUFjREOA3ovzS1wvKIWCLwFCzFMCpGQI92IiFp8DKLhD0PZAhJsQM/dG3Pj4qv03dqHVp8LhsBeg1orXJItL5wPc2SCdKnf7CSVPUFGeq/v0fY6AbpPEhIs0Yod1qhMA8cl5QdGPpdAghJKRywtzCTDfDOUAsQ9jsC4XoDa5nRgzswSVjZZW5udctiQMuFEY1yrT7wbvqBYCEgE0H+TCAB+PiQQwJHXfMbMUmhAgEZLL/gMChIGplvKTCQhM6cPK4hIIrzkvYDtAorCYPGt2giEM/xYIFOJCINUNpqw9IODQAmspP4sAmoxSBHAksO0yUXxAgsFviFUI4CyYIiG3WWLDxOgH1LMIGFiUceFeXpBKHSJATJRLI0Ca5XPlja37BTtEa+tPJgBIwESU9PrF+wEn5WcRQInAQhOXpCC4NvcZD+VVCMiRIpFEy1nq/yzlL63mzvs9oBIWAAAAAElFTkSuQmCC",1,32,52)
global.bigcrystalfrontlegsidle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAABKUlEQVR42u3XsW0CQRCF4TcUYLsAy0Ku4FpwRuACLJGeKAC34SsAi9QdEDhzC4REp5NFAYCId4lAC8JycLMHlv8NN5iZ/XaCGYsx6j8fAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPg1mNkhWIzRXAvNFNsNwMxiE9YqljOtHoZZAJqwliT1e7du8V0AzCzefX9ofv/sXuA5AE/k1gDpz+8BcnTBKbIXtAtA771UXVZH965teiaHF7IbQFhs1bxN9Dh91c3gybUDcuYAAAAA2gNo/CJJnQJIUhhNLw+QInQJ4PH4LADFcqbN55dbgSmAJNVldX0A6UDkWdxPs8DVjcIsQ6zDAAAAwB89Owf21JAhbtuUAAAAAElFTkSuQmCC",1,32,40)
global.bigcrystalfrontlegswalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAgAAAABACAYAAABsv8+/AAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAADkklEQVR42u3dsW1UQRAG4HkuACgAIUQFboGMgAIskZ4owLSBCwA5pQMHZLRASGRZyAUAIvYjOmQDCX476x3v94UE6OZ5duefk323rOsaAMBcFgEAAAQAAEAAAAAEAABAAAAABAAAQAAAAAQAAEAAAAAEAABAAAAABAAAQAAAAAQAAEAAAAAEAABAAAAABAAAEAAAAAEAABAAAAABAAAQAAAAAQAAEAAAAAEAABAAAAABAAAQAAAAAQAAEAAAAAEAABAAAAABAAAQAABAAAAABAAAQAAAAAQAAEAAAAAEAABAAGCmhlqW3w21ruviiQAIAIbfBPVfXH2Pw8uz+Pbk1dQBQBACZ2iaAGD4zT38lmVZH339EJ8fv4yIiKcHD6c9tIIQ7tF252j2+ySzL5oEgB4X3sgHI3v4jX4pXP/5759Bq16odiG26oX7MAhuW8PstVcfeq1+ftefRYUwndm3WX2xOQD02vxGPRiZw6/KpbAsy3rwfhfnu5Mb/97itVa6EFv2QvVBsGUpUHudoZe5DP45W0buh+wlOKsvNgWAHsNv9IOROfyqXAr7Z3D15WdcvH0Xz07fxIMXz5u9A1DlQmzZC5UHwdalYPbaqwy9zGXwX2dp1F7osQRn9cXmAJA9/EY/GJnDr8qlkB0AKm0BrZ5D1UHQYimYtfZKQy97Gexxr45Yd+++aBIAsn9IIx+M7GdQ4VLIegbVLsRWz6H6INiyFKh9/KHXYxmsFAB6vAOctmBVCgAjNkOvADDyQcgOAFUuxNYBoPIguO1rV/uctVcPANnvAAsAAsDQASCOjyIiBAABwBBUuwAgAMwTADKGX8WDEMdH0weAFr1gCKpdAPj7/4uIuHp9KgCMFAAyh1+Vg5Ex/CoHgMPLs/jx8dPmw1rxQmzRC4ag2kceencVAEZ8DncVAFr1RZPPAcgaflUORsbwq3gp7H8jttVhrXghtuiF6oNgy1Kg9vGHXo9lcP8sIiLOdydDB4DsJTizL5oGgNbDr9LBaD38ql4KLT8Nq+qFuLUXKg+CrUuB2scfer2Wweu/YT/yn4FmL8GZfdH0o4CzGrZUGmw0/O7LpTBr7Vt64T4Ngv9dCmauvdLQ67EMVvlI6J5LcOu+KPNlQJUPhtrVPlvdW5aC2WuvMPTuahmcte6hvwyo6nZdKlmrfbrgU71uXwbkzDqzg7/mKgEAABAAAAABAAAQAAAAAQAAuOkXtGZoCE5ihC4AAAAASUVORK5CYII=",8,32,40)
global.bigcrystalbacklegsidle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAApUlEQVR42u3XsQmFUAwFULOlcziIc7hlLARB/JUk8j6edGkul1MlkZnTlycAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4FFgxBmYmTFK1isAEZHTMh/LutUAFOa1AlzKdgA0IZQA3IoWFf6ZW4wwLEAXKgAAAAAAeOUO6AAY9Q4A4BT2DHmHAQAAAAAAAAAAAAAAAAAAAAAAAAAA8BezAzCHX5AQXdPuAAAAAElFTkSuQmCC",1,32,40)
global.bigcrystalbacklegswalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAgAAAABACAYAAABsv8+/AAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAACpUlEQVR42u3dsVnsMBCFUdwldVAIddClCeAjgQDk0eI7c05GxghL+vc9djnO83wCAGY5BAAACAAAQAAAAAIAABAAAIAAAAAEAAAgAAAAAQAACAAAQAAAAAIAABAAAIAAAAAEAAAgAAAAAQAACAAAEAAAgAAAAAQAACAAAAABAAAIAABAAAAAAgB+83Aex9fDeZ7nYUXAnkUA2ERT1uHl+eOL17eRa+FZwH61f8cEgAPPRvpxHYauhWfBYW+v2rvRAfCXjdHtwFs5FLpspqsH4rd1CFmLyosg7Vkonz3kQq0+t2JnL9irHUJqZd/+x9zbA+CvG6NTSa4eCqkXX+WBWH2oRF8EIc/C1tlv/HPfcWYlvRDaEgDBLwJX1+M/5t4aAMsVFH75XTkUUi++6gMxcR2qL4KkNdh+CabMvetnn/TcVwZA+ouf1QB40NzbAmBlETpcflfnSF+Dqu8/bR12fL8pa/CwS9DsI5799BeBZQHwgLkFgAAQAALA7Ga/xRq0/BfQG999AkAACAAXgdnNLgAEgAAQAALARWB2swsAASAABMCdAmDQL0K5BM2edAZU7VcBIAAEwMBfgBEAuWsgAASAALi2HgLgqfFbAAXA9cNg2HuhBUDwWyAHBkDVfhUATQKgbBGSPwVvcZaWH4SxGgCfYv/7o/LtYANeASaeBZNnr96zbe+AG74F8HYB0OHyKwuAoIuv8ya+RQAEPAvTL8HKc2vq/uk4+2/3b8sAWNkYnf6gxuQ/5DJ1dj/zeR8FvOPs8hw5O+I/CrjjpW52s5v7gZegdTS7ubMDAAC4WXQIAAAQAACAAAAABAAAIAAAAAEAAAgAAEAAAAACAAAQAACAAAAABAAAIAAAAAEAAAgAAEAAAAACAAAQAAAgAAAAAQAANPUOXM2/zEK71bIAAAAASUVORK5CYII=",8,32,40)
global.fishmenidle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAYCAYAAAAF6fiUAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAACIElEQVRo3u2ZTUtCQRSG35EW1lqwVdBGyY24iP6AQogt/R0XwVXQymiTIP2Glm4CJYrbvg8XgYtMN0ErBX+Aq6bVvU3XuZ8z5xo0Z+Mn78x5nzPjmZFxzmFic8EMAAPAADDxhwEwxjgAcM6Z+NxYp8efSAAm3RwO2ku83h6iUh+5n+kAQQ04DX0VfyIDuL7fQbOVR7+3cB8v7E/lZLwJOLo6AVMXkIo/gQAYY7xqFZGtFdz3Opk5AKDfW+CltI2Hq6lSImkBptD3+nP5/ohVaT+WP74AZOaL0cnMcfa1i5U9SwzBb4xOZq4FMGUBBfnjzH9slUP9CQTQGJ64r1f2zBfGsDGInYQ3AWp93QXk9cdPP2z+oQBuzgcAgOOjovR7d89TbD3F31PT0qcsIB36awCcTgEAxAHE/U0W2bcPHLSX4T86xPrUgL3zV9WXAph0c64ZzjJy9jW/aLbyqNRHkQBQ61MXkGz+SfWlWxBjjJ/W9gAAY6usvUIp9akB+80/qX7kFRAWUfdRav1NAda2AsQlHNRFqJhDrU9dQHHnH6Qfeg4AsDbIyp79kK0VtLeJKvrUgKP4o9QFxe3TVfpoHQkk0acoIEczWyv80geQ7CAmtnKOybKoWkUlALIEdAIW9WRFpHqSV/UnEgBZhTgJql4VUAFOU3/YGKz1+aI/QWeMUAC+BwgNV7vifi0DrHprmZa+ij/mH7ENhwFgAPzv+AYlajD+YEfV7gAAAABJRU5ErkJggg==",4,12,12)
global.fishmenwalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAACxElEQVRo3u1avUpcQRT+RiyMtaBVII2LNmIRfAEXREzpcyyCVcAqwUZhyTNYbiMoomx6NRYBi5jdJpDKBR9gK6/VXGbHe2fO/JzxqnMad1d3zrnfz5kz9yqKokCOHL4hsoByZAHlyAISQhQAUBSFUF9nipqNEUlAKQoXQhR3h3NY2n3A77PPWN28KX/3GoT0XjEiC4i7cJnj6GIW2zvz6HVH5c/9/v+gPG+BXFl30zByEhBH4XL99U4LM+3F8rNvU/cAgF53hF/LH/Dzx8A7z1sgd73TAoAJjCROve4It50VnG6dJMfIKqAU5Orr6wDtPS5g3B965+HubpzkmtbXMQrJ4WsAo4BSkbt1+qV8P+4Pa/P5AMRpgFTk6jliYhRqAKuAOMlVcxx/PwEAbKy1Kv/u/HqA6Su3bYfbANzk6jnOrwckjFzxCTEASUBc5MrXqkgP/l5ivPyp9nszf/5hafeBNuAl6m4c5OoYqUawYbS6eUPGJ9QAlQJKRe7d4Vy53t7jwkTbrIvtnXkngFIYgIPcEIyoc52LAQBUdulaAXGTK/N8bX8EANx2VqKJtMkGcB3afTCicBDLALVbGBe5NgJsQdlqmmyAGB0oFJ+YBnDqQLGKNznAFC7DbhMN4HNCkviUNRpmFZ/1Qw1gnYG4yFXX108B4/5wktj24sRntjwpDaDWL2vkOKlW8aCKyEc8MQxg3MJcyXURkO34qANFGehsBjCdMEKP8jaMQu4Sq9ekznSSVJ876lUGUGundjergGwEywtwvQj9iK2uQw3KLKQf459tWxpwriKqIlYVashNVkq+0McXdbuMKiRTDqOA1CJ9SaRuZRxPk6kiVWeMkLvSdWvHFBAHdlVCojYGq4BCW+9LBwVo2W1jdwou8XBiJUVEPs2ZBMTVGZoqspjX+lrxc+1s+V9ac4QJLgsoRxZQjheLJ0DPQA3NeYEHAAAAAElFTkSuQmCC",6,12,12)
global.fishmenhurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAABxklEQVRYw+2YMU/CQBiG32NCZxKYTFxQWAyD/8AuCCO/A0mYTJhIXCSp/gbHbtKYmLqbyGDiIMhi4gQJP6AT59RSLz259r6jDL2llzb39nufa7+77xjnHHmTN5YDygEZAxQ8YEKf5sWMcQDgnLNof9/0VQDFjqMwMB2VUOuv8P50jkZzsnkxASgq/bSAtCEFBh6eD9HpleHYy/B64/1oQ6LSlwFSTUwsbfAX3RMUrWp4b1hYAAAce4m3+gFe7r9SQ6LUjwOUNGsz3eCjbVhYYLCuwPfmqSBR62cCqOW2Mb58BABYV6dSM25rnAoQpT4FoESQ4gzENe9uBsZY8qRKrB8FpLshYirLLgC03HZ4/3b2Cr9+LB1X/PxGrb/aPtOG9HcKaDoqhcEO1pUwJzj2Ujqu0yuj0ZwoATKhL/5i3BSgwMS1dQQA+OiekQIypZ/5F0T5i5nQpwKkNLtB/79lWFxlVJO0Kf1MVjGZAd+bb2bWqiYCZEqfCpAyJNGA782lsx0YSrJhpNbXLTW09kLRQEUTwU43VYFJqJ95LSYG+icIglpMV1+1mic7pxFN6BSlu9DfdqLITQESD7X2VT8/cs0B5YCMtl+sT+DgPEWDLgAAAABJRU5ErkJggg==",3,12,12)
global.fishmendead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAADX0lEQVRo3u2awUsbQRjF3xgLqVhMUVAwWjw0VhGKB0ugVwPFxqP9L0oq5FTwJHhRsKV/gjellyptZXstkXootBLTFCpNI5g2YsSie2jcHsqM4ya7md2dMUrnXRI27NvNvt/OzPftEsuyoKXlV0QDpKUB0rqUANEfiO27nAMTYgGAZVmE/35V/LXEAaq7n4yAtxe6MJQu4+PrMYxObJ4dWELQqv21ggEUGCIa8NJ6G6amu7GyWGKfc0YhcMiq/bXcARJdGBG/4Y6nBhFOxNi22ZY9AMDKYgkfhq/j3fMvvkNW7a/lDpDXVTUJGi6v2ZY9zJz2wDTyvkJW7a91CQBKrk1i9eErAEDiyR3HsNeSq74AUumvJR8gTxDVC7iejGc5EEI8L3pV+2s5AxS0IUREymoASK5Nsu3zuQzM4QHH/cLZHQylyw1DVu3/3wDBXUeRa3KhAG0vdLEwZ0572JpkZbHkuN/UdDdGJzaFAFLpf5VD9uIHAI/iYSxvmEJtD/sUZqkCiJ7o00Q/AOBT6q70gFX7NxsWXrTHFQQk6t07EgEAhKIdAIB4pYTlDZOBJApQU0YgmVOYSv8A8tXFp+GOpwb/naetEJjPZTCULjOQ/BQbdnCoqsVD3G83Ub15Ay/f/HIFVBZAxMud5FZm26sk4blYsb8AIFILDSdwqEwjjxd9+zCHB1iXXfR/uMHDa4wcI3RwhPe/w9jdqtT1b0oV5hSwaeTPRoZEzFfAqv1VXycReOx9rXB2B49/dAr3tUQBildK+FpsBQDsj3Si8PZ7jb8sgIQhsgdsGnnXuwyAp4afan/Vo7VXgOZzGSytt7F1X6PeFiHE6n9wi01VVKFoB6rFwxqgxsgxAGDTahMG6MJ6QXyQ9otFO8V+FomK/WW8/0IanTeFO5yIsccwdF1XbxSiv7sBxMPDr3fifdcAAN8+n+BnpPUcRHQU8jICKZnXnUYJe5DnTkLCszDJ/rJeniKNoOchupc9YdvoKMP3u+goNGcU3Be8DhXdaLQdAHA7+oeV73SKo9rdqtS9bqJP46VXKDRkVc+jFPjLfPOOiIbLi78p6AJaRlXJH7t3JMIqMLtCB0c1ZX2jNxItVQDxJ66qhJbsrxSgID0h2aO3F1/9SqtWsDtBA6SlAdJqmv4CM0rR72NParEAAAAASUVORK5CYII=",6,12,12)
global.trident = sprite_add_weapon_base64("iVBORw0KGgoAAAANSUhEUgAAACkAAAALCAYAAADiBKTLAAAACXBIWXMAAC4jAAAuIwF4pT92AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAA40lEQVQ4y9WVPQrCQBBG34DkAoY0Fqa1t7AQIWDhGQTtvIGlpYVFbmBnIGewEARr+7RamMoTSGAsJLLxD0WS6DQLOzs7j292ZkVV+XWTsiBFJJNYVaVwyBTiUXIR0ci3qbYtnFb8EjB3yNpwzmExuvN9AgggQO71rnf67DchKXTQhWbPpjE+Po0x4QXQyLcB2C6PTE59ABLXywRVdmsS13u6muemVgjAYAVBl+ud6X6zd1HylTmtOFvu20ech5KJ6zGLR1fwFPYdNQvpblMEVZWfaRwT8NsOlzKH+buzUv7hxzkD0YOE7WWK0hQAAAAASUVORK5CYII=",15,5)
global.EliteSpiderIdle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAASAAAAAwCAYAAACxIqevAAAD90lEQVR4nO2bTY7TMBiGo1kgseMuIyFWLFnOmgNwAiSkOQCnYM8l2CKuMGvEDdiwQpQ6yud+cZ122vzYr/s8kjWt08TPG/9Mk7ZdBwAAAAAAAAAAAAAAAAAAAAAAALAcuzOldtT9A/IZlAMouwcU/aPfy08/dm+//8mWsK2rM4O6f0A+g3IAZfeAqv9Z58ozqPsH5DMoB1B2Dyj7T3qHeiu+/ue/3/gvi3wG5QDK7gFl/6y7904zmPuLh8/4L4N8BuUAyu7N+AenUKbczdu79/73D6UzqPs3kUE5gLJ7M/6pY654b/zJ0EoAZfem/HOLpi+pe8yA/81nUA6g7N60f5rFFky/eOJPBvUAyu434R8cvX/0xp8MDQRQdm/CPziccjd/c8efDC0FUHZv0t8/v9C/RBZ1/yYyKAdQdm/B/yiDPfb3qab83U30eK+rQAZ1/yYyKAdQdlf2j23P9U9vuG+UQd2/iQzKAZTd1f1HX5r0GVL/4Ni/xvl797DNvmYQCv63k0E5gLK7uv/Rgmft+kXTHEcLY8bdvv/kL0NXzqDu30QG5QDK7ur+I2ff3ugnIon3UQbnjv/tZVAOoOzejP+Uu/nlMnpfv1/6MxT7i3+7GZQDKLs34R+Onf5MxN619e3u/f2C6N/V+Xd6fj/LssXkFfdvIoNyAGX3Fvz7DP4yMXUxz/T3a74uvZEej3e4Mb8m6v5NZFAOoOy+mH/38f24uE/VVvbPZrCF0Z7nFlrLc8J/K+b7t5Lh/mHrsbNggHIdoOy+iP/dlw+7u2+Pu1e/vvbbwt/SGdJF3V8+phNX2v/d62YyFJwDMwOU74Dsx9L9iQwnd3ge/Po6/7ry7tf777d591D+vun6UjzDjfin46eqDMHPSjq+6ltAXYDh5Aep2AlDB8S6ywbRJpcC3jW0HV0H977OBtHw2krcr/Lv3ffFfG27vTbU47+ef5UZBv/R/HUZfJ251zIHYoN+FeyFc3UXdIAdY233fnDsHwdPc7C2zd37V+J+tb9lsH19jt7d7Y//wv7usuVchg38Y4ZOc/52sdFuONm+E3xdFLxgEMXVeMVPlCb93QCKby0vGTzru8/y9xlypVr/TB/I+T8zQ1F/jfnbxZUwhnHPLYD/LzEq5QfRdf41TYA5538oT09Px4/x38x/KkP1/hXMgfH1rsm7j3RHq+ZB5HDNeWYQrXxn/Xr/8u7z/O2/8CHHOBf+W/vnM9TsX8EcGN9szohm6g77VdABs/zPuev4H+r9dvy38O+Otqn4l5+/owbTx7ntad1UB0zttwZz/LvutLuC/3OOuyb4nz/umqjPXwAAAAAAAAAAAAAAAAAAAAAAAAAAAIDC/AeGKpQYlNdXnQAAAABJRU5ErkJggg==", 6,24,24)
global.EliteSpiderWalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAASAAAAAwCAYAAACxIqevAAAE+0lEQVR4nO2bTY7TQBCFrVkgseMuIyFWLFnOmgNwAiQkDsAp2HMJtogrzBpxAzasEEPacXWqy9WOE8f9g74ntSbj2JPvPVd120lmGBBCCCGEEEIIIYQQQgghhBBCCCGEEELo/9LTmYH2FfnXVff592gg8j3/8P3p9bff7gjPDe16EJF/XZF/BfVq4CxzBx6CyL+uyL+SejaQ5Q7bZejtP/7+aok/iPzrivwrqmcDLrvmth6E/dnDpxb4g8i/rsgfA9v4A1MYOXbh1uwj//1DbQ/kT/6b+TvOv3sDLqM3NHdr/ORfl5/8MbCZ3ysaPSx79NAIP/nX5Sd/DNyU33qRgtHF0zI/+dflJ38M3IQ/MGr+yN0JP/nX5Sd/DCzyB4YlduEX9tb4yZ/8t/B3nn/3Bmb8+vcL+Wt4IX/yvyl/Z/n3b8B6kMf6Pj3Hr95EjPf6hT2QP/nf1ENn+XdtIL72Vn77hmNBD8Mt+Afy3+SD/Ovk37OB5Etj2oPlD4zjPopfs4fn5GPWMAqeAPIn/6vZe8+/ZwPuN1ftR6XCmBSGwy7f/9CX4SU9kD/5X8vea/49G0iY9eslX5E33DMPir3CCSB/8t/M3mv+vRtYZBc+z6Pm1cfZr+HrVXEvfvIn/y38HeffvYF4yauHrFpyqawLQq9qeqXTx4mXvcMfyJ/8N/J3nn//Bobpfl1WKssinPb/d/Q2+0Zi/HunNyZ3Yyd/8t/qoeP8fQMCJaN1A54HKQztKfcPhSP3+7fpKPjxae8F5Hkg//r5a56G858bCL+/+PllHHef3yXv7rdqwHpI/KiToFeyOMkeeIPPu68fR8/BW/hZ0EPPDZz1kGR8eD7kG9h6zl9zt5y/HY3X/9GAnnwChBTMOEwRJQYbMRA93J++EGbZxwlV8795mbCH8efVMI7STWALxn7KErM/MDefvz4HE/u4oNn6aTR/d1gfreavcp/5sj3cTv6TgcOQFTY2ayh4r4im51oyMKiCjx4M+8g7eZPHwhv3mfYP2wt6OGYtE4xMoLns1+dfjt/Uy6AWNI+/ufyncyAs8XxYH6o3Gqr/5O4lngvlwdZRY/kfTSRXCmomlfD1CWjQQDqJTk2g2e3lcuAXbu0jPI5ZFLqXl9yEefAKPxTTBQ1ciH/GrrPP8TeU/2yiSSZL40M8NFb/CXvsYbUo5Hp4Kf+C/EcT8QohfWH3BDRmIL5ecqXjscswHrxRsoFt417Cns1/2mdHDy675o+rrr41WJl/Af6jB1MrdhGe+WhrAh1cduciYqmH3fxrTEDOG2nzE9CegVj0+jZrxj6tBt54fHycPy7zpmJ6laAm02wDO02Qa+Cdm9hlj4/9ehpmXhbyLzEB6dtdZxH27wzaWcDmjKc6j88v1lIu/9ITkL5n1NtnJyA1uWSgGLtMMLZQnOKJxzgj3V5oApJL99gItplXNLGbv77l2WkC8tid2/js8aaOUl/lPllK2W39r6ifigtYyijn/FwPp/udtvk9UUS5E+7P/uebuewE5Bf9UgPHY+0xZvvemk+a568gTnxLDTwvtDLs618vV0un52o0cX6yT7fZBk73Lc+e771zPZzWybrFYxctF3t+n1wDl9Qa9kuOK6lzE/q54/wG9v/2rZVjv+bYS5+/ta5lz+Vfin3Na13aw7V7AiGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhArqH2lw1H9Wntp2AAAAAElFTkSuQmCC", 6,24,24)
global.EliteSpiderDead = sprite_add_base64("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", 6,24,24)
global.EliteSpiderHurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAwCAYAAAD+WvNWAAADmklEQVR4nO2aQY7UMBBFW7NAmh13QWLJcpaz5gCcAAmJA8wp2HMJtogr9BpxAzYsMW2ry6m4nWA7LtcvtUuyJpNORj//v+o4zpyccyfLY5ZyaQMwATJe2gBMgIyXNgATIOOlDcAEyHhpAzABMl7aAEyAjFfnQPfKAkBuZ1io8foHgCMKUS8b/Hj89MO9+/7nZvj9J2yI9PQPAkcMoqOX70fOdCMQ6esfCA4SQFnjvck0+P6ff3+jAYSjfzA8CABlv+q5+TwEMv/V8wsKQFj6B8PTHSIJ88l4bn4I4M2zNkR4+u8RIDI3NZ/2p8ajAQSl/x4BSruUB0IjNT+GAAAQlP57A8ibuDVf4NvUsbx7EQCC0z8BWg//OQ8gGg8OkJp+JYC6QSQVQHjsZQGAQISnvyG0ngAdhql3CPSZD4EC2OliDZiw9CsClANKBSD6nU82twJgTzJxwno4BMv6G4ODgahHCC0BpGsxh0KwrB8EnFEAxe7bC8CbzOcQq8HWYvhTT3MA1vUDwdMEUc2lpi8WufHc8FVnZsznrwgGQoSpHwweVwOPKwcou/zPF9xS429CSF4jDAYIVz8YPK5ATy1Am2+r41tqZn5ugY4Hlq788kW8pgCs6y8ICRYeVwHQlvnUobwj+WSUd7o/hk9SeQhN5hdGBK2/ICRYeEoBokkjH9xg+pm+hOT7wm3g4/v1GPEvo+j6C4OChKcQoHCZ6WosDyE1PPdW25/38OWDe/j22b3+9XURPujpC1Z/RVjSJQlQNoT0nRFNNr3JoUNp39PbKNKbzwNIwpAsTP2VgUmXJEDhcnPrIsHsi8lkvjc1hnAZvnOpKAD/eaabpQtPf0No0iUJ0Ck1PJh5MZjmBP5rP5pM+68hpJ3Lfw/HjlpMRNJfG1hnWLZKHqCr2dSJZCDNHby5ISQ26cx1chR8/bwpBMv6a8Lqjsl2id3C4tc7MzsNgB+TG+fz+XZ7DEB4+gcA1HKeGEDUsXHbP5ksxi1hLI+54bzQzdfbRnasH42lCk+/MEBb5/3vb8kBxAyP22xNJGP+EkAaCrudDAMITX9HgNJj9s5L922dJwIQGbVp9q2JOYPzgcgWnv4DANWEXgpa9ai9XPYEU2NaaVDShae/IbSW4LvA0gGgVuM0YNkqLP0SoY4cs5RLG4AJkPHSBmACZLy0AZgAGS9tACZAxksbgAmQ8dIGYAJkvLQBmAAZL20AJkDGSxuACZDt+gc3UXhDYHr7BAAAAABJRU5ErkJggg==", 3,24,24)
global.EliteSpiderShield = sprite_add_base64("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", 9,24,24)
global.EliteSpiderShieldOff = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAwCAYAAAD+WvNWAAADBElEQVR4nO2ZQW4TMRiFrS6Q2PUuSKgrliy75gCcAAmJA/QU3fcSbBFXyLriBmxYIUJs5jnP/3iSDjS2/+E9yUrGmWm+5+d/4nFDkCRJkiRJkiRJkiRJkiRJkv4r7c806cLyGEDme/nx6/7Nlx/VFj8L43pwLa8BnGV24GEmTxXsOYBF7tiPxv2Pv76PxF/IYwV7DqDKztzWA9hf3N6NwJ/ltYK9B5BYIlNsS+zgZvbE/+p2BA/+K9hxAFXGWmPugfi3UcGOAzg51twse/YwwgTaQgU7DWCR33rBePPYD8C/3Qp2EsBZ9sjI/Jl7DP7tV/DgASSGU+zgB/tg/P4r2HkAM34+XsnfxcvmKthbANYD3vNdfomflhD5l6K1B+8VPPPgKID83f/Kb5cbDT24rmDPAcw2ZJnbPummc4if2fEUzcuNBvylGYcV7DmA6r6bfVABYzGxK+y8N9d6EnmtYM8BLO7yFxu0hnvmwWwA95hAXivYewAn2cG39B8BWzC8T8f9yPQC/EcTnivYcQC54LhhzFGoPJ6cCefE18FL08njtYK9BxCmuz0/iDALOO3uP/fZZUT+ew0eZLxXcPLgOYAlD5jYOK4VChd4+PCubI2evLZQwcnHcwQQ+64+f9qHt6977GdV15RpMkSe6TjxxT6cc3h/df8+9V9/e0ge4mtLD5er4ONjfRMfdvDt+g3ngJ8HPrafNyG11gEUHjBhwh+OyIg7CljzJDKTp6eHZ6ngCJ4MI8wOAeQBPrzHHSW1iQsVinAw2LgOYRReBmXHBBrFw/oKPoAmSHqFqVbQ1gMGMEwDnoOgEBBE7MOgcwidvKxiT3eXiW8gD8fNRHwpDNgq4Nsmt+4TiFgtu+XnAAbwso4dWY3loTRTmKLfYT7e7XbFa+ungCo3WA17jR8t8/fz8jfsYTAPpSEswmZG5gEcz+83eaBiIVob8KKv5qOfl3XsfM04HgrNZvnCcTD9vVVjrX1e83HquhZ6Krs9HsmDJEmSJEmSJEmSJEmSJEmSJD1BvwH6HZd2hXUlyQAAAABJRU5ErkJggg==", 3,24,24)

global.gatorswimside = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAAB3RJTUUH4QoNEiwbBeB3pwAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABgUlEQVR4nO2WMU4DMRBFt4lEwSE4Bg1IiIvQ0NHSUHIDCs5BSwNcguOAFpxoopF3vPbaY8aDfqSnJOPdN9+TzSbT5e3TBEAt5gGAb8wDAN+YBwC+MQ8AfGMeAPjGPADwjXkA4BvzAP+N38cc48Vf4x5qAyMOaKt7d3G2QKNXT3+Le4gNjDygUn9wnd5d7eGvea22T09/q9t8A6MPaKtf6kOvNfJr+jXcyW8rR3sDPf0W2fnd7Ov8AF+jOvXI/YSmemj4td0LqXSb19jA2tA1/X+ZXYIuzNfnh/nz4+X4HCBHqAWknrkerf4O7mnxQUrva5s8vu3mLT1aBqTtrs1OTt6D97q/uT72iC/mtR4t/h7u/Xzev09mTiiWkjsnrIUPuMWdO680P18vPTZkp/cl2VJZ4vpa5rVjcmsl85Gy5faWOl/8D0SDi2tSPbdWAg+l5U05NfISfOixm9e08ksXW6tfYyZNQwTAPADwjXkA4BvzAMA35gGAb8wDAN+YBwC++QFjduCU1Xgs1gAAAABJRU5ErkJggg==", 6,12,12)
global.gatorswimfront = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAAB3RJTUUH4QoNExEhqMaMnAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACYUlEQVR4nO1aPUsDQRBdRNHCytJKf4GtFgpi4d+wsbO1sbewFOLvsLVKShsbwd5/IBY2gUhkL0yYLPs1Mzu3OdnAI8tx997bN3N7d7mYs+tH09DARXUDDcNGdQMNw0Z1A/8J49+duUVtH9I5UPavbrgVuL5/CW82+f10v4N2OJo6GvzYN+YvWegQbykNSS7pHYyZu9AosKYOBKTBH+IGSIsc4pbywvHS3LPMb50erKB0E6V0JGHhApeah7sK+LiBX+JdM/+Ub+BP+Y93FxLYvTnvgEVyBKhB+XS4GnB5Cc0DNyhHI1RgTiEovt38Od4xP3Bz6pvdQL5wpGdCbHUocbZR+KlF8PGGCkHlp/rWbH52A7kCvnCkl4FYEbSLLJ1DrHl8/BTvseylzcnhJzeQ7/pYMqA+NFIrhIQ/dMkNjSkNyvGt3fwxrg3j+bzO9pbj7aPDDtP3z+U2O4btvmOoH22NXH4OLx5bTuD17cPhL+37cvQwp/LjY9yPt4GwAB6XDAiaoY8i5PJTG/RnNDHfbwvYcWq7lu+Tza9sXti3WO6xZdRidryAQcueu90wllFtDW1+49xDfEyeVyB5kqT65tw6UPhj3rNvslIBsX7FJGqsE7+drz3u5emu47LfGLDN7iO5R1n3XKoE1JeGPXNy+bmPwsB1e3WxLIAdw3bOUxLFNyeXkrknhSAkX0Al3ivlFEH6a24OP1cDZ4QhzSYne2kuJWpbLaBcjRJvoPucg8bLWpe71EtUzOlmkjuH6gH1qdHHHLSg+VcUyb8IqgfTMGxUN9AwbFQ30DBsVDfQMGz8Ac56qZHW7v/uAAAAAElFTkSuQmCC", 6,12,12)
global.gatorswimback = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAAB3RJTUUH4QoNExQXGgvtQAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACXElEQVR4nO1ZO0oEQRBtRMHAyNDIaxgoGHkSM09gbmAo6DlMjTQ0Fsy9gfmCstoLBbVNd9e/x8EZeLCfmVdVr15Xz+6ks8u7tGCBFpMnsGDemDyBBfPG5AksmDcmT2DBvDF5AgvmDf6JKa0xXJMI5B7BP6xZf1An8oTn7/0N2dPD9fr95XGD/NqrgEjuEfwjmxtVx83qqNnj/J3KQPlCME/G3unxFqxCQdIR3GVTo/hHmZSqg2pyJD/ZYCA7uDrfAg4iLQCMGcEdnftok0bXweUXGYhqcC1AvsbDPFZxInMfbVJpHVPwq8SxiBRtoMjcR9UwwkBeOu0kxrF6+9ig9d5ycLhPdj/d+OGz0Ye0hov72zV+z9GpvEaSj7bHVQO1ivUwzuvXYRh3PqjcI8wTscByHb8rnozlfYj5OSOaQhKM6HJ0UoBfg9rthcNv3V44+kjvs/L5Oa9InTKsOomSL/dFTC7Ze6O4cYwWfxlDKnxvEbRq0N6kS3QCQ0hNytGo1wez+zUN5vJLJps2f43wNfG9NQJjc+rA53oshFoPWhp1A6TGXbpHg2viePw0pUyEY2i2lrKG3grW6lPWUOsD1khbA+5xbfJg86gM1HMokHsI1HO/hTuSH2JQq9fCP6IHFDc1oU0BrOL0BLKuLGzQlomsNQB3K3/rv9xQA9VkT+0TenzB4VYZyEucUTFaz/Q8JlC0gXqNti4w/DwSG0fUO00QL+P0YnjHwdPCMwY0MTp/a6NbmsAWpbkJZxkIi+85dXoxomJhobz5o/OP4KXy5Uy4EDP8V2j/EpgzfgB0g9VqBKbNYwAAAABJRU5ErkJggg==", 6,12,12)
global.prisoneridle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAYCAYAAAAF6fiUAAAC40lEQVR4nO1ZP2+bQBx9VGXL1E6enMH+BJYolr+AOyHVkbJ0RfLmoexW9lZRtkheu1hqKjGVL2CZInmolA2GePJUT9kY6ECOfz6O44CQtrzF1h28+/3e+91xHNJqgsagb5rj/lfwqu0A/nd0BrSMzoCW0RnQMl7zXqhvEGTbVhNI9YbzV+NEH6BYHy4D9A2Cz28GAID5YhS1ny3XQY0mCCXwQvhz9SkaI9eAZMUnyc+Wa3y7s3ExU/F4dUkGAVBpRkQJaIofNQ6tfWECZfnLCsTiJH949aGNJdHeA0jFEzFMR4am+Bha+3DkIIAkhVzutA/TkQEAxtFLmVDwHnCSABmD8LvTfjRmXgIi/ESgCvzC+mTHYC5Bgx8PYeDvz1PthJzgfPU1/DNTOeMPE/j02wUAfHk7TCVA+IfWHu60j1/6GgBwMVN5KzYjEFL8sw/vUvwJgUrNiDr0YRrgPRETh4HY3aTLD/pH3pip/JoSt9XJ32ABAaDrQwMrfqoBqwkkfeMFcAYnfXfff6Z+gWhqlX4GkMoD4rWfxi+KBgtIMo50fWj8RB9QZhf3NtR0ZLjTPnr313i8ugTur1PTt6T4knH0ogcji78oARZ/2QIqwZ8LRgFRubkM0BQfvXE8PQ9bG72xit5YxXwMGEuPcTcfkruTJD8AIFy7K4nDMvgJwvya4hcWaB64DDAdGRpCUW5vdgBkwNlhvhjhsLVF406BiN4UP4fBwiBLXBw/GVOFBhuGlX8v91EECXa+GEFT/Cih5MwQRXKGNcEPIDLy9mYH05EjoeowuEr83AY0mYDpyC9WIB5UiT/XgNUEUuLhFJGR3YSm+Dhs7cI1rgxo/HWgIYNr0Yd7F5R5Y4RhxW+YgjjZCdFQweAT/lCgeM2us4BE9eEyIHvEAMRnRbQ+ETRg8LPx52xjg0wfFdSzIAIiMk1gVl/imiKwDqqYh1iceC5+2v2svnjg7qN8u+i+iLWMzoCW8Qda5QLrFaFVXAAAAABJRU5ErkJggg==", 4,12,12)
global.prisonerwalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAADq0lEQVR4nO1av0/bQBh9rpqtk7dMzmD+gkhp+A/MZKlUCgMrUrYMZa/CbAmxIbGyVEoqZYL/IG4kNjZnCBNTmcKU4TrAHefz+eI7n/mh3pMsxyb53ve9d5/PPgM4ODg4ODg4OPx/8N46AQFEcu695fjWeFca6RA3nThJ/BAAMBx12ckvP3/Z5mkSTWpEAOCjakQSPySJH5L1eMA2yAXTiks3Pj4AMpmmBADPY5XPUrxc3AY0KuizRSMbsKZR0+aSxA9JFgUkiwL2mcYihLDP9O+JH9YpiMWgnByfUTw0a24hX5VGNbVh9djS6DXMJYkfEgoh2dyWRQGZTFNmig4HJMLwNUg4K+fesLmMg0Lk4DcDbQCJPls0KuCTKnp4tUJ4tULc2+TOe15+uu1cXKJzcamZ+xOWex0s9zqYLVrK762ODrE6OtQJTRI/BCEETzoAcW+Dnes7AC817FzfIYsCTKYpJtMU0DSBaiSC18hUGwqqkQqa2gDP+lCNfvzNAJRrVKbN522JA8Bs0WKDiBACz/PY3jB5APCOH5YEi7BYmYTj+GHJfqdDQmuIe+rvGdbAGfvSAGL+dfRJ/FDaXJNpiu/7fbZ/1sfoRlpWg4iyGsoGUKm5099/cnvA3FwRVCgZh2l8XnxVE2hCaa6Yfx1zRVC+/W9f2T6LAnbVqBOTR1WNlFcgkSSLArRvT7EeD4DbU2RRwJPXEijubdDe7SOebwoc7d0+oC8QM1lEU00wW7RY3nz+dcwVEfc2iBHg8eQA6/EAjycHpqFK9QGqN4FKLBacmktxP09zxzXWIXIFUJ7zsxt2bjjq4n6eUhN0OQoCyWqZLVomVwlp7nxcemxLH55H1MiQQzqA+DUmAEr9lTfRFLNFC/fzFABwfnaD2aLFCqDn64I3YDjqIu5tWCG8MXXiD0ddFovm3d7tFwQzgUojW1BpZAt8PF6jMlQaQA2Zm7uj3zZInzvFeJ2j6SZ4DXNfY5Dqxq80hQHq6cVgCijEFsE/+dFjQPuGlC3/V5yGtWLzNdB7qPV4YGt6KXCI4PWxMcXzj/Dr8aDSNKw1gChk5poay4O7kS1AYlYVLq0mqBOb/jaLAgB5jQzNZTxAJa2sDdDjh2WOT9UElQZQFWMNH1XFKUmZj8Z32W90mgAwu8KpkPihrcf43ECyuDRQ2gh1m6DKErztl5JNQLr0L24W3iUVeBuICTSjuUyHSq94qnT8u/43AUtootaPqB8/UD5S3g4ODg4ODrr4B78OkQ20u9F8AAAAAElFTkSuQmCC", 6,12,12)
global.prisonerhurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAABaUlEQVR4nO1XMW7DIBR9VGXr5EzZnRNUqtpT9BrdunjvBZwhW65QqanEKeIi5Qbes/kCGX6HyoSCo2LAJpV4kiV/xH8fHt//GyAjIyMjHZjLJCIiy5ExJ19HWPxwXNvU/H9OGhJHOccRieqiBAC8vN6rwbu3dyCOSPH5yQO+IeqipLooCT+nTB+7Rr0bTxJ+S0GPzZ7J3DLKCqG7EZFla3Nm579xCDgr4pa2cP4kAq0XK+vdPPXeXi9Wv+bPzX9rDjDGmM9nNqJgs6prCcaidp9fg3bVtcovBf/g4FiBPLqZ6iw9nh9OWD49Kvu4byAk7zeQjD+5QEML123PdhyNP3mRFpLjuG8AANvNAUJybDcHAFDjKflzBuUMmiCDgPmzqIeQXNlCcgAILtQh/NEEAkaLpDagtVoFswt5iBSF3/oPugRz8yFXkkshdKPq2uvnD7iMOofQLpL/kf8s0mQB/G7r18SfkZHhj29fTnh6P5XoeAAAAABJRU5ErkJggg==", 3,12,12)
global.prisonerdead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAADAUlEQVR4nO1au27bMBQ9MqohQIEgzuSpQGF9QQCjXTN182c0Wxbv/QFnyJZ8QoGmgLZMXe0KyBfIKJBJm4tOHQzkdrBJUXxIFC1Fcs0DGDZp8pC6PLyXlzbg4eHh4eHh4XF8CGwaEREpHYPAqq8lFH5Yzq0n/EeLSiPqxMM7NyMimg/HAICr6wte+fbLV6CZRW6b30MGOcB1iPlwTPPhmLD1EvTtYck/S68+8XvsoOxABzHkZHYeSRlC7EZESllo0wd+DwGDricgo9mj1evzHxs6EdDNeaR8lr0GK9+cR4X2feD3yPFGrgiCIHAJYzUO1MFsvSJIi/bw/ae2PFuveL+e8P/PkNe90ibaBnUF5JCN8cyIYTrZYPTxAy9niyXiJGQL3Dd+dUCDzRq87jCtyb78nPfy5KzwxY+/vyvH6FxAuoUVy47pdtv820Fq2MlRSJxf3hBAwXsCDjYCVNFEo5dCOc0GTEha/s4FBOSLfHf7xOuuri+QLZaIHp+N8+yK3zVTrWEnAlTRTCcbbWMHT6qIRxaOiDIRdS6gQ/NA+1xzAFa2UsRjEo6IGiKqFE+aDQp1abbNtXQi6jyNj5MQ2WIJALi7fUKchNxTsPq+8O8rHguOSvHESWjsvOtn4icAJIcsEWk2UMQDlHsnrYDqehQHwwZS/Ea2WHJjTScbfsitMMqr8DvettcBQQq78vzjJESchEZvVOGl6PLkTDnvMDDhAGaxRKMXfH5/yubKYRRKy6k8IBhMNhagxn+HbKkR/jaFs7OXIpz5cMzfRdiEMgDsXAfkz1PqeQp9K85CQDGUKfdAJsjiaMGwBf7ZenVo/LVBRCTvOZNoykKXiDgJkX56BwCIHp8Ju+cWUnIA+jOQKYSx71h9hFPc//pDAMo9hiiShv++wYdguw3tXOTtzd9y6Cr9aUWXugN6T6QTWMVza9N4WzAvZP13jpYEBOQx9aD4mxJWiV0VfpOgRGjCddlzK2OUCUr2YrARkIc9bES150a0EW1jN9MtcHt4eHg0iH+uDDpDcWtvmwAAAABJRU5ErkJggg==", 6,12,12)
global.meleefake = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAeAAAAAYCAYAAAAiYi5VAAAAB3RJTUUH4QgDCTQx1ixO6gAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAC2klEQVR4nO2bMW4bMRBFF75I2vSuUiRI6TpHCODap/ABUge+gqscIDCQMkGO4CrXkEUDE4xHwxVJkeKKfAs8WLBW75NccMhd2cun228LAAAAnJfuDQAAAJiR7g0AAACYke4NAAAAmJHuDQAAAJiR7g0AAACYke4NAAAAmJHuDQAAAJiR9BOXZRdo1hD8+Cf1i/tS/SP0Af82/C3c5/CXcrU4x9P3u11Av767+eCdWnTgxz+z32YFt/glz7Jlv2R8fP+uegb+8fz2/Jbzt4Xfyyoe59huYT/YO/kZ2Hfg/w7IUrIbwY9/FH9uhv6c9YefgYf7r2/IyWjt1xmp/tI+4B/Pr+eXIP7cudrL742PzUypDdEAGWgJkDDvAuQWIfz4R/KXFDfx2Ikr7r+/frwht8D18MfcuRn4x/frRavFBre1v1b9WQ3RK7zIYxfg1B0Wfvyz+O3k1xm1Clxrvy08Kf4AfvyS4S1gep7V2ES38MfmVkl9SLoIntx7BFHyGAI//q359eSSSVy7/boPOmPNvSV/bIzw48/1pyxgpZvclv4a9Scqlw/YAiScusPCj/8S/IHa/pQ+XLK/1h0S/rH9xxbHUxb5lv6a9edAbIuPLkBrA59yAfDjv0S/fK9zqr9GH7bqTx0j/PP6xe0tYN5CmJtxLn/N+uOu6nKyHfxjDV/bPeDHP7O/RsbW/brQ4ccfW7j0+Tl3j7GM1v6W9eHg/4CvP385eP3n+d8r8rvfPx9d9GdjB378M/tthhySEd6LZWzdL+/hx2+P/eJz4NbzSx+x+bWW0dpvndZfXB+82/fF7ChS/wIusCQ8HsCPfza/l6F35ZKBH/9ofm9uiV9/T5tyh+pltPa3rA/uhfBCU0KOPeLAjx8/fvz4Y/6aGT38ue6kgbJhemekyRl8/Pjx48eP3/pbZJzTn+OuMlhC6eDjx48fP378I/Qhx11twAAAACCd7g0AAACYkRcUQEqtIUKc6QAAAABJRU5ErkJggg==", 20,12,10)
global.littledogwalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAAB3RJTUUH4QMKExAYfh9vHQAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAD8ElEQVR4nO1Zu44UMRDcHyEkghRBhERAdjEZIRLJ/QgiQUKQERAS8zMEfAJ/gATySHWqremX7ZndO2lOat3seLa63VXdtmdPL999Oh122KjFg6fTP882C2BH7MP2t5DUD1++LXbz5u3d9cebJ4vNEs4+GL9dby2oaxTBVn4y7L3xuwWkwoE10fy4fbUyFlNP0OoDwlTsEXxNjhYA8GeJyPA5P6PkRtij+e/Bz/KzAnz86NlZVwCJLCY4ZEPnqIpnL3wmlr8PP5ZQR4juxe8hOYufcTE+4kM5UHz27+GboAB+//zpYhCVtaTx5yx4CFTxW9Bb4FvJ4e7GCbJEWhVRBd8ioAc/Eo8VO6w3fsWPChn32YdJLowF1Mb/vjgXGBPbxioC8vDbZw8fY9XksODhwxLqCAEePgjI8LNOqvhKcIZfnUMkHquQ+bokICUXIlGR8VglMRn+rEA9kbKvLFHZPDz8LQjWVQAi3UpAUQEwDx6u8lDqDhWrVtalBOqJZ2apjMRjLfWenyq+l6uZ/WK0TdFC1lXAFVC2fMH01ALT8d7layuBeokf6XSrzWJRoBVyvbkoufh8iSLgPEc8aG7S5FviaX+WiHB/VEARPt+3sBuWRZ4noPbndTrLj8av+6uIXK+aK/sfzC0qgp5uXS1kr1Gs8qKg3imp7f7//P66JLf9V/v18/XdWJZ8K/j2DLAsH8CfERCsMo+KgLYUKM9Dj/+93doiurKERasMCyjsQNyKuZIgoJbgzLLkq0hZoBm2J1Bvg8xEs4Bm56D4swKtCIiLbaRTW12uXVexrVXGFJDVjpu1CX3/fLtYSwT+wzB25oCcRz7aNb7fg+8JyBMRz8Hyg+tVpRlddFag1jxAJguIuzXuj3Rq+NAXkTPYq+RDlfyZHerJA0sHB6GJjzZpkUCr3cEj2DoVIUGeH9xvMVvz4LnMCFTxteC48JRkJrQnR5aAmNMRbDfx3CGs1/K65rKgIgF5JyzdU0TvbrzqteKyNraYhyUgftPr+eCiGxWod1LivYaVGxWoJdLsFKbLJBpABdvIiS8gTMBaly2LBORt1uCD8T2RcSxRgiKigac/P/Db2J4Xct5+cUSgjGthc/zWD9uVuK0cWQccbQrByfH8BBPtxK1duBVUFjCe4WTpuu8JIRNQtjfy5uY92yugqkCjo7xyot/Rbms9k+VGC9xbgdin8/3TiryoKnqCq06gGoO3TGYkc8VmosjiiLCj7lydp7fMeHtL3cv08pPFm3azrHtUxrcUUkZabxwsvKqAql1On6+IooJfIXKE7F14u7TDa1hXRXUS0kPifSD8ENBh98quHsBhD9uuHsBhD9v+A+VAmNAMHpGsAAAAAElFTkSuQmCC", 6, 12,12);
global.littledoghurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAAAB3RJTUUH4QMKEzMFo7B0pQAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACSElEQVR4nO2XPUoEQRCFO/AahqKi6aImgoHZxmaGgsleREwE0UAw0MzYXDHRI7iBR/AGwro1+OBNWdXds9M7M4gDj+mx26rqr6p/NuyfXIR/+Yp2zhJPa+chzGIqMsGWdhcC0xYUAj27up2Nj44rSft8vFVTG1Dah7zRbgKsNZymoBA0wxEYD5MDU4uA8nxoPzmJKAYnB5IEsbY6qmUVQWIinG0WMp8Lp5T9zgFxkKc721XwgMbBWt/J5fCTALYPH4va7w2QCBOQ9tduqMQA8UZfDiDLPqB59tEXBVQCTgwQZ9cLXsQV0ARQyr70e4DQZ9lfCQN4pq/vYTOMat8itG/mfet7GyG83RfxJbZenp+qb7zdp8sK8sofCs59iPvb2I8pukmXguMB0sGjvHkCgCGPBQl/L5GAJj6KA7IgBbU/8Akik5A7yefH9S9NHw8r4RsTSdm3IMkY2JHH8jUIQPpIFwEQgHhyl4GqHn3U44KY4wOJ6ByQFTyWGiZwdzmpJIHijbbIAsT7FPuw/MCO5YP9LB2QhgRACBZVxNd+yXQss1guMrY2gXmb9xoGpKtVJ8FTzf4y4DAga//BnsCA9MT0CQNAohgg7/95z2PpvQv3IvjoBJDePAEIFYGqiCkFSJ9aeulxMjyISARXqQsoZ+l5P1P08sLPCYbD+4e+71h3Hh5n7XFaXL2iVDK4UpOAdAA5Y2L3Ex2cd8rlXAibiiswFYNVpSYAy9EicLwMp8aUgtPUvjWmeCB/Tb0HMHT1HsDQ1XsAQ9c3Jd63u1Y07T8AAAAASUVORK5CYII=", 3, 12,12);
global.littledogdead = sprite_add_base64("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", 6, 16,16);
global.goldsalamanderidle = sprite_add_base64("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", 15, 28,24)
global.goldsalamanderwalk = sprite_add_base64("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", 12, 28,24)
global.goldsalamanderhurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAKgAAAAwCAYAAACFfjGaAAAAB3RJTUUH4QcYCzsVa3sl1QAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAE7ElEQVR4nO2aMY7VQAyGIy5AiUSLRAGioEE0oL0Ax6DeA9ByAW5AQc0RKJDokfYM3AJpeMNb53kc2+PMJHFe1pZ+7b4km9jx5/HMvB3ef/wyhEJ7lbsDoZAmdwdCIU3uDoRCmtwdCIU0uTsQCml6NISFnezzr9tEj/24u01UmzvmXSFH1d+3Q/L2waqfL4aURf0H1eLsiZU+l8r95RxVRwHUGmtLvDU4s9xfzjWoJQG9I8vWwpBaR8/eWPEzJVhXDTrNNO8kWZKAE3GyJClfl749Lo4t5cca8UmAcuJ8yrGuMYq6Q3lNoNJEPX3yfNSrl28K/U9aOicuf87X9IIKIGwVJ0AHv4PyZ64Ye4uHK4BdgblnWHEycMLy7xTOEdB8TRom11hGVZoo/My14+SgpMIx4WvnFiAXZ9Gl9gqmBOvWAANIeLTkIMUJu3n3oQA0i4P4080zEVYR0LROi6dx4k5RwJnKzlDEeX9szrSGFhydSlwFmDXbCkxphIRREmAtAQXjIYV704Tidk6LYas4cxwQSwEqgpQesxYgwLkKoA4MVm3ppFEg776+HgUvf5I0rh2ONojzVa79s/dOy+0MUDDzYoX6AvH++f1djxWAZYqQFiA3daCA4kI8BJxgSyUuwwcCGLMwoCKkWAhSABNGpawaqNx91ypAWMUDqDjm2nwUbE4BcvHQxVkBqCXZqxPWab2jCQcnTlaW2u5HmMAuiaglDuCdQDrebxlA5xSgOP+kRZg6CxBNX+hU5mrgs5gVQioMHwXRonK0ZF7l/eIBYMCtM4vO+SC5MIe7mAwojUk6by1AOpqpgJ7UXIC0AB4yoBiqHii5zetyRClfJyQP4KQGkGJAAd58/QipssVE4+OK0Bor3eetdQp8TVsBlu9PXCStg8121gpoM5TqvKxs7/A8yXBrhQTjc3i04RZKSxag2i2EuWd/AZaAjnE9VEAt4hILLxaOT4AdwQQ7f7YACpBySYYkaqt4DlL80yLwQxpRaYun70qLz1KA1W+SZhGxM7MuhiwJolskuI3l85B03P6KVl/Y5ZmSweiT7yVa5VukuUVoKUCIUYpvDqDVAmS2ndhA5Te0X2tdtUNS809c3QBoPk5Xt/gct096SeTZJm2SGECA52cTM37NuVYB4jnlOT5bbGCmAkzT/zUwJdQCiLfNAVRKqrRnR+Gk8FJIcfItkhYRYPj7cctG/doFSKcAixRg4qcwh4AzWw+ceMuFwgmVj1ejNLn0HN3O0eaA2nYMPGPuP2AsWYAcoGsW4MT3I8AJ1po4vC+I254EKEzq8XmaWG7fkZv/cXBggLA/XgXI/e1WBXgoQLO1AMoJt0dIIp7HaQsu3FY5UVDx/A7mf9K+5tYFKHWIrQqwGdDe89I1vYWxBKDwsmiCpfMS3HANFnesBjI8vxXQngKUOsQaBbgYoEsBbNGce7e2PwkCfF4CmNsQnwMSl2AOrpYWby1AvGr3KEAtxmZAes63wFTzq/U+EiASxNx5y4vu9av1HrUCtADcE5+lALXC7nqJHCxzAb8GaaDUAPeW5l+tAyzRIVr8WhzQ0HVKar21azb10fslhUKa3B0IhTS5OxAKaXJ3IBTS5O5AKKTJ3YFQSJO7A6GQJncHQiFN7g6EQprcHQiFNLk7EAppcncgFNLk7kAopMndgVBIk7sDoZCmf0r/krkmOy6KAAAAAElFTkSuQmCC", 3, 28,24)
global.goldsalamanderdead = sprite_add_base64("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", 8, 28,24)
global.goldsalamandercharging = sprite_add_base64("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", 8, 28,24)
global.spiderpit = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAEyElEQVR42u2aT2hTSRzHv8G4CwulIATaSxdapSKxhQjNodrDXuqfHhS99KCEBjxbJbB72MteulB2nzdBaJB66EXBgwpexRxaUEgbxKAWKkoDoQthYUFMeXt4mcnvTee9mZc3r1Wc3+0lL+/N7/P7/n7zm5mkXNfF92wpC8ACsAAsAAvAArAALAALwAKwACyApOzSLzddAGi2WrGe8+LlUuqbAnD6VJE//E6mDABIF8f595VSFU+G57WeJcIzBSMRAMzxTH8/AOCPHxz+HQeQXQFqs9oQmq0Wfx67NgHBOIDTp4ouHSh13gchu+JdaEJgChAhxFWDMQBi1AHgwqaD/HFg9Q2QPx4AIYYKTKjBCAAx6jIAQBdC2nntu69y7kQsAHEgxAYQ5DyFQG1ycRztpapPBVEAiCqLCyEWAJXzANC3tYzSsR2svvGcr5SqXSV0ACzMnMG/P1+LNBOYgtAzADrFqSCwVEgXvejTmpB2XkcCkOnvV4KIAqEnADTysryUDbBvaxlTuzscBAC0l6pIF8ex8OtHJYCw98g+TwyAKHtZVOigxEH2bS1LnxsVQK7u4NXofCCc9XcVvP+wmjIKQJbzunkZFKmpz0/x/MfzylSiTubqDsaGgcX/5hCkRF0VGAGgqgFhEp76/BQAOATRZA7m6t7M8mxgHwEEVfwgx1Rq0C2gOgqTvbfZamG7WVOmQWwAQfR1YOmqJ0qqJQJANd+rHAmrAboAdJoh8Xk6hVAJYGQo744dney5WVKlQ9TCyRwDAHFcXxUAnUiFpYpK7jIIiQDQaXejrNrEAijmrU6nR3P8QADEkXXpp87O0OVRtB/Wsb4J3tBEqRkqAEwhsQDoFL+wrk/m/Ppmp5MrdQE8G5gDAGw3a9L3DGayvuvpRll6HwVpBEBY/he+OEhfHsWrxTpvSMIiN90oY2wYPPp80J3fq2y7WcNgJit9jkxJRlrhkaG8O5jJSh367WoF7Yd1AMDNrQnQ+4LSIFd3eORpCugCKOyuIVfqwDv2lz/612d8awPdrbKeAFCJMVNNSVQJookAWLRF2Qc5j7e3sHB/0hcAY6tB1TQYpeujDgblt8z2OP/2FlcfM7YwMr4hEqYCWSXW6f+j2nSjjNzdx2j/OeObQQDsSSHjW2IjQ3lXJvEwAEGzQ1SnjwwAK5jj12PDnsO5kld8xTRKbFOUqUC2L8/yNUjuUYylRmF3DUcGvM8YAAqBFlBmv39yk9sWpwBkgw5SgO7Uxhxn76CF8t6hCel3bCpc3+zd+UjLYbEYMifjAKBRDyuGQbNCr7Lflx0hEYLoxCy8SP7dnFACmG6Uce/QBFcLu/dAzgZVENh2lcxotWYA/mnslTnt+lgtEEEd6OkwPRMQI3XxZKdNFQ5AH9yo+gDQPA9aC9BiSAGY/J9ArIMRcZuaO8/O/mqz/Bjs0Ya85aWSlgGIO80lBoBCyNUdXLndPfdvz5/Yc++jDfA81gWQhOSNAmCzQ2F3DYOHvevJRf8/QADvGIwBEJ0Tp0L6uc5y9sABMCUUdsr8vI8eh7PzQFEBYuT302njAMTiWNjxr/i2v3SbGlHu++ls4gCobZxNuTT/KYCk8vmrAvCtmAVgAVgAFoAFYAFYABaABWABfKf2P4D6Ur1agpUxAAAAAElFTkSuQmCC", 1, 32,32)
global.plasmacrystalidle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAPAAAAAwCAYAAAAvvfcmAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAEAElEQVR42u2dMU/bUBSFr80aRUFipcrohR/BQJWlf4CubeeO4RfQqWKmXYO6Z0Fh4Edk8RjBikQUZSXukLyH/fzsQPEL97jnTAxInPve+e59duwQZVkmFEVhKiLAFEWAKYoiwBRFEWCKIsAURf3XAEdRlGVZFsEuDv3Tv3L/BJj+6Z8A+8337kYy//BZEDehDf7jyVBWH3/A+s+yTKIoon8CTIAJAAF+tfn9+ytZXN/K6ttvqE1olf90Cgex8S8isndzhu3/19eg+SHABFg1APv3V3CnIHN6ezw8xQPYXfzF9a2ICAwErn8RgYLY6x8I4nz4bYbA/JvmaQAOmf9gAJvwtAIAAkyA/zH/i3S6BjiQ/0YB9oXHAIAwhdvkv1QDAAQGXhEpARwSgtDDS/oHIrOHIPnZHcD9A5gNcP0jAeADeJFOpZscqb+WbCPAj4ensndzFsx/YwDXdv/AXSi0f4Qp7Pr3Aay5Cbnh9wGsGeKq5m+vg/sHQfwHAdgNDsIU3ja90Py7NaAA0CaAF+lUnk7O7QRWC7Av/PlFzwOgcQpXhb9UQzqF8V8FsEYIfOGvAli7f9fz08l5YQI37X/3AANsQFVwZPagcgrXAezWoPFauPTR42ZyIQLsNk31AG+DV/sUfk34DcAI/uv2QhMErn9z3DQA54+fCP5rcxPA/84B7g6ORUTUTIEqALzBmT3A+G8rwNpuxr0WYHNPqKn8NAJwPBkWFt0Ukr+OMZpfjNc//PyjZgOM/6oa3DvS84sxhH937Qs1KGpAvbtR4chZ539+MZY46ag6AcWToXSTI5t3N//5OprOf2PXwCZE3eTo2WRO8aAvq+uZKnhd/8Zf7/un9dNX6bJYQ9JRew1s1n9rDYO+Sv8GYpuRTQ2+LGnMT74J5ffBuxcN+g8CsBscG/wWALxKl2r9m+PaKl3CAvySGrSuv/2kAg3gUhF1ACtb/LomJCK2Dq3Ttwri7uDYW4PmB1Hy/kXEW4Pm/PiaUJx0bB0hmn8wgM2ix0ln/QvAAKM1IB/ACA3IBQAdYHvjDQHgKogR4N3q39QA8CxuPBlWAozwMkbtKQIgPxZiA/DmY0cRwXiZoQ0Au1MYKUAGYPcIitKA8gC0CeBQ/oO8D9y7G5UBBnqfs9SEAP2XAAB6n9k2ocDTaxdNNPSDP0EALgCg/C2kl9xMQQUYHQDUBlQYYIFPn8G+E8sWART+qi6K+J1Y8eWX55sn9P8u/nfx7D8BfkEXhQ4Q0Omnlf4RAc4Xgbb4rfIP/r3Q9E+ACTABIMBvKYL/24b+6T/g3yDA9E//BJiiqPdoEgSYoggwRVEEmKIoAkxRBJiiKAJMURQBpiiKAFMUAaYoigBTFPVG/QUCFYoKX9Ku6gAAAABJRU5ErkJggg==",5,24,24)
global.plasmacrystalhurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAwCAYAAAD+WvNWAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAACoUlEQVR42u3bvU7jQBQF4DOmRVGQaFlRuslDbMFqm30BaGHrLcMTQIW2BlrQ9ttEoeAh0riMoI0EstJibxFmMnacELO+1lzrnA6K0c3MN1fjP5PnORjmszEExBAQQ0AMATEExDBhAcoBGLWTY0ye5znrJyAC0gjIH9gonXwYY6ARUVv1ExABBQmoalCjbfIBYOfhHNm3S1WICvXfnCH7eStWPwF9sAB7z/d4/XKiDlD/6Q4vB8cqAW0a0GiafAsoTSZqupDFv/d87wABEENEQB0GBABpMlkAEqq/aUDbDGZCxwNgBZDkIkjhAYB09Agc7gPTmUgXIqCOA3o5OMbOw7lY/U0CqjOQCX3yqwCFjKh88C8AujlbdCGB+gmow4DSZIK3owvXgUIG9JlBTMiTvw5QiIj8+ss1vx1dFDpQ0/UTUAUgu3M1AipffWkA9D8DmNB2r233FpDf/kNEtKn7uExnBUBN1k9ANQH14kFQ94XqAurFAwBo7O46Ab1fuvst349/RQMAr7//Iop3RR8P1K0/Gg/Riwfu3GbrLv9t6wcAXP0JBlAnzkAWUTaauv/3f/1YTrifhiZfahMAWPkd6egRWTJvvH4CqlqA6QxZMl+d+IAB2S7kbnoqA9SJ+0DReLg8MwDoff+6eBQAiEx+G5sginfd78iSeeP1E9CGBdAOyB38lQDaFlHQz5L8LrQCKFA8lYgsoPcHqQD4MLXtBegSIKn6+T7Qui5k750I7l7x+n1AfKGs/QUodCBFgPpPd65uHO4vrsiEuiffiV6H6Pp0efhUgqdcv9QrHARUZwEE2z8BbY9I5XdV0Xio7pOetusnIAIKFpBFxG/LO1w/ARFQ0ICYjoeAGAJiCIghIIaAGIaAGAJiCIghIIYhIEY2/wCJyInOpx9Y3gAAAABJRU5ErkJggg==",3,24,24)
global.plasmacrystaldead = sprite_add_base64("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",10,24,24)
global.roguedead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAEBklEQVRo3u3aT0iTYRwH8O+D5JIyQdRo4Njei3iw1cFGZpYkmBtihzrslOZFEmEeu3X15KAGXUp3GsEOxnKlaEamERQSHsIgJx4CRSKlKLu8Heaznnd7t/d5/zzvLN7fae+77Xm33/PZ73me9xmRZRlOOGE0iAPICdGAeIURQx+AEK72ZVkmTnf9e4D0lCdiBE9NZwwubzB3Lv3dh+bB7GPf4wwAYHvCZwqQg7Q8gPSObcQIHgA5QBTPx4fZ1zQPZhGZAWQXUgeQcTi6ANFqQPFQQCwe2rn08bGrxqqDXUgdQObxcAEihMhvP6wj4Jfw7ka289xjMcsB2YnUAfQXkNnlGOHBAwABv1TQufsbaczXDRdUB/dYDLsLw9ydaxdSJ5SArFjLE62KwALK79z9jTQA5BAB2ecAcAOyC+l/0fGcCwutBYZtgBoGspPVVEQu6NxvL25rfVnNzrULqZ3zRL3B+yOjj6uawjhzag8AcLLuRNH3bO3s4c3LadX2D8UQZhWgUkh3F4YxPjkHABjt7wKAgmOODrClUgNAw0AGdy59BgC0nZU0G11eWcdofxdXnqqawuhuAWZWwQWIxlQyUdB+WSoQ/bJ0ouvyBrH1yAsAiMbnFQk7d9rHBUgL6e7CsCoa9tgmQEVzRfOUisjojRJdgGgE/FLx4eYA6LXrYcysQoHo0ANih5fllfVcYgJ+SfFry0+Ynl+WFtLtCV8ODXuNgF/iqUBW7vmQUjnqjRIFIhGAtnb2Cp7XQlQKkC1DGE0QBcQiYquBUUCCkdoGiM2P2uc1A6gYnvefdrna//3ltaJ9qwDpGl5ogu7G1wAAs9EeRSWglWR/I617CS8QqdW7zkQtP2p4aJ54o1jOaH7OXw7lKs5UMoGKag8qqj2mAdmGiHZY/l3iVERWQNI5PxGNVDigfOABvwSXN4SjvqBpQLT6TCUTuXP0uKLag776TTz91a4bUdm2Mujc5FcmjZrO+4rX0DkMDV5AApGK+s8Lyb/5SYMeu7whLLVO48pOzDAiioedy1S62xFsa8RUMoFbQSC+6DmoRI2abf9cS5QEZDRxhvaq2FWTWoxPzukCVAzpqyf30BslRpCK/MMUYXPArh5noz0I+CX8eA7UDmWrELshrBXs3p7afaVKdzsqqhvR3QKkZpYAAH31m3h2JCwUECnyvOGdchaQWtnlvUEmEKlwQPkn6aoxFZHR0TcCAFhqnUbweMYQIK0VWWpmCTcvbiK+6EGl+4KlgPITSARkMFe+RW0llLqGQaTC7wfRYayjbwRfH0yjdihUMNSbAcRei51AiwBkutLwDjkiAQlq35ZbHy5v6KAyWQ8oH5EoQE6IgVT2vTGj13AAOWFNdXcAOWEm/gDFOHf+A6+3mwAAAABJRU5ErkJggg==",6,12,12)
global.roguefreakidle = sprite_add_base64("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",13,12,13)
global.roguefreakwalk = sprite_add_base64("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",6,12,13)
global.roguefreakhurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAAAB3RJTUUH4QUPFjUbsbApOQAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACIUlEQVR4nO1Yy0rDUBAdwReiVBBFUWqhUhSUolTdiSJuKm4EQZf6Q+LCvZ/hwh8Q3PgD+hWuIydmwjhpbiaPGyv0wNCbaz3nzJnk2koUobPVII2JxV0KBHifr6da/cTvpCGNH3SiYglUHn7vGiDXjQcK4wvbif3IgNW8NhU0Th6DpdvPcJ/5seY9K793jWZrNhGIFRbz4JemuGBeNsCFa+zT76n/jcZap03tnfnCAS1vzJn4SUwT4HVasfksfq8avetjWlmdKRxO1l3E/DBx93AQFk9Um3+7ouDr+adwze8nx4TBD/jUKB2OKyAtoRvQxvHK64vLZrb5OjTqDIiNSvPSOE+X1+LcMAdUuUYdAaEwLRRMw5jFfI6D2q9G2YAMfyhj4/p8wOug2x/7Ofj9aZQNh+EyLmuQedkAG5fmyT3hwKtGHQHB5Ov7R2hC39qKI17zYWs4qOOD2IvGdOfG6zkEfoizeTndLPNy38LvRaOKcFwBDZowN8Ef6BjcJArniSUgzX//9FKtRhXhrDvcs1k2hQY4KJjHNZc0Lxstwl+pRplw3N6TTUij2DOYL8xfmUYdAUlTOqSMKsVv0MjG6Vm/cEjtza6Jn8SESRykeqr6i+Qw8JcOycpPxP+vOU8YTnssyDhl3/wxxiYbuYPKy0/ikUh7BIo24Js/hA5gr3eY+vPu/lFuftkA1ppfNjKU/DKA6NatGrHBf8o/wggjlMc3FT+4mqENldIAAAAASUVORK5CYII=",3,12,12)
global.roguefreakdead = sprite_add_base64("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",6,12,12)
global.rebelgun = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABYAAAAMCAYAAABm+U3GAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAA10lEQVQ4y7WTPQ6CQBCF3xzAygriD4XBwoIjcAFqO8LZDB01F4CGjsTCQmMBYiAxofIAY7WbLIuCRKfZZPLyzc7MG2Jm/CNoCExEUsDM9FOwt/dRVyXyLO3V9BX8CBZQa7NV8quFCQC43WsU1zPiKNQKETMr7XbD2/uDbddVCXO5BgDEUaiCA8dWxMWjBQA8rZ2SnxUnDZw0rTYWOQoiYteYa2LXmEt4nqUIHBuH40V7u3OWPxZQAWRm6st/tbx3lhLgpGllobGWG3SFAP/Ux1OPY9SBTI0XVuGR6VexZjQAAAAASUVORK5CYII=",1,6,6)
global.rebelidle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAMAAAAAgCAYAAABEmHeFAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAADk0lEQVR42u2bv2obQRDGZyFP4cZuDE4TgtMkBENATYpUaUNAJKQOKVylzgPoAZJHcKVCpeEQcmMh3PjAKXSNyBOkCIFNYeaYG+3e6f7MJkTf19ic0P12Zufb2b2znfeeIGhf5WAACAaAIBgAgmAACIIBIAgGgCAYAIJgAAiCAba+6NzWF733LtnA95gfYoPfjd/aAAxfzad0fXlBRERPXrwmIqLHz1+ZJ+Jf4X/98q68lpp/Ph7RyfFhhX19eUHvP39Lwpex8xhS85nZN/+tDMDw/K6gk+PDEswTwLJKRIwv2db88/GIiMiMr1c3eQ9Z/LHcp4r/zYdPlc/+5vz34e9sgKbik4NhNw6ZgBBfBj0UXxZgqPhk8cdi78p3zvmzk0M6PToor01mC/LeO915LOJnhuTpHKTit118uvJrDaBXI916ry8vKmBuQav5tJcBYns8yQ8lvi+fC5CV5UV5D731iLG78p1z/uPLZ0REtFxv6PTogJbrTTkGa74cw2S2IP4p49dbn9gWrE/8klm39Rtq/qMG0KsRT8qjs4dERJTfFWUbZPDvp/fffXBFvYqfi5DZk9mCeCxWfF380gREVOHrLjgUn3/X48jyIsqXhd83/1yEPNey+8TyLwu/C1/HLRcd+bnV/DvvfXDFlZMgW7I2Agff90QuAw1xU/B14WnzW/KbjBjix9h94ufOow0gu9P47Whrv92Vr03HCx6LuVbzXxpAgpbrTW0RSPFAWDfZbaV1t01C08Rb8HUL1vtwHpclPzQGmYNQ/Jo9RPw65iwvSBfokPyQAVLWX7kFChUhrwKyK4QGESqU2F6uafXX95erkRVft2I5IbIQLPlNY7Dm61VeL0JN+deLxK78XRZfvQ2ui781X54B9GD0Ieh8PKKrq+/BbVFowH1WQN0CJ7MF1fF1YrrwQwdBeb8U/LptgWX+YwZo4se6YxcDhIzH17O8MIl/qwPI4gs9Asvv7g+Fv378jN50iOKTxuPPrfmxR4Ep+aHC4DlJlf9YQTG/jt3XfKF76fwPya8YoO7wEHoMdZPdmhXfro/B9BiGKL5d47fmazOm4IeKkYvQcv6b/rzBqv46vQmOvQHlU7nVq3Dw0/Bjb6P/x/hbG2A1n269eJEtyjoB4IM/JL+TAfRbNnamZfDgg2/Bb22A0B696fwwZALAB39IPv4hBtprwQAQDABBMAAEwQAQBANAEAwAQfugP/xdgAzp14RzAAAAAElFTkSuQmCC",6,16,16)
global.rebelwalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAMAAAAAgCAYAAABEmHeFAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAD70lEQVR42u1bPUscQRh+BoKFv0Bszubg0oRgmkgQAjYWqdKmEUNqSWGVMlyVyh9gkl9gZWETEA7xGkVsFJJCG8kvsAiBSRFeee/dmdmZ2dm9k3uf9u6cmedrdmdXY62FQjGvMBoAhQZAodAAKBQaAIVCA6BQaAAUCg2AQqEBmO0FGFNZgLXWqLTKf+sBmObiaeyLk0OcHR8AAF68fgsAeP7qzVwEYVb4BzChwWPiPysA0zafMcbuD7dx/fMWg37vYWwuBAC8//S1k7l0bcJpm88YY3e3NjDo94IaPAb+kwPgMx83XqnFy8VZa03d+FwICmQbAtDc9ofblXHJhG0EImS+0uH38V83vuSiTf5DJRzDf1IAXObjpJc0nzHGrg96AIDVlWUAwN7RKQCABKAxz44PnAa8ODnMngMR7Pot5+Hdh4/O3YcbsZQBfObzadAm/wCiNMgNYR3/nIeQBnX81wZAtgA3n4/0Juaj8Yh8LgDHs/WnADBBAI399+X/7zwZ55O/s7mGvaPTyu9DJSALoEQDuvjn5gtpkGO+WP4BYGFpsWLCEhrU8R8qgdQSfgiATBwnggg4v7nD6spyxXyc8KYL58RLcCHkXGjLb3Q9yMy2PuhhdH078Xv6XJaAz3wpJZDCf1vmS+G/DQ1i+N/ZXMPC0mKlBHIvQScCQKmTDdCF+Vzt4yPcBZoL4XJ0hfObuwqJMc3DxyE+AIB/VroEUvhvuwB8/NfBpYGrxZvwH9qBcjSoBIATLMn3GbCE+WQLra4sTyzeZcIQ6DtNBXDxIA3oM19q++XyX8J8pfkntMV/KQ2Mtbay9biahzdTaPE04VTzcfJH17eouwEaj39VzOEiKUeAVBNK86WWQEn++bxTC0ia33X9ze9DuAY+o3bBf0iDuvEfAkADSyMR8fwITJrPZ8CcANQmlt2E/vl9X6x9pACcfMlHyIQu/mICkMK/NJ/PLLn8hzTg/AMoqkEJ/qUWdSXgvQTixOcsPmf7jT2GlUd/l6OrYuNLHuTfpAb0lUDuDpTD/zQ0kDoQvn0eOrnKPQGq499VAq4iiNoBYhuAH0HJraYL89OTz9C5O92YDvq97DN419NF3sJtlUAM/9J4xAHXINd8TQLA59L02UcK/001iH4QJhctzUemK0FACik+7A+3i88j1oBtt6+rCMgQX77/6OQdHK4Hzaerd4BidIgtgaQAyIVK7G5tdCZAifuJEuS7dqGmO1BOGUyDe9erEl2NW2oHSg6A78FOW4abRcTsRm3sQL65zFLxTEMD8mVOEJMCMC8Gn9XdR3Upv379jzDFfJeVBkChAVAoNAAKhQZAodAAKBQaAIViDvAPhJvy/RFPr88AAAAASUVORK5CYII=",6,16,16)
global.rebelhurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAgCAYAAADtwH1UAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAACT0lEQVRo3u2Zv05bMRSHv/MaLMmCFJYW0alFqSqxVCpT1y4oqHPVgaXMeQAeIDwCE5UYkSIKC4h2aSQ6kAX1CTp0MUsdOc69aez4JCDOma7uP9u/72ffc3zFOYfF8kIMgAEwABYGwABYGAADYPF4AFQ9JAvrtMhE+845eQoAZrlZtIW/Pjvm8vQIgBdv3gOwvrm9UBClTJACIHWqSOkB97odBjdDWquNkfDACAbA7v6hKojSJpgVQM46JaVcVSd+LICP9c3tPDf+a7/uWQ0T1AEo8WWW1MG3Ww0ANporo/MHJ+cA7O1s0VptjAS/PD0aE+D5q3cAfP/2NQuAiLhPb19ycHJe+ayWCWIApVIiSXWdFz8GAHB1e8dGc4Vn7TUABjdDPnz8HA507vZ9H/qD4Zhw4XUNE4QASuajkuo8L3QdhCoQwVSfu33/7nDWAYR90zCBFoBsCLHY8XEYXgyAzpceAK/XmhMuTgUwzQilTeABaFRjkip+lfP8+XarUQkhFMYLVreOzwK/TnwtEzwIAFV5dJwR7e1scXHxq1KYqg93DoBQ/PCdV7d39AdDFRP8D4A8tBoA4O/vP7X3pog/bQmMszAtE2gAKF4AiYgLMxCAH/2fRcSfVoOEs1LLBDEAicSWzBRVBUKv25nIv+PY3T9UqYK1TFBViLkaEZe+DF2fHY+V/GH0up2FQChtgnn2giTxelEA8QDjJUQLQGkTzLMbuvDtXy9A7l6Pdvs5Jsj5H+CWBWCWDbPH1r79EVtyGAADYABMBQNgACwMwNOMe/wTGd/ytOG3AAAAAElFTkSuQmCC",3,16,16)
global.rebeldead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAOAAAAAgCAYAAAALxXRVAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAEx0lEQVR42u2bTUsVURjH/4ciKI0uJCQ3whtUKkTaDaEXrMBNkKu2bcxoLS3cJK3CVSs/gNYXKAgK3ASF9AJibwRpBiWRGLgwMoMoptU5PffcMzN35rzMNZ7/6t6ZufOcO+f8nreZEVEUgcViFSPBALJYDCCLxQCyWCwGkMViAFksFgPIYjGALBaruQA0/UgEG7QQdfajKBL/2dxE2nWNQl9nVvMB2MjBwjd4r57cx9yjuwCAY2cvAAB6Tw0GBTGAE4iKuMas5gUwa6gUrhf85Pgw5heX0HWwQ4EHQMEIAJfHpryCGNgJRCGvcZKTkf9JbvsPM46mBjBPnipsJpxOfBx8OgBSvacGcy2QtMVVkBMoDEIhRNTf1YGZ+SW1TX5nAP0C6KIzI/JMNgBUK2W1fWL6GQBgdGgAXQc7FHBzj+7WANBz8jwA4PXTB7kAFEJEI+dOYGL6mfG3oZxAM6Wkck6qlTJefFpGtVKOvT4sNwC6aomKLJMsPasUBRCAmvwj/d0AgPnFJVy8cpUudGv7cd6d7vftBCwg9A4gdYjNBKApTd5MY6AAurwfkQmAkXMnFGhxEJpAJKmetX15bhp1AYCOzZcT2MwA+qgJ6Tnjzm9y3DRV9g0jha691Kq2r6ytZ7LvC8DcEOqw6Z+pJAwAMHxtEgBwuruSqUYxAZjkCHw4Acc1obMxxDlHvSbUt9lCoNeeeh2qg3f8+AEAUNmJz2acBE9C17azBVu2bwUAlHb9A/Hx7EJD9iWAPu7Gi6yTbIo8crvuiU3RUQKTJU3S4Y+Dz6cT8AigFYjUOZlUrZSxrX1H3eK3hYD2A5Ik7esNMdoYuzw2ZT0PcdFOwlfa1Yq28v66360uf8Tj2YVE+00BoMlj6h3R0aEBPH/+wQiGqXGTB0B9odGIODO/5M0JBADQOYRpi98WgkYd45H+7rqGmCwRpG7efmjVFafRbvX7D7TtbFHH7G4vKfhWlz+q7Wvf1tXn1++/xHfWUwAUOSfd2z1AAPi1shF7bJ6Fb0qB6fl8OwHP4DmFsJHF7woCkxP+tbJRMw4ageMcQd6ueHupVcH29vNX9Bzaiz8/f9dASNNPUxQEgDv3poMC6NzrCyEi2oEEgDcz75zAFzfZelT27QQCwGcFYN7FbwOBbl9edzqGS9fHUn+fF0D6vefQXgCoA7CzejT1XFkAFNpkiyKK/6QomORxZd3hI/UL4QQ8gpdrXuQiTFv8cXNBI6FNGjg6NKA6zrdujNfsT6pBbW1L+2f6OlV0W3jxsma/qQFDtfZtvaEU1DTpwnIxOE9DXz25rzyarsnx4SAQBnQChdXl9L8C/x4yiFv8Eg4fUYheb9MYaBrsOvrq8JkApDWgTQTMsyBExv1OAYy7L2Rq6GxSJ+DrPTHhY/GnRcE8HVFTWaDX6nIMSfZturH6tsP79hgBpA0YXUm3JGzehgj+1IEEwNNTJtb2HTuBwgFsZPFLpUUh2zowqVnmMwrq9nUAbaNgnvcBC30vrein8Qu2H4WAL+2/UwguXR8zZgN6ZuCqLDCNQdbevm1T+zqIbz9/NR5/pq8z8V4gvxG/ORWFhi8tOqYO2NMTKUXYdmmfAWSxChQDyGIxgCwWA8hisRhAFosBZLFYAfQXSWbj7ll5bLEAAAAASUVORK5CYII=",7,16,16)
global.allyidle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAACyklEQVRo3u2av0pcQRTGz0CewiYWEVKKNhvSBLZJkSqtBBbFSkKwsEptlSoPoOQJrCzSCMIiSaOIjRe2cZs8RWBSyFmO45y558y/3RvmdMry++Z857t39s5dY62FVq1iy7QAtWoBog0ZwzZkrTWrzq+lUSxAQx0Acr+8fwM3D3+8n5l282gNygcAr0YKv5ZG7hksAlRzALn5xhiLpmNRjWk3TzLKx6caLj9XDyU0cs/AWGt7B5DawLL4yLy9OofryzMAANh+9xEAADbffhDrcMP9/vMXAACcHO962Zo+JBrIj9HQXmTidXMBcoeQ0kBJfsj4o8kYdvYP4frybMHGIGHtfT2NWj/yX2+8XITHZUv5Eg1u/Sk90IDeXp0/+b/Y/1CAcjVQkq8dLg0p6mnX766bY0v5NTRCPu3sH7Le9/rPBcgdAlZMAyX5HBu3lW42fxJQypPesn3DpXwcAB2Chh+j4fJjenD993nf638oQLkaKMnn7m64RU4+jZ9dTQAAf0ePf7/4nbYFUz5ds4ZfQ0MaUM571n/6FJbSQK4haw3iwkmfNnxPYZpHWJ/5Ofk1NCTzdYMjmS8bIEkDvsFptplcBrl85CF7a30tyMTPS83PzV9GD5z/oQvdx2cDNKQhUDY9N6HnHX18Lvw1+LV7iPGf43sDNLQhSNhYnEbq2lP4q9LD1vpaMEzJAVrVIfTt73fT+6irqxa/dg8h/znv1VuYtgHtFlaSj4aMRq8AABZPGJ/3Dp6ZJPl+UoNfWkPqv283CH59oC9Thz4E+pLQPaBMOcWN5XezOXz7caF+LcNp+Nav0ZD4rz7IDb2N72ugmz1+c9eYVJpPddzXI7n59PifY8fyNRrL9D/4eyDaAH03guI5DWr8YfJ7A3RyvOu9hRlj7NFkHL34xv8/+L0BCh3eSd7xSG6njT9cfvtNdKukagFq1QLUann1D2th5Ryqdlo0AAAAAElFTkSuQmCC",6,12,12)
global.allywalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAADO0lEQVRo3u2aPWsbQRCGZyG/Ik1cOJDSxM0FNwY1KVy5DQEh48qY4EJValWpREipYEivyoUag0AYpZExbixwYzX+FYZLEfYy3tuPmd1ZOYKdRgikmZ3nfWfvU9V1DSVKxIYqBipRDFTi/zOQUsrprLqu1UY0l7EHV+5NYSPVQ8tAOumXjx/g+uHR+qfZcpVNAAlBcvaAcwNAK78Em3XySe3hmYGUUrVOqgMnny1X2Ravc48GPdjdP2x+v7N3wKoX6iFFbFtuWw+5+QBAw0iCT4qJggYCABhO5tnE1fn73Q68e/umyb+Yjlu/O/r6M1gn5xBQ+OQQF/PB+U1GsXwwJy6foIFyi2vC0YGNqmMxHQfr5BwCyvqlxXXxcTHa2TtI5sMZAq+B1iHucDJvFr28X8Gn47NWTs5xP+cQUPlIimvyAYAgoxQ+3CEIGmgd4o4GPVjer54JgXM/VX8/X/3m7xIYDq4RMwQUA+G8UuLa+MQyCvEBAC8jcwhI50DXD4/Q/dxJFpdSw2ZKztWHawi0AHi6XLWouc31V9V2A19qACgn65J8zB0otEkEdyB8OUxZOHfKzBrvt157c+t1cEXGQ2BCwQJ7j/eOHYLLKGYXojKK5cPZKHAPXgPpxUiJS6kBAME6w8mcNWE2gUNXIlQDcRjF8IlhxOHjYkTl4zQQ3i6lxKXW0OGqxQHEHQJffltuLiMOn1hGXANxGeH8bAOliEupIXkI8wnsq5VqoFhxqTUkd2hfDxQ+rJPo29md+CHMrLG7fwiL6RjOf122muDmj4HDPYRxGKXw0f//PvrRfD89Omn1IrXDUflYn4WZAlTVdnMJnyKur4YGY7s/oy8vv51fRl/FmALbQMWew5mMYsWl8DFvO0jxMRlR+VifxuMHeTdXF60Fx4prq4Hz47ueOPrdf1cGXEg2ASRMir/jHsz8qXzM0HfSbazID0ADmwSnD+/rHBxxuYBsoHzHbS4o1xDYDKThxPbhe3Le73ai2VB46e+pazbv1FN3OK+BRoNecy/AdU7Adf9LBOXViBxCS+dcJ6Obq4vWphF8FmZLuEkvSKXCk+x1k/lx1l5eaS2RZrZioBLFQCVeLP4AVeRMHFQ8XBkAAAAASUVORK5CYII=",6,12,12)
global.allyhurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAB1ElEQVRYw+1YvU7DQAy2X4MFBpAYK1hauiB1KVInVoRUtWJCqDAwMXdigQco4gk6IcGCVCkCpiLEQqQuZOE1zACOrvm53CXnJkM8Jpcv/j6f72wjEUFt6Ya1QHYC6dTCwj9DTMUnokris0Cm2wiLOD7qtuD9+ydxjecH+UkI4iPlyzG0cX7UbS09i5Lw/CB3tMXxqfghhLYEmAQ7PhkPYHf/MHzXaPeMyYjjk5tTGm0J3D69wWW/A9tb66Hz89k0tm54daclIY5P7q4xNCWgOq+aGmW2+WyqJSGOX5ZAk/EAAAD8RQBHJxdJDvP32lQQxy8rxfic6B93lrb7v7PVwSe3lSKaRli9lhNumShGapTF8S3rICdpxk4zgZ2Ntdg3N4+vAABwfrAXrjdNM5f4KxeIaxSVAAAkkojuChOBXONXRiC2NCJFBcqLX0qKRQ/RT+9LC2qbYi7x1WZ1ZRU1R7XZ3AQACK/hs+FpLMpZ4kjj23TzhXsztdvOqnL9xd/Nc33/bNw7SeDr5kEkIZJK5uPlIdYbqQTZbERyjW8jEFq+zyTATWSj3Ys5GJ3t5BHIBX7WRJFcDszSSGQ1jGXim4xcSUogNZISArnAr2fStUC1QKL2C5n/Oe+JJ034AAAAAElFTkSuQmCC",3,12,12)
global.allydead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAADx0lEQVRo3u2aQUgUURjH/4+6hMoutKgoYcKaClmSBGsiCV4MPHmVQBRPEebBk2dPHWrPonTxqCAE7SVQpPYgRqXgmkKJJAp7UNSCKKZDfuPs2zdv3uy8N5rM/+TurP/Z+b7f+7553yyzLAuRIpUqFgEUSSdAMppY4JMx5upvWdaF94/kDpBqGWJBEjvS044P33aFn1nKbZecZNP+keQAldLDmJ/kjvS0F7zHJ3kpt11ytTDtH8kMQMowiRJMSabETk0Moq2rzz7W2tGrnGzT/pceAEnbV7kN0AGQFCK3BKczWYwNdKOpoc5O7srCXNHnhsanpUk27e8VU9PV2/cXUrgWp+/tG1XK3ms7+0Xn0AWQa2BECXYm1ylnlSCtLMxJk2zaXxM0vuJFf4sWhpfSmax7tTj19gONG0jkf24ATU0MAgBym9voHx4VJZT+X7qyTPsbAEcYM+dGQIfSmWxhpWDMqo6XI1FRFtjbBEC+Wwzdpww87i5oJ6fJvDD+BuGxz8sYszqb6nDvZo02YxFAQSuP6QokTIRbhXBuuwW7JN5DWpZN+ocFkK7KIwJIZ/URARRKX3cGiJJKCRatvJdv3gMAnj16YH9etY1p9jc5qmcmqs+lBohmNM4EA/AMIF+SQ/SPAPofACK5BTIoQAH8Ly1A+aMTAECiogz5oxPsHRz7HhWcSwvjb3I/L61LTf22MM3+5wKQs3KK7uP8zoNEEK3t7IPeyx+doLGhFgeHx4jHypGoqS/yzO9+xeLyhhAgHYFSnhhTcFKpJADY2+ynQ0+KqoQXPCH5G9/C8xClM1nQe7QQcpvbBYNRkWRzLX6AyANUVRlzhYc0O59xBShIoJjicrP9vabEuc1/K+75q7fKQz7D/pYpgEQDRB6gVCrpCQ+ptaNXWIEe3m8EACwubxQME6mVVVXGAADJ5hah79b6Kj59+S4FKEjAmM/abX1899q+YF5jA2fzGz8QGfI3XoFo8Dk0Pg1+Rymqpm6amXwhvB4CiKrL7HwG1fFy+3iiogzXq+NI1NRja30VABCPnR0/ODxGsrnFswLJgsZ8HvdMMD3kdFsxsp4esn8oAFF1ae3oRWdTXcGN/53OZrR19WFm8gUAFD2moaraPzyqdL0AcPdWLf78/G2/JoBk8gMQHzjtT60pcAEfaIbhH8pjDL5C/tr7Yb8mgFQkAsir5VNLu3LtqrYWxgfPyM8e6CJM/azCoL+lAx6V5DpFrc5NpS4W5/noXokXvwNTBSiSXrCYjgWhun3XeQ633wNFKY9UOmwRQJGC6C+YaoH+BJUIjwAAAABJRU5ErkJggg==",6,12,12)
global.planthatch = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAPAAAAAYCAYAAADEQnB9AAAAB3RJTUUH4QkJFQITzbENuwAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACbElEQVR4nO2YTU7DQAyFIzYgwUk4BLdhAwuuAmtOwRW4WOkgjfRkOenEY2c87Yv0VBTUz47Hf+ny8vq1UBQ1p4Y7QFGUXcMdoCjKruEOUBRl13AHKCqb3n8eT6N9aNVwByiKsmu4AxRlUZmS2qScaXp6aLgDFGXRWgGP9ulom8MfmqIou4Y7QF2/ztepaoT9jNPaS3dL4/X7/XGqav3OniuSj+wIG9F8aSOS7W2jsJ4/n5aq6Dy6uau1ez683f/rfAiunfQIfuGWDlz5njaO4M8aH+l3+Sz3ii3v5/DUAhvDErA5ePJTJGh0AhVeTRr8u9dGNH/m+KDfVdiM8J5HAXjnI8alNp6IptbL333ANfBRBXAU35o8WfjZ41MnbRUmKf7P8hyRRSY3Hmxs1UYmftoE9UggnFjI9SiCaP7M8cE1GX3HIkObVhtRRSbjg3ay8XclkPcUiOTLBNWSNDN/5vjUAtWKFz89pzAWQcSqK3+D6F3dvfjNBrzXuAz8nsPOwM8YH22yY4Kiet+3tSmmFYC10LaKLOIMLPzUCRQxYeQPNtn5s8VHFhWutmvF21vAlwrAslrLFV1rQLi+92wQPfzdCSTfObwTNJp/VIHdanyQKwtV3kd5FwDaNL1bwpovmdgcRvN3H4Tsqh7dM5ovC2A2/mzx0diS2VPAOOW1prM10VrsbPE15t5n8ORfNLC2ouBn75pF/nXyZQJWlrTjwdcK1fourL1erHF7G0Qvv6mDSpAlKOTfDl8rsq2i6uVq/L3+tthQJ2BHg/DgrxqQX/AKDvnXz9+y482M4K81hox8l4OiqGtRVGOI4v8B6hHH0IG5qdUAAAAASUVORK5CYII=",10,12,12)
global.plantidle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAYCAYAAAAF6fiUAAAAB3RJTUUH4QkJFRYD/qjKigAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABOElEQVR4nO2WwQ0CMQwE86UWGuBFN3zohg8VQEcUwYMSkA4FZBRFuYsdZ5OcfI8VIB2zXi9EccfTxW3qp+4DWFf+AeemWNXMgeymS1TkyIJv1/P0ej7+8p9jk5LlIdlLi6ldMifHkrcIPGfyPvzEDYdkxx7Ikrk5KEMqh2j4EBxC77v9V5wQSDbXo0bJtXKI4QQmoHRBSPYoJUtyiOEE9u/9c/RaY3Ate5SSJTmy8NiA/qrhL6jk/EewRyk5lUNUQGpRoVG8IM35WZvdqmSOD8cja0Amc1c6zZJQ7BYlc3OoCojDJAHKuzWajSyZkyP0Sn5PYlB6XvZko0vWZhhiSegCWpW82gIs88UGXiMFGI0v3Y/IhG4SiABW+UUmqAAW+bBBNm0FrELdB7Cu7gNYV/cBrKv7ANb1AYJ35WA2RiL8AAAAAElFTkSuQmCC",4,12,12)
global.planthurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAAAB3RJTUUH4QkJEjMfBxVQpwAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABNklEQVR4nO2VMQ7CMAxFLTZ2Bu4AB2DiNizchqUngJWZg3AIBo6AVBSQUWScNjYOthCRvlDb6Of/F5rCerODv8pyDxBdgw97ZgzNEy8O0FMNzfPwF8GpGZLw+27bXy/nl9I1V+q2ekoCycrfFE4tIC48LYKhkw7TxUO1gCz93eCUCmB4DK2FY+Xv9mpxBfLwaV66Jz1/rP1NANWGHyuA50AeXHo4W/tPwHGcjh17fzZfxvG3OqS1u5zvNu5wegVwl/HXy7+4yDcgYRGA908ulQaShf/oQhSAFSC62xiwVEQKyMq/ahEOghUgrgRXRAvoU381IPpMG75UgBbx8q9exOKfMlZCcyC39v8DsgKUQ2pRIAk/x5H8xYu0BIQlIvk3C/Ircg8QXe4Boss9QHS5B4gu9wDRdQfdwzc5oSqcuwAAAABJRU5ErkJggg==",3,12,12)
global.plantfire = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAKgAAAAYCAYAAABugbbBAAAAB3RJTUUH4QkJFRQ75JwQlgAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABzklEQVR4nO2YQU7EMAxFu+UsXGBW3IYNt2EzJ4AbcQgWHAFpRkEKClbqxs7/SSq8+BqN1L7v2I6bdnt6ft1CoVU1PYBQSNPxBdt2k4IYV7hnYFtzhIqB7TFiDfAGTcG8XV9uX58fv0r/9xZgSUbi7LFlUqyJZrFb/cocfV/+yuPJ9hjB9za5qTn3GtUauMbOXG9CmOzWzVD6MZoH6TGK7x1ykKDfHx5/1BK4xu7hstk9OcpeVj+2xyh+z5BzF7oMGNlEXi6bbS1uWdj0P12ff1fxYPJRQ84MZyY9sb1cNtuzibMP+jyN8mDyUUPuEC4N8hj2nkv+U4P2NOcIDyYfNeSaDKSRbM6eg7nkpsBRLxVotndDsJqUPaVRE7RnyB2aZCMZZFbvpwfJRn2WYbFbi5DPvMinAsODyUcMOdMiqgDnZNhjy0Zala0VgbHhmB5Mfu+QMy0CcXZrYfc8EkeyawWWXNSmYHsw+Rq7rEn13hUb9Gz8sghaAZBPA7THCL7riLNKkYMf/Op9VoMk5gLOzl+twKvxrfk3meS3MMYCzs4v31CDj8u/y4S1gOAHX4oWSCiE0PQAQiFN0wMIhTRNDyAU0jQ9gFBI0/QAQiFNd0l38dbEXAmVAAAAAElFTkSuQmCC",7,12,12)
global.chickenidle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAQgAAAAYCAYAAAAGV2PQAAAAB3RJTUUH4QkJECEFgQcNYAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACN0lEQVR4nO2aMU4EMQxF5xBUHIbbcBUqGs5AS09JS0eDtHegQNxgUZAsGa+zk2TsxIn+Sl+T1Wqe7XzHO6Dd7u6fNgiCIE3DE4AgKK6GJwBBUFwNTwCCoLgangBUaNS2nTVZ8+Ua/L78aP5WQ70KWMlkKz7f55fnh/P3z+vF2opPPL62YoNftv/E/fx4M62B1i017Caekp3VhFn5fO/TMEiS6yO5c37KM8dviSF7B/yyGOlKMWjd6nPu/GrrXVYugJxmvIDoJszMp70nLrG5jjYP8TlLsj35R4bc7HwthtY7FjWkKz1tyv5J15L+rNok/j6yCRH4rYeMTNMGgmykI8PNi08xtKEG/v/+8Y5hMYCKm0grJLoJXnzNYKtDpn275GQx3MDvy+9Zwx67hL+kCTPz94azRe7gj+P3qiHda9GfS5qwAp/fL2N9vd/+6fR4A/6EfO8Ylv25rAmz8q8Zm1jElHwS+LH5I2o40p8hCgD/ki0fDzkvp5JhtGX+PAK/D59iyH9sW9dg1Z9LmjCCn+6z4BNbM5buTa9r15LcPflag4LftwarAbSkCT34Xocslzvnc/HJ3/IEpA058H35PIY8yB41HOnPZU3oxfc0WP7+RFNNU8ohVMqvYWt7A/64GmSP1vZn9QHwMmFGPj9kHvyS5gF/Tn5NjJH9X1yANmUsNwh88MGPxy8KoAEoQGvy4IMPfnz+boAc4NpnNQWADz74cfnNwSEIWl/DE4AgKK6GJwBBUFz9AvqnkvFm9gmMAAAAAElFTkSuQmCC",11,12,12)
global.chickenwalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAYCAYAAAAF6fiUAAAAB3RJTUUH4QkJECE1p949zAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABm0lEQVR4nO2WsW0DMQxFb4hUGcbbZJVUaTKDW/cp3aZLE8A7pDC8wRk6hAZBUBTJEy0ddAY+LMC49z9J2+J0ePucdrVT8wCjq3mA0dU8wOhqHmB02R+YpjkpJEwgu9f8JjDoevt6GK0tKJK9hfxq+O/PeYGfju/LmTP0Bk9MYGM+sL0N2kL+okmCJCCA4UzNzD+9fzbwc2yQt0m95xcNMAxD6dnTII6Pi6DnGvwe85sLyBVTq0Ec3/vt30J+tYlkuOY/+ll8yaMmn/NwDSAHshq04ls8avK5QZsHkGsE1uXjZf77fl2UzpYiovlScziPaH6S6Q6g2wOF4uC0CNXua+DTIWg3lpwH5mOPtXx86eZq4PjmCdMCOGm+URJfYnv4eB2MyI/54KHlFw3ofgsFpM/TS3ovFcDtzjX50gAkD829QPvDeWj4qgblmkSLodIOIILPecA+XpMP8vJV4bmH8UXqucBoUzSyeNAmlXw8bG4QVn6xSeLDzvC0IZriajVozdqp4ZufjSw8InAN357YTyt+1z6ALtU8wOi6A9Uox99E1VbqAAAAAElFTkSuQmCC",4,12,12)
global.chickenhurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAAAB3RJTUUH4QkJECEdkmuVNgAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABVklEQVR4nO1XMQ7CMAzMI5h4DL/hK0wsvIGVnZGVjQWpf2BA/KDIiEOWSdrGceMIEemUtIku50vjpGG13oU/0nAX0DrcBbQOdwGtI9nRv0vsWfapJg6hJ8SeZZ8n/6hBQ6U0gOvl1EPs/XH8arfArzKmxCiIRAAk9rDfvNpUo83HefK7GESiIZhqKZ6/1xhkya/eXhpzeBAQHBOOd9ptZslf/AVpxPMVRpEBaQ2y5nfZYlhhWbh4FG0OsuIv3mIas8YCuJ2Xn3fddpGdsC35Tc2ZYpLMD1w8iSXxqCUQTE1+F4N4jgBSomk8FV7X5HcxKHbKUABYQSlYoia/aw6Sxy6CSCE3B1nwmxo0RTwPQF7iUkdx7o3akj85yVzm8CD4bVbC4j5kwT/ZoNz+3ABSuUTzP2bJPzhJiQE5QWh/KWrwjw6Y0yC+kq3yzyLql+AuoHW4C2gdT9MjCqvGTTn7AAAAAElFTkSuQmCC",3,12,12)
global.chickenhead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAB3RJTUUH4QkJECAU8qwc0wAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAAtklEQVR4nGOwS53IQEtMU8NHLaC+BUDwH4TR2WRbADMEht992I7BJssCZEOvnN8PNmzN4jYwG0TD2MT4AqcFIENhBoJodMORLSEriEAaYQZiMxgmRsgCJgYs4NDsfJAPGDR0LFHEb1w5jkITBfDFAboPsGGqBBE2C1+dkALj6z0ieC0hOvxhGGQgzGB0S7ClKqJSEbrh+DC6j0iKA5BmmAEggI8mKycTWzwQXVRQA49aMGoB5RgAHGIp54NLrDIAAAAASUVORK5CYII=",1,12,12)
global.chicken2idle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAQgAAAAYCAYAAAAGV2PQAAAAB3RJTUUH4QkJESUJ7R/ueAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACTElEQVR4nO2aPUqEQQyGv9LGQrASz+IpvIJXsbLxDLbWa2lrZyN4BwvxBisRAtmY2Z2fzC+v8PLNsvgkmTeTHWW3m7vHDYIgyFL3BCAIGlfdE4AgaFx1TwCCoHHVPQEo0qht21vy5us1+G35o/mbDK1VwEome/HlPj8/3e+/f17+rb34zJNrLzb4cfvP3I/3V9caeJ1Tw8nEKdlZTZiVL/eehgFJr0tyl3zKM8TPiaF7B/y4GPTkGLzO9Tl0fq31SVYogJ5msoDRTZiZz3vPXGZLlTYP8yVLs2vyS4bc7HwrhtU7HjXQk2+bun/oGdOfSZskX49swgj83EPGplkDQTdSyXCrxecY1lAD/7B/asfwGEDRTWQVMroJtfiWwV6HzPp00bo9PyvOHfw+/JY1hNhSLjeI2UyYmX9sOO+uLw7kdYMAvx2/VQ36gyq3P5c0YQU+m8ixaE0i5tfb1Z8+Hy7Bn5BfO4Znfy5rwqx8bSzzSMRipuazwB+b37qG0v7sXgD4NltfDyUvpJhhtAX+PAK/DZ9j6H9se9fg1Z9LmtCDT7/nwWe2vhoyn96nn2PPmNxr8q3rLfhta/AaQEua0IJf65CFcpd8KTn5c25A1pADvy5fxtAHuUYNJf25rAmt+DUN1t8/sZTSlHoIxfJT2NbegN+vBt2jqf2ZfABqmTAjXx6yGvyY5gF/Tn5KjJ79H12ANWU8Nwh88MEfjx8VwAJwgNzkwQcf/PH5JwOEAMfeSykAfPDBH5efHRyCoPXVPQEIgsZV9wQgCBpXv20y++Qt9MPqAAAAAElFTkSuQmCC",11,12,12)
global.chicken2walk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAYCAYAAAAF6fiUAAAAB3RJTUUH4QkJEBsUzh7z6wAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABsElEQVR4nO2XMU4EMQxFp6ShQKJCnIVT7BW4ChUNZ6ClhpJ2Oxok7kCBuMEgj/DKspzE9jibjDIrfW20q3n/284q2enu/mna1U7NA4yu5gFGV/MAo6t5gNFlf2CaZlCVMBXZveY3gVE/v28no7UF1WRvIb8a/vnxvsBfnh+WtWToDQ5MZFM+sr0N2kL+oglAAIhgXHMz80/vn438FBvlbVLv+bMGFEahfO1pkMSnRfB1BL/H/OYCUsVENUjie3f/FvKrTA6XF7NkCJ97G3ROfskjks89Snz1hKkBrF9vr06K2KHRfItHJB89tPwkOLVbEPr1eD1/H28WwdpSRG2+1JycR20+yHQG8NsDFUBpcF6E6u5r4PMhaG8sKQ/Kpx5r+fTQTdUg8c0T5gVI0uyoHD/H9vDpdbBGfspHDy2/aMDvt1gAfA+v3HupAOnuHMnPDSDnoTn4eX8kDw1f1aBUk3gxXNoB1OBLHngfj+SjvHxVeOlhepB6DjDeFI0sHrxJJR8PWxqElV9sUvZhZ3jeEE1xUQ1a879Cwzc/W7PwGoEjfHtin634XfsAulTzAKPrD9DrmP8m/anHAAAAAElFTkSuQmCC",4,12,12)
global.chicken2hurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAAAB3RJTUUH4QkJEB0d4ZjsyQAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABZUlEQVR4nO1XMQ7CMAzsyMKAxIR4C6/gC3yFiYU3sDLDyMrGgsQfGBA/KHKFkWXitnHcOEJYOqVNouv50rhptVhtqz9kuAsoHe4CSoe7gNIhDtTvCN3zMdWDq6oGhO75mCd/p0FtkZrA9XKqUezjefy6LoFfZUyKUSgSEwCx+926uYYWr+k8T34Xg0A0CoaWi6f9GoMs+dXbS2MOTQIFh4Rjn3abWfInv0Ea8XSFMXhCWoOs+V22GK4wD+g7zCcNMLQ1yIo/eYtpzJISWI5Hjfj7efbpu22m0QXbkt/UnD4m8fqAAcJBLIjHlgOTycnvYhCtEQhJNMyHoG1OfheDQl8ZSABXkAvmyMnvWoP4ZxeTkBBbgyz4TQ3qI54mwA9x0qc49kRtyS8+ZChzaBL0NMthcR6y4O9tUOx4bAJSLdH8j1nytz4kxYCYJLS/FDn4OycMaRBdyVL5BxH1S3AXUDrcBZSOF8P+AEPIc7ldAAAAAElFTkSuQmCC",3,12,12)
global.chicken2head = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAB3RJTUUH4QkJEB4nDLlmuAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAAy0lEQVR4nGOwS53IQEtMU8NHLaC+BUDwH4TR2WRbADMEht992I7BJssCZEOvnN8PNmzN4jYwG0TD2MT4AqcFIENhBoJodMORLSEriEAaYQZiMxgmRsgCJgYs4NDsfJAPGDR0LFHEb1w5DqdXZDVh04oJ8MUBug9AeJuMIAqmOIhCeDngkQligzDI4FcnpMD4eo8IXkuICn+YoSAMMhBmMLol2FIVUakIhpENxYXRfURSHIA0wwwAAXw0WTmZ2OKB6KKCGnjUglELKMcASjMfLey7QxUAAAAASUVORK5CYII=",1,12,12)
global.steroidsidle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAQgAAAAYCAYAAAAGV2PQAAAAB3RJTUUH4QkIFgMnT+QRcwAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAChElEQVR4nO2ZzVHDQAyF3QEdcaIBiqAV7jTChXYoggaYMMuMGFkjydo/7FXe4U2STfw9aSXLTrI9vrxtEARBmk4PAIKg6+r0AKCDAm3bzRL44M/2uEQS4NvM96eH29fr86++Pz926vEAv44v2Vfnj/JIvUkr8i1meV7WpMp6jQf4ufmjPVJu0sr88hnJLI/aECI/uoKCD77Fb/VQG3+kwewEMvHLe9pdCDGoPvzuRHqCD75UYdBjrYfZ+KMMZieQhW+xqYGoiazhw9fBB3+Ux+FwGJXErAQy8L39l+vy64t2jBY7+PfJ7/UIJdCbBPgxvvb1RPPVhhB/bjUQ+PfFH+Gxg1sJ9CZxtEH3zJf7r0kruheHFTv41+RrvNHxt3r8h0F6fk+R+d2JFzuJ35nQa+lfnlt8LRbwc/G1XuJrNR6ugfzu3GjgblAWfmuRI3x5N6K9bmkgHh/4efnaucw9eK9WDQit6RsMwgmszrcKYA3bCF8OGW34cEZNA0luhE+P4K/D7+mh3S/0IwxIlMSMBDLxI/vP91QbPh5b/gPDa1TLl7UFfy1+i4dpoF3Fok2qXcW8BHo3KTtf85Pr0QaSgyjKlzGCn4/Pz/u/3vT+yqMrn2xczUQG6U04mWiUHx1AK/J5cY742jDx9t/7q1YOsghfssHv59fUt4cv3zviuyZ0i21tEF/zJlxkANXwoyfAGXxtmo/mS0X2nzy0GtfwLTb4OfmmCX1IHugZyGOtKUcJ8AEU4UdOgOx86/ORBtJqXMP3agv+GvzdyR/gu0Z8QHgNHQn6aABF+JFNAj9eixn1BT8XP2RgAVoaEnzwwV+H32wMQVB+nR4ABEHX1ekBQBB0Xf0A4nn91Z2D/8MAAAAASUVORK5CYII=",11,12,12)
global.steroidswalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAYAAACssfJFAAAAB3RJTUUH4QkJAhY3xnWLygAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAADNklEQVR4nO1YwW0cMQy8DtxRXmnARaSV/NNIPmknRbgB44J9CCAmQ4qkpOWuTw/C9t1CIoczQ64f3378euzY8apRnsCOHZVRnsBQ8o/HU4vq3F4hvgL+tyy+3fP7+9vz4+f78/Pvn//ibo24M/6sB3fB/zbkkw3Gu4/fj88wjs9XNaGKgFXks/C3enB1/G9BvuMcbLLM4biPCXFmHghylQGcTb52L6sVe8CeaXnM7sEsA3BdygA/i3yM/Hi3BFmCIHMYyQNzuKIBWOQbJb4mdOyBxJrl1nKJ9gPPnGkAYfKfST7rfll8A4CB0n6O5KDdeyUD0MiXWgvAYS0RyO+t7YDl5yLohOkzJIBq8vXAx4Jb4HOZHK5uAF7yZQTAcEdBsGdYD5AjOBGy/fcYQK9+1+U9Ba4gH8vBajiCMlMAPfdbYQC9PTdCvtBO7KhZurqHG0wAvZ6wKbTCAELug8WvJJ/lgLLJ1vuJzHnEBTUBnjF9ehEhn3yJjBifrFkTmZYDE4wHE41/meljvXu4E5CFeAofIZ/lRrj7aQ1CF24EmOH+jOgzDUC6n+Z2UfLhd1pOrO9SOIgxm4YM/+g/B6zdPzN9tHcPtwNpje6Rr50zaw3qKR5/nykA/Ju5PQM/agKa+LLkY/hZAsC6pIMyTLQe4G7uXcW0nkdNWDOLlACw8VbhjHxRAnocsec0jXjesRvBQNbomT6R+hkBNOL3yIcC8GBhYYbOzM6f8f6j5ZwxAHwuLYDImGvFy2SzAmj5sFGsuTICN+NF1Es+RsCoANgemyEf1uAlpYUZW4Xa8+j82V6j2bD6vdPHEn5YiVi4RT4J/gj5MScceUyYEcfzEEEj28rpo60hHvLJO6MrSISkjKgzMGdrWHb6WLWHnVc2pke+FaBLUDAHBGtm4yPTB117VHx4BsNhFvmy+TGyzhIYiplxjZmwa9KNkLBHvpWAW7Gy4ZoAtemzKh+NeGcKwOrN7DM9HMSp6LojS4CzyXeVkMTT3g3OEAAjSRX5q/oguYiT131O5tJXANiDhRVnE7HizuqQfMyacKrp1YVfPSpwetXejNZdXsCOHZVRnsCOHZVRnsCOHZXxD+hz51jQUVybAAAAAElFTkSuQmCC",6,16,12)
global.steroidshurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAYCAYAAAAF6fiUAAAAB3RJTUUH4QkJAiY5/ouQPgAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABqUlEQVR4nO1Y223DMAzUBt2oX1mgQ2SV/neR/mSdDtEFggQ2QOBAnKiHJVJBLICIodg53cMynfR5/UlnxVXXRQ8yXBed0kPXq+IfEt0aM0n/f3/tdf+77bUdzzZkFv5Q0UcbgYR+Lx87UfkU8iKAHItAI4zwwJ8m/BETMGlIFMlvnzK2eSktUo8JnvjTxW81gRFnadMD50QE3B5WxXcRX0YteUsAnT5LAPytqu0gAN9NfBk15C0R8HskL99Ze7WZxCD8JQ1gZHPC4P7L5vUDcjV8V/FzBuRufbyNGSE8j83h9dZeHIm/lAEsdSxhVhuIW4F+oJYMiMB3N4CZgAlkLV2u97bOz700UREC8ae3nq0GsBSxpGEi9THe7vrFqGSAN76bATXtH+s4UAAkqBOn51GA4stQIH6xC+o1yCJcIwIuHP8O0P21TmDvXxBR+FkD9IkeBpS2CdYe6gRa3c6K+NUL9LgLSgKxhyCb6zUhAr9pEZEGsBTq1JZSvCL+IQNGE2wRYIbAEfjNF0QagCJEGDADv+uiSANEhCgDRuOHEDjrNGCZCl/Au9cTiKVtQVwvlyAAAAAASUVORK5CYII=",3,16,12)
global.steroidsdead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAMAAAAAYCAYAAACssfJFAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAD90lEQVR42u1bvU7cQBCeDSJdBDUURISCJ0hHsyIRRRCCIqJIEUVCyiskD3B5BSQkREGBKEBRKFCEtrmOJ6AIiCu4mhNdUHCqWcbjtVmvvR6k26/y+X7Gt/6+2W9mvSrLMkhIGFeoQAG4vqQ6u2ilCvGzLBub+AkyAqirFBWLdLe9dQAAePXxCwAA3B3uwvT346iElI6fICOANvyRaoN0R8tToLUGYwxorS35kID4emJhFW5765aQTYgoHT9BTgBtFwYqhHi3vfUc0X5+/WTJd3e4C1PfjgAA4PjdtP0MJ+nEwmptEkrHT5AVQKyqWPmSjxOPArPtizcfcucfLk/sudGPDTDGwNr2vrUnviSUjp8gK4DYLSHlQz7qr8tIiNm3ioBaa/tbPplYOn6CrAC66oeqp8iHcJHw7nDXHiMJHy5P7HtIPJdXryKhdPyEJIDM1V1xgftyxNr2fuE8JaGvACTiJ8gKoMvVMOVrPbDoBAAwxhQIRT9HyccJiCjz4tLxE5IAbOHJsy4Sj2ZY2nYse22MgY2zUa6TU5aBpeMnBBKJLUiGjK2EAAoioBmYEg69tCvzIlHLPr9xNgKA4qKVi4TS8QORNem2tU2+JiQMjb21uZI7v3NwWvsaYgtAgcdjE2X+G7Povz+/CpmW2g5+rLW2dgN/m67UVglAIn5LxO9ECGVrJLTQjykEpVS2tbkCg76BuaVHe3l/dQGT84twf3UBe+fX3tfQpQBU1Z9yDSj20JGAlGC028IzMCfgU4MhHT8C+aMIAsfJ1eGiCSLGoyE86w/6j+M+MzsDk/OL9vWgb+D3zV+v2D5dIBU48CpkcKlVwIvHP3+0PJUrLF3ZODQDScePRPpW7gseuxIBnTF5A4HWQE3uCxIfszzN+IO+yQng/urCfnfv/Bq2NlcqrVGVAFTDGxE80GU2hVoRV5GKxAzptkjH74D4te4NjofL/rm6ZNw+0vGhzYO6q/Kf377OZXcqAk744c0wNysMb4ZWHGiNCvc14tOgrfpQSkA6yK7CNEbLscP44usxVR6fW56yjhm1hLx75rsqj1kfAAqZnx/zmgBnBioCLJRp7Lr7AcQfiaYZifvM2B2JDuKLd+OqRE5nAf5e2VpI6Ko87fC4SO+aCVyvuUXiImgqgE572vQGSfTUO4j/rATgyvIU3PO7BLC2vW8fEef7J3wFwK0Oghe+fAaYW9Kwc3AK1EZxKxSyIyyTEgC9SVKLSpHjP4v1GJ7l+UyHeyNcNQG3QFWzZJUAXKSleD/7slD88hoAiV61g6/plkiRVc2WW4vPLb7PdtMslOR1mwFlDQHvPxM4Rj5NiTZiq7QpPmGckQSQkASQkDCu+A9xkmoNXkB3RgAAAABJRU5ErkJggg==",6,16,12)
global.rogueintro = sprite_add_base64("",1,246,0 )
global.rogueintrofg = sprite_add_base64("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",1,246,0 )
global.roguefreakintro = sprite_add_base64("",1,246,0 )
global.HyperCrystalportrait = sprite_add_base64("",1,246,0 )
global.HyperCrystalportraitfg = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAewAAADwCAYAAADCSVc0AAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAK00lEQVR42u3dv04baxrA4ZdrgNUqbtOlQjoS2oqGlorVuQXfAbRHaZMbOPI9QJO026SKUm2VLq2jiOQa2CKMNf48/xl7vvE+T4XAQIDil/d7x+OTp6enAADydiLYACDYAIBgA4BgAwCCDQAINgAINgAg2ACAYAOAYAMAgg0Agg0ACDYAINgAINgAgGDzkj/iycnWH/Hp6enEbwVAsMk82KININgINgCCzRixFm0AwWZGwRZtAMEm02A/xlX8I/4j2gCCTc7Bflouf79/tRJsAMEmx2DfL87j5voiIiJ+rr5tTdqiDSDYZDJdb4L99jbir/dbU7ZoAwg2mQT7Ma7ibPl6+zGiDSDYZBzs5yk7jbZgAwg2Ewe7uOBs4zna9tkAgk0mwS5fcJYGO52yRRtAsJlouq4MtmgDCDYzCnaEfTaAYJNDsKuuEK+asu2zAQSbnINdM2WLNoBgk1uwRRtAsJku1q3Broi2o3EAwebAwb5fnMfl+rRXsE3ZAIJNjsEWbQDBZobBfo62o3EAweZAwX6Mq4iI9mCbsgEEm2lifRuv4i7eDAu2aAMINpkGW7QBBJvDB7vYX48RbPtsAMFmgmD/XH3bvL31sTTYpmwAwWaaYJdjLdoAgs2Esb6NV/GvxT93gl0V6z7BTo/GRRtAsDlgsE3ZAILNBMG+X5xHRIwbbNEGEGymD3afKdvROIBgk3OwG6Zs0QYQbHoEu9hfDwn2VrTrgt0QbcEGEGw6TtejBbtDtB2NAwg2A4NdHIcPDfZLp2zRBhBsDh1s0QYQbPINducpuyHagg0g2NQEu7y/Hi3YHads+2wAwabjdD1msE3ZAILNnoJdPg4fNdgDoy3YAILNHoPdebI2ZQMINocJdmucn0P88PFL3Fxf7Hyds+9/m7IBBJuuwU7313XBbgx0Kc6f1z92vl5VsFOfFr/i3+v/CjaAYFM1XbcGu0OgU4ININiMHOz0OLwI9taRdSnSd6sPrd9jSLDfxdd4H98FG0Cw6RLsrVj3iPRLg11+LrZYAwi2P1BDsG+uLyLe3sbDH39ufU7VsbdgAwg2Bwp2eX+dRvXT4tfgaPcNtv01gGDTMF0XwS4H9V18jbt4sxNtwQYQbCYK9v3ifCfWEVEZ7D7R7hvs8gVnYg0g2P44SbCflsudWI8d7Mv1aesd0+yvAQSblmCnsR4j2n2C7TgcQLBpCHZTrAUbQLDJZLp+jKvaWDdFe+xgu2EKgGDTEOz7xXlrfIdO2X2CbX8NINi0BLtLfIdM2YININiMFOx9Ttldg21/DSDYTDhlCzaAYM8+klNGqW7KbgvwvoLthikAgp1tsHOLdnF70jGn7K7Btr8GEGzB7vFvGnvK7hJsx+EAgp11rOca7T4Xn5WDXdxHXLABBHuWwZ46UkP22V2j3SXYbpgCINjZBvsxrrb2trlFu22fXRfscrTrXqkrDbb9NYBgZxvs4tWxTlarbGI11tF4napgOw4HEOxsg52+9nROE2afaA8Ntv01gGDPYrreBPvtbcRf77em7Kmj1Xef3SfaVcG2vwYQ7GyD/RhXm6c3bR6TcbSb9tkvDbb9NYBgzyPYz1N2Gu1jPBovB7t4rONwAMHONtjFBWcbz9Ge6z67b7AfPn7ZvE+wAQQ7y2CXLzhLg51O2VNHrOureg0N9uf1D/trAMHOc7quDPaMol23z+4S7TTYpmsAwZ5nsCNmu88WbADBPqpgV10hXjVlz3Gf3RZtwQYQ7OMJds2UPXXUuuyz+wTb/hpAsOcf7JlEu2qf3RTtcrDL07VgAwh2VrFuDXZFtOd2ND4k2GININhZBft+cR6X69Newc5tyq77udIpW7ABBPu4gz2DaLfts+um7CLYd6sP9tcAgn1kwX6Odu5H4+k+u2rKLoKd24kBgGAL9s4FZxHRHuwZTNl1/yGJ+L3Prpqyq4It1gCCnVWsb+PVJmK9gz2zaDcF2/4aQLCPK9gziXbTPjuNtmADCHb2wS7212MEey777OLnFWwAwT6KYP9cfdu8vfWxNNiZTtl1P29EbEX75vrCBWcAgj3PYJdjfWzRrloDuOAMQLCzjXV6RFzEqyrWfYKdHo1PHcG6fXbxVDbH4QCCfVTBPqYpW7ABBHs2wU73uaMEe2bRdsEZgGAfZbD7TNm5HY1X/Q6elkv7awDB/j8NdsOUPXUUq/bZOf2HAgDB3opVsb8eEuytaNcFuyHauU3Zgg0g2NlO16MFu0O053A0LtYAgp1lsIvj8KHBfumUnWO0BRtAsI872EcSbcEGEOyjDHbnKbsh2iIJgGDXBLu8vx4t2B2n7Bz32QAIdpbT9ZjBNmUDINh7Cnb5OHzUYA+MtmADINh7DHbnydqUDYBgHybYrXF+DvHDxy9xc32x83XOvv9tygZAsLsGO91f1wW7MdClOH9e/9j5elXBTn1a/PKCGwAIdt103RrsDoFOCTYAgj1ysNPj8CLYW0fWpUjfrT60fo8hwX4XX+N9fBdsAAS7S7C3Yt0j0i8Ndvm52GINgGA3BPvm+iLi7W08/PHn1udUHXsLNgCCfaBgl/fXaVQ/LX4NjnbfYNtfAyDYDdN1EexyUN/F17iLNzvRFmwABHuiYN8vzndiHRGVwe4T7b7BLl9wJtYACHb6es/L5U6sxw725fq09Y5p9tcACHZLsNNYjxHtPsF2HA6AYDcEuynWgg2AYGcyXT/GVW2sm6I9drDdMAUAwW4I9v3ivDW+Q6fsPsG2vwZAsFuC3SW+Q6ZswQZAsEcK9j6n7K7Btr8GQLAnnLIFGwDB3sOU3RbgfQXbDVMAEOyO0S5uTzrmlN012PbXAAh2j2iPPWV3CbbjcAAEew/R7nPxWTnYxX3EBRsAwR4h2GNGu0uw3TAFAMEeGO22fXZdsMvRrnulrjTY9tcACPYLoj10yq5TFWzH4QAI9p6jPTTY9tcACPbIwR4z2lXBtr8GQLBHinbTPvulwba/BkCwR4z2GFN2OdjFYx2HAyDYB4p232A/fPyyeZ9gAyDYIwe7iPZYwf68/mF/DYBg7yPadfvsLtFOg226BkCw9xjtqqNxwQZAsI8k2oINgGAfONhFtIcG2/4aAME+ULSr9tlN0S4HuzxdCzYAgr3naKdH40OCLdYACPaBop1O2YINgGBnFuw02nVTdhHsu9UH+2sABHuKaKf77Kopuwj2yWq19X7BBkCwDxjt8j67asquCrZYAyDYE0W7Kdj21wAIdgbBboq2YAMg2BlFu9hnX65PBRsAwc452sU+uxztm+sLF5wBINg5TtrFsfjZ8vXvx7jgDADBzivYxaR9uT6Ns+Vrx+EACHau0RZsAAR7RtF2wRkAgj2DaD8tl/bXAAj2XMIt2AAI9oyiLdgACHbmwRZrAAR7BtEWbAAEewbRFmwABBsABBsAEGwAQLABQLABAMEGAAQbAAQbABBsABBsAECwAQDBBgDBBgAEGwAQbAAQbABAsAFAsAUbAAQbABBsABBsAECwAQDBBgDBBgAEGwAQbAAQbABAsAFAsAEAwQYABBsABBsAEGwAQLABQLABAMEGAMEWbAAQbABAsAFAsAEAwQYABBsABBsAEGwAQLABQLABAMEGAMEGAAQbABBsABBsAECwAQDBBgDBBgAEGwAEW7ABQLABAMEGAMEGAAQbABBsABBsAECwAQDBBgDBBgAEGwAEGwAQbABAsAHgaP0P2vSs1UD6iRsAAAAASUVORK5CYII=",1,246,0 )
global.BigFishportrait = sprite_add_base64("",1,246,0 )
global.BigFishportraitfg = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAewAAADwCAYAAADCSVc0AAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAE+0lEQVR42u3dsZGqUBSA4UMRtmFqZBPOmNoANRhZgw2QMmMTRKa2YRFstG9wH6z69g0clu+LHM0uyn8RuBRt2wYAkFsh2AAg2ACAYAOAYAMAgg0ACDYACDYAINgAgGADgGADAIINAIINAAg2ACDYACDYAIBgAwCCDQCCDQAINgAg2AAg2ACAYAOAYAMAgg0ACDYACDYAINgAgGADgGADAIINAIINAAg2ACDYACDYAIBgAwCCDQCCDQAINgAg2AAg2ACAYAOAYAMAgg0ACDYACDYAINgAgGADgGADAIINAIINAAg2ACDYACDYAIBgAwCCDQCCDQAINgAg2AAg2ACAYAOAYAMAgg0ACDYACDYAINgAgGADgGADAIINAIINAAg2ACDYACDYAIBgAwCCDQCCDQAINgAg2AAg2ACAYAOAYAMAgg0ACDYACDYAINgAgGADgGADAIINAIINAAg2ACDYACDYAIBgAwCCDQCCDQAINgAg2AAg2ACAYAOAYAMAgg0ACDYACDYAINgAgGADgGADAII9K7vbtY2IuKw3hdEAQLATx1qwARDsxFbHst3uD4INgGBnD3ZExP10FmsABBsABBsAEGwAQLABQLABAMEGAAQbAAQbABBsABBsAECwAQDBBgDBBgAEGwAQbAAQbABAsAEAwQYAwQYABBsABBsAEGwAQLABQLABAMEGAAQbAAQbABBsABBsAECwAQDBBuizOpbtdn+IiIjLelMYEQQbIHGsu4QbwQYQbBBsYBq723VwR5E1fqtj2UZECDaCDSw61Jkj+BnrvmA3dRX301mwEWw7NrN3lhfrbN/9brC70W7qKiJCsBFsO7ecRxswRqwzB7tLrBHsBeu7sEWwWVqss0dbqBFs/rq4xTkylhprk1UQ7FkE20wewRZsEOwZRVuwmet3uO8WKMEGwQYEGxBs4N1gR/QvNPIq12+AYAOCDYIN8NNgW5QEBBsYMdjvRvsz1GL9yOqHCDaQJtrdWAv24zhaTAnBBkYJ9lC4v0ZarPvHULARbGD0aL9CsAUbwQaSR1usvw/2UKzn+JxxBBuYYbSF+t+C/eoiNaKNYAOMNNn5Oql59/Y50UawARIcfQs2gg0g2Ag2AGKNYAMItmAj2ABTxPqdYIs1gg0wYbBfjbZgI9gAEwf7WbTFGsEGSBLsoWiLNYINkCzYXVaNQ7ABEkZboBFsABDsees+Gcd5IgAEO3msRRsAwRZsABDs/xnspq5c+AGAYAs2AAi2YAMg2L/N6li23VWFmrr681q0ARDsRMEe+kywARDsGURbsAEQ7BlEW7ABEOzk4RZrAAQbABBsABBsAECwAQDBBgDBBgAEGwAQbAAQbABAsAFAsAEAwQYABBsABBsAEGwAQLABQLABAMEGAAQbAAQbABBsABBsAECwYXFWx7Ld7g8P713Wm8LI5NtOERH309m2QbBhaXa367c/NOHOFWvBRrDBkbVozyDWgo1gg1gPaupKJJLEWrARbBBsR9liDYINgs1Pgy3WCDYsNATvBNvf4tNsJ2OOYINgC7Zgg2CDYAOCDYwa7aauIsI5VECwYbJgP4u2WAOCDYmi/YxgA4INyYMt1oBgQ/JoizUg2JA83GINCDYACDYAINgAgGADgGADAIINAIINAAg2ACDYACDYAIBgAwCCDQCCDQAINgAItlEAAMEGAAQbAAQbABBsAOAlH4Ynb12Vz7dTAAAAAElFTkSuQmCC",1,246,0 )
global.LilHunterportrait = sprite_add_base64("",1,246,0 )
global.LilHunterportraitfg = sprite_add_base64("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",1,246,0 )
global.Momportrait = sprite_add_base64("",1,246,0 )
global.Momportraitfg = sprite_add_base64("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",1,246,0 )
global.Captainportrait = sprite_add_base64("",1,246,0 )
global.Captainportraitfg = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAewAAADwCAYAAADCSVc0AAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAJEUlEQVR42u3dPZITRxzG4b8iPgI22CpiTrAJtyAgIeIqPsBexZETB9yCxCcgdpUDO8AQyYFLlJidr57pGXVPP08GLKhQ8tPbGo1O5/M5AICynQQbAAQbABBsABBsAECwAQDBBgDBBgAEGwAQbAAQbABAsAFAsAEAwQYABBsABBsAEGwAQLABQLABAMEGAAQbAAQbABBsABBsAECwAQDBBgDBBgAEGwAQbAAQbABAsAFAsAEAwQYABBsABBsAEGwAQLABQLABAMEGAAQbAAQbABBsABBsAECwAQDBBgDBBgAEGwAQbAAQbABAsAFAsAEAwQYABBsABBsAEGwAQLABQLABAMEGAAQbAAQbABBsABBsAECwAQDBBgDBBgAEGwAQbAAQbABAsAFAsAEAwQYABBsABBsAEGwAQLABQLABAMEGAAQbAAQbABBsABBsAECwAQDBBgDBBgAEGwAQbAAQbABAsAFAsAEAwQYABBsABBsAEGwAQLABQLABAMEGAAQbAAQbABBsANqL1ul0Pp/PJ8EGgIJjff3r1sIt2ABUGezWoi3YAFQb7JaiLdgACLZgA4BgCzYATce6pWgLNgCCLdgAINiCDUBzwX794kP8+e9vzUVbsAGoKtYRIdgAINiCDQCLYy3Ygg2AYAs2AOQI9iXWF91oCzYACLZgA8BUrCMiXt0/xvOvnwUbAEpe199evv3xZ8+/fhZsACg92BER//z1i2ADQCmxHgp2d2ULNgDcONiv7h+f/IxgA0Dh61qwAUCwBRsAUoPddxx+cX3hmWADQGHrum9lCzYACLZgA0BfrCPGj8MFGwAqWNfdYB892oINgGALNgCkxzpi+jhcsAGggnUt2AAg2IINAFPBnnMcLtgAUMG6FmwAOGiwL49VY9gFG4BiYh0x/zg8Ndjdx6ot2oINQJXrOiXYfS8MBBsAFq7rPYNdW7QFG4Bigp1yHB7x89drDgV4KNaCDQALgp26rgUbAG6wrtcehws2AOwQ7NTj8DnBHou1YAPAxutasAFAsAUbALHu+/3U4/CIpxecdQM8FWvBBoCN17VgA0AF67rvOHwq2K9ffJh1VblgAyDYmdb1VLCHHkuwAWCndS3YALBjrJeu64jx96+HYh0Rgg0Ae63rJcF+df84+85ogg2AWGeI9dhx+Nj75IINAAnBXnMUviTYlxcHgg0ACcFes67Hwju15gUbgGbimxK4LdZ1xPD711OPJ9gANLWU50Rui/euh6I75vrxBBuAZmK9Jtg51nVKsLsvDgQbAMHeYV1H9B+H9+l7cSDYAAj2Dus6Jdh9Lw4EG4BmYj0VuS3X9dzj8KEXB4INgGDvsK7nBnvoxYFgAyDYG6/riHnH4WOPJdgANBProcht8QUfqet66rEEGwDB3nhdzwn21GONfWGIYANwqFj3RW7rWA/FNvWxuv9GTbEWbAA2Wdc5Yz21ruccu9d+HC7YAGRf1zljnWtdCzYAgp24dvde14INQFOx7kYudV2fHu7i/Mffu69rwQZAsBfEM9e6Tnk8wQagmVhfRy411rnXderRu2AD0Fysuz8/J56pwc65rofiL9gAWNcbruslR++CDUATsR4K9tS6Pj3c/f93M63rJbE+wnG4YAPwJMB9sVyzrnMFe+lHxgQbgMOt67Fg7xHriOHj8KVXoQs2AIdb1xHRG7elsc61rtd8ZEywATjcuu4Ldmo8l8Z6aF2v/Xz3ES44E2wAsf4p1lPBnnXf7vcf4/uXT1nW9dpYH2VdCzaAYP8I4/Ovn0eDPetbsd5/jIiI718+rV7XOe6cJtgAHGpdf3v5dvXNSk4Pd/HszbtFwe4+dq7bnAo2AIeI9XUc137++bKuIyK+/f7r4nWd857k3dVea6wFG6DxWF8fc6/5ONV1rJes6x+h3/irOQUbgOpiPWddz4n19VF4arC3irVgA3CYYF/HeM3Hqa7XdUT6cfhWusGuOdaCDdBorK+Pwtd8nKob6yVXh2/lSO9fCzZAg7GeWtdzY909Ci8p2Edb14IN0His13ycquR1LdgAVB3sbpCXfpyqG+uIct677js1EGwAqol1905l1yt0bayta8EGIEOsu1HOGevS1rVgA1BtsIeOwlNi3XeRWWnr+vr/dqRYCzZAg7G+LNDUW4Ba14INwEax7nvfOiL9rmJDsbauBRuAlbEeWte5Ym1dCzYAG8U6dV3XEuvuuhZsAKoIdo6vqByLdWlH4Udf14ININbJsbauBRsAsbauBRtArNfGurSj8FbWtWADiPXsWFvXgg1ABbG2rgUbgMJjbV0LNgALY929i1lLsW5tXQs2QKWxzrGua451a+tasAHEurpYt7iuBRtArAeVeJFZq+tasAHEuup13UqsBRtArK1rwQYgR6j3jrV1LdgAJMZ6z49u1RTrbrAvz58bpwCwe6z3vClK6bEeOwrvPn/uJQ7ALrHOsaqPFOuxdd33/Ak2AJvHOseqXhLrUi8yG4u1YAOwe6hvGeuS13XKUbhgAyDWha3r1mIt2AA3DrVYp6/rsedSsAEQ6wLW9dhzKdgAZA91rivBxVqwAdgg1DlX9enhLp69eZf890q+Ijzi6VH4XL4PG4DiYr1kVde6rvu8fvHhSdQFG4BiYr10VR8t1hHR3JeACDbAxrG+1Z3LjhjrV/ePvUfmgg3AzUPdQqznvG99iXV3XQs2AItjfesLy66VfpHZnHV9eT6Hwi7YANxkVecIdS3rem6sh362le/FFmyADKHOuarXHn8fNdYtr2vBBsgQarHOH+u+k4qhnxdsACZjXeIReA2xHrvIrO85bX1dCzbAwUJdQ6zH1vLQ89r6uhZsgMRQR5RxA5SWYm1dCzZAUqhLuQFKzbHui+/U82pdCzbAIVZ1RB2ftb7c9OSnFxkTL4DG3usWbACRzrqqtwx1LbHuC/ac59W6FmxAqKsP9dFjbV0LNiDSo9Yef+8R6og63rNeGmvrWrABkd5sVe8V6ppifR3slOfWuhZsQKirDnULsbauBRsQ6apDXVus10TeuhZswJpetPhuHepWYm1dCzYg0qsjHRE3CXUtV4Jb14INkBTqS6DXRPoS6FtGOiKaCbVYT/sPMu6ht2/kebMAAAAASUVORK5CYII=",1,246,0 )
global.Throneportrait = sprite_add_base64("",1,246,0 )
global.Throne2portrait = sprite_add_base64("",1,246,0 )
global.Throne2portraitfg = sprite_add_base64("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",1,246,0 )
global.IDPDTankidle = sprite_add_base64("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", 12, 32,48)
global.IDPDTankwalk = sprite_add_base64("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", 8, 32,48)
global.IDPDTankhurt = sprite_add_base64("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", 7, 32,48)
global.IDPDTankdead = sprite_add_base64("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", 11, 32,48)
global.IDPDTankintro = sprite_add_base64("", 56, 32,48)
global.IDPDLaser = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAAIAAAAGCAYAAADpJ08yAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAAGUlEQVQI12Nk+P//PwMDAwMjnPEfg4GhBgA80xPzn5o4GgAAAABJRU5ErkJggg==",1,2,3)
global.IDPDExplo = sprite_add_base64("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",8,24,24)
global.ClamMimicIdle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAB3RJTUUH4QgMCionrJxqawAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAABDklEQVR4nGOwS53IMJB4QC0fdcCoA0YdMOqAoe0AIPiPjmnuAGTLwupKMDA5jiHJYmTLNp8+ioGxOYZiB8AsRrYExn769jUcY5OHOYRsB4A0I1uE7Ftky/HJg9j4HEG05cgGYrMcnzw+R5BsOTEOIMURTAw4gJGSGi4psgBO80jxPShR4fM9DMMSIjGhgDUEqO17fObijAJkcO7eLYbFm9czxPoGEmURSB1IPUgfIYDTASDNhRM7wRgGkH2ALA/CyJYhq8MmjwLwFT7oGD09oJeCyPGOq6gmqRzAZgixRTExlhNVEiI7BJuluDCxdQJZtSA+i30K0kmqFYlyAC7H4MIkmUeqA6iNRx0w4A4AAM2hpJlLUBEAAAAAAElFTkSuQmCC", 1, 16,16)
global.ClamMimicFire = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAIAAAAAgCAYAAADaInAlAAAAB3RJTUUH4QgMCxoplaAbqAAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAADP0lEQVR4nO1ZvWqVQRBdUlgLYmOXFDZiY2nA3ioBwTewFsG0FnaWaY2N+AAJ5A0EsQjkAVKks5I8w/VO4lzmzp2Znf3J7kZ34ZD7ffszs3vOzH67CS/eHIaJ/xfdHZiYAkhzOIRFDL19vEvo7kAq6adnPxa/rn6rgPophn9EAJT01x/eR8mnIsD2Uwh3VABIvEU+1mt12A+F0HtOI6K7Axr5QB4SSIlE3Hv0cAO8De0PmCLYxFYYvLza2w8nX76Gb6fHa++0tligPfTT2s5yU4YWABBIfwOZMUKxDe87i1yGFsAsDUrvPSj2HSDt9YCd+weLvd3jFeBZazv3/4rfAN+P3i5iqK5SVl5ufw5PnzxfewfP8L5V6THvW7HvjUYEflFbCJUuYqB/LPI5pExQ6od3HWrNu6V9l0F6DtfO3bwOj1+lC8JFwMkGW1wUtcmXFp0fOelxs8a8W9k3jXKiLfKtNqUXMSsRhN11opfPML70vib5dMHpb2nevG3pvDX7sRtQbwC6yS8RQDURMKJpyuMCqEU+nYt186jV587b4iC2/ilrLxq21OW5i7dUmrsYMCZN9Zj+0V9eVyP6WhDQOwCHvweAr9slmeHk48+Nuu0H+2EZ7dd/eYH20K/k6/zZzuPcrsXj1LIdHc+TAUr+G1eSAQLeBcCevoR09ufRvzoJ/O2TkwlCxy3Qsl2agSUf1AxwfnkR3h1+uoakIloPgGepnVTvKRj5VsG7AH4nwEtOJmgWgQ1sm+NqUUcjD5+5GiHSEFx12hjBGY2SH2grdg/AM0Cq3ZYR2DsDmwuvkcjJpyKw+niJ4D7gWFQEFmj7HNvWopYIwLMFon16rpds83M/t8f/FY71SQKg+xnPAlIG4NFP98QcAdC+nFBLgLRt6pm8dQR6AlDLwBxSBo4FoMsJ6SzMjUgfQNLtVGr6x7FzBZibAVpFoHf9LbI1UXjW3x2FErgDGlLI1+znCjDHflDu263tIBaBOGbq/Hk2ToFH/O6FyHUgdeKS/RIBltrXUmlswXMyX0yIOeTH5p/kiEcM1GjuxEeyn2J7BB9SbRc5o6EG6SPa99gewYek8W6TrInx0d2BiSmAiSmAiV74A3lwlrkiBT9cAAAAAElFTkSuQmCC", 4, 16,16)
global.ClamMimicTell = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAeAAAAAgCAYAAADKS6uVAAAAB3RJTUUH4QgMCxITm3VIEgAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAD4klEQVR4nO2Zwa0TMRCG98SZGmjjSbTAjQ7oAK70QCUcqIETdXBC1ABywNJoYnttrz3jxF+kT+9tdtffP14ns0mOtx++HAAAAGCLewAAAIAdcQ8AAACwI+4BAAAAdsQ9AAAAwI64BwAAANgR9wAAAAA74h4AAABgR9wDAAAA7Ih7AAAAgB1xDwAAALAj/Scexx+NaXBHf8ptlaHktsiAHz9+/Lv6Szm6xumVvv/88Y7Zk+Dl1xOdcqcyjMpR6541D/jx48e/q782R4+3SSxl3358vyMVZmTh1n7plY7w9+fvX3fI/fH/S3dHyh8dJb88Dj9+/Pjxj+sDo/tPlTzVgPQkpPbHICMKt26A4ZyUJ+cu7Q/PtWZI+UuLr3QMfvz48eNv7wGz+0/TJMhuXypen/NoDbDk7lkArRnw48ePH7+P37L/uAdY7QLk3Ff9tRnC/ty54Y6q5I6U7tLw48f/zxW2d64fv3//cQ/QehGuNMDayd95AeJv8+vHbvVf8YftnevHv57fuv+4B2hp/lcvwOqfQI//vxfk3GdzX3N8T/3efvl48/rTjZXq1w3Ye/5LrHL94/YjrD/8e/kt+497gJUaoOcCCM+/e/l6Q44Rx9G1y/0plzxP7q+tP2YJePjlueEh8wRCE7byl+pPPSz9pfqvrP/Z6y/87+n3rh//2n6r/uMeYJUG6L0AZAOWTUY2Gu2O++MxMkM859XxciNu19Qfx5ZZrP3y3FwDtvLn5j/1iDdQFv6z+sNffQ0t/XKMltffDL/H/ON/TL9l/3EPsEoDTC2AcI4co2cB6DFK/rBPj5laRNqtj8+d0/oCKI1v4ZdjyRuClHu2X46Va7yy0c3018x/fE5/Y2Dlj+fI/SGHtd9r/kf6V3j97TT/lv3HPUDNBYjk3KkMuTF6/Lnxchdfz1uvXzZvvaBKC1Ae23IDsLpfuvS2R/36U3lsdKvMf2qfpT81PzP9en14z/8of+pnF+vXn7y53OX9J9UHRvefphCpT7iywLMAZ8Xn/KmCdcPPHXPVH+uTnrit5yZ37NX6pUvOr158eu51Rvz4Lf36DXKmX98Qhe1Z9ed+Jpo1/9LzSNf/Wfwz+0/XnUAcXFM6vrb40iS0MsqfG19fgFKGXv+oGwD8+J/dn/o2YoZfe+Jv3N714x/vn91/TkPUNKKzxtNa/Ir+3gswwp8bv+YGAD/+Xfz6a+/4qXu0X3/aDt4V6sc/xz+z/zQFqWlGUtpbOH78+PH3+EMztPDL3/plA/auH/9j+S+FyTGiaPz48ePHj/+Z/dOCAgAAQB73AAAAADviHgAAAGBH3AMAAADsyF+BHYGgR72dDAAAAABJRU5ErkJggg==", 15, 16,16)
global.ClamMimicHurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAgCAYAAADtwH1UAAAAB3RJTUUH4QgMCxw53k2sSgAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAC10lEQVR4nO1ZvUoDQRAeLKwFsbHTZ0gjEd9AciLYWdqaRrGz8AXEVm3EB8hBnkBBLHwIqzRKHsDqzBxMmEz29+72do9k4CPJ/tzMfd/O/gWOLh5gjXiIHsCqw7tD4WBBAwYobIhNauMCuJAeUgxO7vjro5hMf7XA+i6JEYz4JoTgpJ/dXlnJ5yJQ+9SFaIX8KiIQ8SbyqV5XR/1IiNhkOwsQgnwfEZAsJI8I5EQSNnd3liDb8P6IFEXYgMTtdJBB/vwCr+PRQpmuLRm2x366tqlY0gIggfw7kmkjlNrIvqla0gLo7G/yU8JW1glLeRHGeVs115MN+qM5yFTtU53/O7EGqCw7zEvYykLY+9OwsMHrgSZ1Yo1+ngW2kS+hygSoOfqBHexoR2UCeBwErc5jka8SQQqwv3Vd7vnxUydAHfI56XTW0J07ZB1tf21COAUSi/wlEaC/MNrxN76sqrwJ8iXRJvJNbUwHQeeAYpG/IIIgmqe6FKBp8usIYBKhMxmA6cynGpp+sE5OQ/i96s6Hnqe72nC5izLdW8mYrLugt8dLv1W94f64q5i9EOR3n0t1e9sZzEZ7+SkN22M/711J2xZq5DeRCUBnAZzTZ+CjXLcIUzn18c0EUGRAndtYWwa0Qn4VEYBt+XQCIPClZJkUwEcEEoBf4qmmH16vIlteBFJ95wVQiSDJryuA9Eu/Jfnki9YcLoLuGU4ChCDfRwROAn8JLoIJvL08IPn6VpEoyecimPqoYkj6KuL8+KREdnswL+vN1vSeZl2XddiPnlHH//c0n8dwP7wpIWPA31RHvrGf1X8XMoCnNE9xOfpk+vPvVachObXwfb6MUZ4B5Dqh8p/8GqB6KR8C+JVAHf8q6P4eVf0zp/NvDCIW+ZwEYP8NVyGAnlHHv00IG/Em/06BtE28jggXMnxvI2P79w6mLdJdyNChS/6DBbrGWoBOIHoAq47oAaw6/gERnTQHQIK3LgAAAABJRU5ErkJggg==", 3, 16,16)
global.ClamMimicDead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAMAAAAAgCAYAAABEmHeFAAAAB3RJTUUH4QgMDCgdXCut6QAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAAE0ElEQVR4nO1bPWgUQRQeLWwNBBE1CFpFRLATkqC1jQko6cQU2ogYC20tUtvYRhuxs8lBSgVR/CksQxoRAkIKI1FsBKvz3pEX3r2bv519c2/2sg8+7m7fzLyZ7/3s7O6tuXznqWnR4qBCfQItmoWedEPQnmOl9VTt0I2QcXaAtn0N/una1r987G7v/nQC9Dm5kOZfjPScztB2gLZ9Lf7pmhcfPwyunXKA7SV4oHzeWLrZvfdg2QnQV+E/G/ESjtB2gLZ9Tf5x3b61o96lw37IQyr/ENTn5i4Fg58mAbYP8T8S8lOcoO0Abfua/MNcYe44f7oOxJGTx4bA29D+gCocYOD7gh/1Lh32w0SIToAc5FdxgrYDtO2XxD+ujXJgWzvngPetyj8ELwYwDWTE5KkTQ+BtaH+Azf5hU7hcn18wnecvzMv1tYFjrrYo0B76udo2xb6mwPzpd1hLaD3YhvdNlbev35idre9m89vXgWOutijQHvq52qIUnQAuB/zb3umDCh6TdEAJAXCQBQKYfodgDgU0tuF9XVJ0AoTk6pnVfYxSfAk4DtLbGhx6tfLELNy+JTIejAPjwbgiA0pKiRdhdB9q22fOz645YWtf9QIsZB+F2kWRsl8y/1WRyj/s2217/apw7f8bcQ3AZervUi29hCzMdfoIHWuy4FlAQoqt/iCjqkJVsp9WAV/lPTvxqH/LET59ldjUeA4QqvwckvZL4z8VdfiXOAP47I/ECSmLtzkBZX+7Y2b7CQCfrgBMJT/GfkwC1rVfEv+hbahk8EslQch+difUWbzNCZRwQx55DziilxAS5A/ZJ4nmSsAc9kvinya7DaCXCv66SRBjP6sTJBY/4AQSaFh94TivwtBOinyX/VACStsvgX++ThewbQ779AGZ7cEXXvDG2s9GvqQTzN4dCRrk/UqzF2jwyXUpdx6q2ncloLT9EvkPnQWk+cfgnjw63T19/Er34vTiEOA46H1PfisnQB3yJZyA5NuCvL/V2INNJ+EEbful8h/cBgnyHwp8XyKE7Htvg75bvd/16WMldZz3z5aBRNNZ+Tyku3B+xvsbBPpBfxgnh/2piRmztdvpf+awXzL/MSLBfy+Izc7GnyT70A/6++w7E0CK/NTxkHyf0AD0SYoTYuxj0NuCv659bf5dsrH5qZY+VjD4JcSXBI17EEYlNgAlhTv47rUPXn1TxVcAYI0u2KTOWYDLr98/aumHJNe+s85+1JC/4+L+E/egMbfh6P6cjmMS/g5N7dM5+EDbp9jX5p9zILH+2LXTfT+98EXA/j4E2p6OY5tDkQ5A8gf+W84ItRHPHcbHqJoAWvZL4d+WAKEk4G1TCxC91UmTAIPZFvg8YfgYjUsABNxmpN/xNw8+quP96pwBRm2/FP59BYAHuk1XpwDRyg1veNHv+JsHP9XxfpUSIJcTYk+BNifw1xB5cHEd/V3n36Ba9jX5jy0APPilCoDtLMBfg+TBzXX0t+926MicUMX5lARD3s3lcL2fS4FjNNG+Jv/aBYDyb3vqy98DdrUJ8Z/dESmOdxHBnWIDkl0n8Eqzr8W/dgGw8e/6GwSv9rF2szhDwukxZLgwzvY1+NcuADn5z+aoFuMJ7QIgvh7tCbRooQn1CbRooQn1CbRooYn/vJNorv8/DvQAAAAASUVORK5CYII=", 6, 16,16)
//}

#define step
//{ more active scorpions
with Scorpion if GameCont.area != "scorpionboss" and alarm1 > 2 alarm1 -= choose(1,0)
//}
//{ jumping maggots
with Maggot if distance_to_object(Player)<200{
	if random(80)<1{
		with instance_create(x,y,FiredMaggot){
			jumper = 1
			sound_play(sndMaggotBite)
			direction = other.direction + random_range(-20,20)
			hitid = other.hitid
			speed = random_range(6,8)
			my_health = 1
			creator = other
			if "burning" in other
				burning = other.burning
			kills = 1
			}
		instance_delete(id)
		}
	if instance_exists(self) and place_meeting(x,y,BigRad){
		with instance_create(x,y,RadMaggot)
			kills = 0
		instance_change(Wind,1)
		instance_destroy()
		}
	}
with instances_matching(Maggot,"kills",0)
	kills = 1
//}
//{ enemy bullet2 can become radmaggot
with instances_matching_ne(EnemyBullet2,"maggot",1){
	if random(20)<1{
		with instance_create(x,y,RadMaggot){
			direction = other.direction
			speed = other.speed
			kills = 0
			}
		instance_destroy()
		}
	else maggot = 1
	}
//}
//{ bigbandit aims
with BanditBoss{
	if ammo > 0{
	ammo += 1
	if target > 0
	gunangle = point_direction(x,y,target.x,target.y)
	}
	if ammo > 50
		ammo = 0
	}
//}
//{ rats become green rats on death
with Rat if "infected" not in self{
	infected = 1
	my_health += 6
	}
with instances_matching(Rat,"infected",1){
	if my_health < 6{
		var og = self;
		with instance_create(x,y,FastRat){
			var new = self;
			direction = other.direction
			speed = other.speed
			walk = other.walk
			sprite_index = spr_hurt
			sound_play(snd_dead)
			image_index = 0
			if "burning" in other
				burning = other.burning
			with BoltStick if target = og{
				if sprite_index != sprSeeker
				with new{ 
					with instance_create(x,y,Corpse){
						sprite_index = sprFastRatDead
						direction = og.direction
						speed = og.speed
						sound_play(other.snd_dead)
						}
					instance_destroy()
					}
				}
				
			}
		
		instance_delete(id)
		}
	}
with instances_matching(Corpse,"sprite_index",sprRatDead){
	with instance_create(x,y,FastRat){
		direction = other.direction
		speed = 2
		walk = 25
		if "burning" in other
			burning = other.burning
		}
	instance_destroy()
	}
//}
//{ Purple FireBaller contactdamage
with instances_matching(FireBaller,"canmelee",0){
	canmelee = 1
	meleedamage = 1
	}
//}
//{ fireballs have flame trails
with FireBall{
	if random(3)<1
	with instance_create(x,y,TrapFire){
		team = other.team
		creator = other.creator
		depth = other.depth + choose(-0.1,0.1)
		direction = other.direction
		//image_angle = direction
		hitid=other.hitid
		image_index += 3
		}
	}
//}
//{ toxic frog nerf
with SuperFrog{	
		if "changeback" not in self
			changeback = 100
		if changeback>0
			changeback -= 1
		else{
			with instance_create(x,y,Exploder)
				if "burning" in other
					burning = other.burning
			instance_delete(id)
			}
		}	
//}
//{ enemy rockets spawn flame trails
with JockRocket
	if random(2)<1 and speed > 1
	with instance_create(x,y,TrapFire){
		motion_add(other.direction+180,other.speed/2)
		team = other.team
		creator = other.creator
		depth = other.depth + choose(-0.1,0.1)
		direction = other.direction
		image_angle = direction
		image_yscale = 0.5
		image_speed = 0.4
		}
//}
//{ big crystal portals
with instances_matching(CustomEnemy,"name","bigcrystal"){
		if instance_number(enemy)==array_length_1d(instances_matching(CustomEnemy,"name","bigcrystal"))
		and instance_exists(Player) and instance_exists(Corpse) and !instance_exists(Spiral){
			var nc_ = instance_nearest(mouse_x,mouse_y,Corpse)
			wait 30
			if !instance_exists(Portal) and instance_exists(self)
			instance_create(nc_.x,nc_.y,Portal)
			}
		}
//}		
//{ change bullet types
with BigGuardianBullet{
	typ = 1
	team = 1
	}

with Throne2Ball{
	typ = 1
	team = 1
	friction = 0.1
	if speed <= 0.4
		typ = 2
	}	
//}
//{ spawn more grunts	
with instances_matching_ne(Grunt,"more",1){
		more=1
		if random(2)<1
		repeat(random(GameCont.loops+1))
		with instance_create(x,y,Grunt){
			more=1
			direction = other.direction+random_range(-45,45)
			}
		} //}
//{ ravenfly
with instances_matching(RavenFly,"sprite_index",sprRavenLand){ 
	if ("count" not in self || count == -1)
		count = 32
	if count > 0
		count -= 1
	}
with instances_matching(RavenFly,"count",0){
	count = -1
	with instance_create(x,y,PortalClear){
		image_xscale = 0.5
		image_yscale = 0.5
		}
	}
with instances_matching(RavenFly,"sprite_index",sprRavenLift) if ("count" in self)
	count = 32
	
with instances_matching_lt(RavenFly,"image_alpha",1)
	image_alpha += 0.05
with instances_matching_lt(Raven,"image_alpha",1)
	image_alpha += 0.05	
	
with RavenFly
	if place_meeting(x,y,Floor)
		spr_shadow = shd24
	else
		spr_shadow = mskNone
with Raven
	if place_meeting(x,y,Floor)
		spr_shadow = shd24
	else
		spr_shadow = mskNone
//}
//{ assassin ravens
with instances_matching(Raven,"assassin",1){
	alarm2 = -1
	gunangle = 90+(16*right)
	nofly = 100
	//trace("sneeky")
	if distance_to_object(Player)<72{
		with instance_create(x,y,MeleeBandit){
			walk = 25
			feathers = 60
			}
		repeat(32)
			with instance_create(x,y,Feather){
				motion_add(random(360),random_range(0,1))
				sprite_index = sprRavenFeather
				depth = other.depth + choose(-0.1,0.1)
				}
		repeat(16)
			with instance_create(x,y,Feather){
				motion_add(random_range(0,180),random_range(0,2))
				sprite_index = sprRavenFeather
				depth = other.depth + choose(-0.1,0.1)
				}
		with instance_create(x,y,Debris){
				motion_add(random_range(0,180),1)
				sprite_index = sprBone
				depth = other.depth + choose(-0.1,0.1)
				}
		instance_delete(self)
		}
	}
with instances_matching_gt(MeleeBandit,"feathers",0){	
	if random(3)<1
	with instance_create(x,y,Feather){
		motion_add(random_range(0,180),random_range(0,1))
		sprite_index = sprRavenFeather
		depth = other.depth + choose(-0.1,0.1)
		}
	feathers -= 1
	}
//}
//{ sniper cowboys
with instances_matching(enemy,"object_index",Salamander,Scorpion,GoldScorpion,Wolf){
		if ("rider"not in self)
			rider = 0
		if rider > 0 and !instance_exists(rider)
			rider = 0
		if object_index = Wolf and rider > 0
			spr_fire = spr_walk
		}
	with Sniper{
		if ("mount" not in self)
			mount = 0
		
		if mount > 0{
			if instance_exists(mount){
				canfly = 1
				walk = 0
				depth = mount.depth - 0.1
				mask_index = mskNone
				x=mount.x+mount.hspeed
				y=mount.y+mount.vspeed-12
				mount.alarm2 = 0
				if mount.speed > 2
				mount.speed = 2
				}
			else{
				canfly = 0
				y+=2
				sprite_index = spr_hurt
				if fork(){
					wait 10
					if instance_exists(self){
						mount = 0
						mask_index = mskBandit
						with Wall if place_meeting(x,y,other){
							instance_create(x, y, FloorExplo);
							instance_destroy();
							}
						repeat 3
						with instance_create(x,y,Dust)
						motion_add(random(360),2)
						}
					exit;
					}
				}
			}
		else
			with instances_matching(enemy,"rider",0) if place_meeting(x,y,other){
				other.mount = self
				rider = other
				}
		}
//}
//{ sleeping crystals
if !mod_variable_exists("mod","platformer","gce")
with instances_matching([LaserCrystal,LightningCrystal],"sleep",1)
	if my_health = maxhealth
		friction = 2
		else 
		friction = 0.4
//}
//{ hyper crystal
with instances_matching_ne(HyperCrystal,"crystalset",1){
	cnumber = 0 
	cnumber = 3+GameCont.loops
	newcnumber = cnumber
	crystalset = 1
	}
with HyperCrystal{
	with LaserCrystal if y < other.y
		depth = other.depth+0.1
		else
		depth = other.depth-0.1
	
	if my_health < maxhealth/2 and wantdist != 25 and "hlfhp" not in self{
		wantdist = 25
		//fastspin = 1
		alarm1 = 1
		repeat 2 + GameCont.loops
		with instance_create(x,y,HyperCrystal){
			intro = 1
			maxhealth = other.my_health/2
			my_health = other.my_health/2
			hlfhp = 1
			intro = -2
			newintro = -1
			motion_add(random(360),6)
			instance_create(x,y,PortalClear)
			}
		hlfhp = 1
		}
	if fastspin > 0
	image_speed += 0.05
	else
	if image_speed > 0.4
	image_speed -= 0.05
	}

with HyperCrystal if instance_exists(Player){	
	var pl_ = instance_nearest(x,y,Player);
	if collision_line(x,y,pl_.x,pl_.y,Wall,0,0){
		with instances_matching_le(LaserCrystal,"alarm4",-1) if distance_to_object(other)<200 and random(100)<1
			alarm4 += 60
		}
	else
		with instances_matching_ne(LaserCrystal,"alarm4",-1){
			alarm4 = -1
			image_speed = 0.4
						}
	with instances_matching_ne(LaserCrystal,"alarm4",-1){
		with instance_create(x+random_range(-16,16),y+random_range(-16,16),CaveSparkle){
			sprite_index = sprLaserCharge
			motion_add(point_direction(x,y,other.x,other.y),2)
			depth = other.depth+choose(-1,1)
			}
		image_speed += 0.03
		other.alarm1 = 1
		}
	if GameCont.area = "cavesinv" and random(1000)<1
		fastspin += 50
	}
//}
//{ smoking gators by yokin
with(Gator){
	if("smoking" not in self){
		spr_idle = sprGatorIdleSmoke;
		smoking = 120;
		smokealarm = 30 + random(90);
		alert = 0;
	}
	else{
		if(smoking > 0){
			 // Disable Normal Mechanics:
			walk = 0;
			alarm1 = 10;

			 // Gun On Back:
			gunangle = 90 + (25 * right);
			
			 // Smoke Cigar:
			if(smokealarm <= 0){
				spr_idle = sprGatorSmoke;
				image_index = 0;
				smokealarm = 90 + random(120);
			}
			else{
				smokealarm -= 1;
				if(spr_idle = sprGatorSmoke && image_index >= image_number - image_speed){
					spr_idle = sprGatorIdleSmoke;
				}
			}

			 // Notice Player:
			if(distance_to_object(target) < 150){
				if(target.reload > 0){
					alert += 90 / distance_to_object(target);
				}
				if(target.race = "steroids" && target.breload > 0){
					alert += 90 / distance_to_object(target);
				}
				if(!collision_line(x,y,target.x,target.y,Wall,0,0)){
					if(target.speed > 0) alert += 75 / (target.speed * distance_to_object(target));
					if(point_direction(x, y, target.x, target.y) > 90 && point_direction(x, y, target.x, target.y) < 270){
						if(right = -1) alert += 150 / distance_to_object(target);
						else if(smoking < 60){
							right = -1;
							gunangle = point_direction(x,y,target.x,target.y);
						}
					}
					else{
						if(right = 1) alert += 150 / distance_to_object(target);
						else if(smoking < 60){
							right = 1;
							gunangle = point_direction(x,y,target.x,target.y);
						}
					}
				}
				else{
					if(target.speed > 0) alert += (target.speed / 4);
				}
			}
			if(my_health < maxhealth) alert += 120;
			if(alert != 0){
				smoking -= alert;
				alert = 0;
			}
			
			 // Gator Time:
			if(smoking <= 0){
				instance_create(x,y,AssassinNotice);
				spr_idle = sprGatorIdle;
				gunangle = point_direction(x, y, target.x, target.y);
				if(point_direction(x, y, target.x, target.y) < 90 || point_direction(x, y, target.x, target.y) > 270) right = 1;
				else right = -1;

				 // Spittin' Cigars:
				with instance_create(x + (2 * right),y + 2,Shell){
					sprite_index = sprCigarette;
					motion_add((90 - (90 * other.right)) + random_range(-10,10), 2.5 + random(0.5));
					image_angle = direction;
				}

				 // Loadin' Up:
				with instance_create(x,y,Shell){
					motion_add(other.gunangle + other.right*100 + random_range(-10,10),2+random(2));
					sprite_index = sprShotShell;
				}
				sound_play(sndShotReload);
				wkick = 3;
			}
		}
	}
}
//}
//{ new Flames
if mod_variable_exists("mod","options","flames") and mod_variable_get("mod","options","flames") == "1"
with instances_matching(Flame,"captainflameshell",null){
	Flame_create(x,y)
	instance_delete(id)
	}
	
with instances_matching_gt(hitme,"burning",0) if mask_index != mskNone{
	//trace(burning,my_health)
	burning -= 1/max(size,1)
	image_blend = merge_color(c_white, c_black, max(0,min(burning/20,0.75)))
	if random(3)<1{
		if "my_health" in self my_health -= 1
		sound_play(sndBurn)
		//sound_play(snd_hurt)
		with instance_create(x+random_range(2*size,-2*size),y+random_range(2*size,-2*size),Dust){
			sprite_index = sprTrapFire
			depth = other.depth-1
			motion_add(random(180),random(4))
			}
		}
	if burning > 24 and "my_health" in self{ 
		my_health -= 1; 
		burning -= 1
		instance_create(x,y,CaveSparkle)
		}
	if "walk" in self and walk <= 0{
		walk += 2
		direction+=random_range(-60,60)
		}
	}
with instances_matching_le(hitme,"burning",0) if image_blend != c_white{
	image_blend = c_white
	}
//}
//{ van code
with Van{
	with instance_create(x,y,CustomObject){
		name = "3dvan"
		image_alpha = 0;
		if instance_exists(Player)
		target = instance_nearest(x,y,Player)
		else target = instance_nearest(x,y,Floor)
		if(target.x > x)
			right = 1
		else 
			right = -1
		direction = 90 - (90 * right)
		image_angle = direction
		drivespeed = 15
		depth = other.depth
		start = 20
		zscale = 1
		land = 10
		sprite_index = global.sprVan
		maxspeed = other.drivespeed
		on_draw = script_ref_create(vandraw)
		on_step = script_ref_create(vanguide)
		on_destroy = script_ref_create(vanexplo)
		
		baby = 0
		image_speed = 0.4
		with instance_create(x,y,CustomEnemy){
			mama = other
			other.baby = id
			hitid = [sprVanDrive,"VAN"]
			team = 3
			maxhealth = 250
			my_health = 250
			image_alpha = 0;
			friction = 10
			canfly = 1
			sprite_index = global.sprVan
			image_speed = 0
			meleedamage = 10
			}
		//alarm0 += choose(0,1,1) //round(1.5 * alarm0)
		spr_shadow = mskNone
	}
	instance_delete(id)
}

//}
//{ forced boss intros
//BB and BD are in maincode :stress:
with instances_matching(enemy,"object_index",OasisBoss,HyperCrystal,LilHunter,Nothing,FrogQueen,TechnoMancer) if "newintro" not in self{
	intro = -2
	newintro = 0
	}
with instances_matching(enemy,"newintro",0) if instance_exists(Player){
	var pl_ = instance_nearest(x,y,Player);
	if collision_line(x,y,pl_.x,pl_.y,Wall,0,0) < 0
	newintro = 1
	}

with BanditBoss if mod_variable_exists("mod","options","bossoutros") and mod_variable_get("mod","options","bossoutros") == "1"{
	script_bind_end_step(banditbossoutro,1,x,y)
	}			
	
with instances_matching(BanditBoss,"newintro",1){
	newintro = -1
	sound_play_music(musBoss1)
	maxhealth += (maxhealth/2)*instance_number(Player)
	maxhealth += (maxhealth/2)*GameCont.loops
	my_health = maxhealth	
	var i2 = 0
	with instances_matching(CustomObject,"name","bossintro")
		i2+=1					
	if i2 = 0{
		if mod_variable_get("mod","options","intropan") == "1"{
			if UberCont.opt_bossintros == 1
				mod_script_call("mod", "bossintros", "boss_trigger", "BIG BANDIT", sprBossIntroBackLayer,sprBossIntro,mskNone,self,60)
			else
				mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,60)
			}else
		if UberCont.opt_bossintros == 1
			mod_script_call("mod", "bossintros", "boss_trigger", "BIG BANDIT", sprBossIntroBackLayer,sprBossIntro,mskNone,instance_nearest(x,y,Player),0)
		}	
	}
	
with instances_matching(OasisBoss,"newintro",1){
	if target.object_index = Player && collision_line(x,y,target.x,target.y,Wall,0,0) < 0{
		newintro = -1
		maxhealth += ((50*instance_number(Player))*(GameCont.loops+1))
		my_health = maxhealth
		var name = "BIG BUBBLER"
		if mod_variable_exists("mod","options","intropan") and mod_variable_get("mod","options","intropan") == "1"{
			if UberCont.opt_bossintros == 1{
					mod_script_call("mod", "bossintros", "boss_trigger",name,mskNone,global.BigFishportrait,global.BigFishportraitfg,self,60)
					}else
					mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,60)
				}
			else if UberCont.opt_bossintros == 1{
				mod_script_call("mod", "bossintros", "boss_trigger",name,mskNone,global.BigFishportrait,global.BigFishportraitfg,instance_nearest(x,y,Player),0)
					}
			}
		sound_play_music(musBoss3)
	}
	
with instances_matching(HyperCrystal,"newintro",1){
	newintro = -1
	sound_play_music(musBoss6)
	maxhealth += (maxhealth/2)*instance_number(Player)
	maxhealth += (maxhealth/2)*GameCont.loops
	my_health = maxhealth	
	if mod_variable_get("mod","options","intropan") == "1"{
		if UberCont.opt_bossintros == 1
			mod_script_call("mod", "bossintros", "boss_trigger", "HYPER CRYSTAL", global.HyperCrystalportrait,global.HyperCrystalportraitfg,mskNone,self,60)
		else
		mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,60)
	}else
		if UberCont.opt_bossintros == 1
			mod_script_call("mod", "bossintros", "boss_trigger", "HYPER CRYSTAL", global.HyperCrystalportrait,global.HyperCrystalportraitfg,mskNone,instance_nearest(x,y,Player),0)
	}
with instances_matching(LilHunter,"newintro",1){
	newintro = -1
	sound_play_music(musBoss3)
	maxhealth += ((50*instance_number(Player))*(GameCont.loops+1))
	my_health += ((50*instance_number(Player))*(GameCont.loops+1))			
	if mod_variable_get("mod","options","intropan") == "1"{
		if UberCont.opt_bossintros == 1
			mod_script_call("mod", "bossintros", "boss_trigger", "LIL HUNTER", global.LilHunterportrait,global.LilHunterportraitfg,mskNone,self,60)
		else
		mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,60)
	}else
		if UberCont.opt_bossintros == 1
			mod_script_call("mod", "bossintros", "boss_trigger", "LIL HUNTER", global.LilHunterportrait,global.LilHunterportraitfg,mskNone,instance_nearest(x,y,Player),0)
	}
with instances_matching(FrogQueen,"newintro",1){
	newintro = -1
						
	if mod_variable_get("mod","options","intropan") == "1"{
		if UberCont.opt_bossintros == 1
			mod_script_call("mod", "bossintros", "boss_trigger", "MOM", global.Momportrait,global.Momportraitfg,mskNone,self,60)
		else
		mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
	}else
		if UberCont.opt_bossintros == 1
			mod_script_call("mod", "bossintros", "boss_trigger", "MOM", global.Momportrait,global.Momportraitfg,mskNone,instance_nearest(x,y,Player),0)
	}
with instances_matching(Last,"newintro",1){
	newintro = -1
	sound_play_music(musBoss8)
	
	maxhealth += ((100*instance_number(Player))*(GameCont.loops))
	my_health += ((100*instance_number(Player))*(GameCont.loops))				
	if mod_variable_get("mod","options","intropan") == "1"
		if UberCont.opt_bossintros == 0
		mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
	}
with instances_matching_ne(Nothing,"newintro",-1){
	newintro = -1
	sound_play_music(musBoss4A)
						
	if mod_variable_get("mod","options","intropan") == "1"{
		if UberCont.opt_bossintros == 0
			mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
	}else
		if UberCont.opt_bossintros == 1
			mod_script_call("mod", "bossintros", "boss_trigger", "THE THRONE", mskNone,global.Throneportrait,mskNone,instance_nearest(x,y,Player),0)
	}

with instances_matching(Corpse,"sprite_index",sprOasisBossDead,sprFrogQueenDying,sprLilHunterDead,sprHyperCrystalDead,global.roguedead) if "music" not in self{
	music = 1
	sound_play(sndBossWin)
	sound_play_music(musBossDead)
	if mod_variable_exists("mod","options","bossoutros") and mod_variable_get("mod","options","bossoutros") == "1"
			mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
	}
with FrogQueenDie if "music"not in self{
	music = 1
	sound_play(sndBossWin)
	sound_play_music(musBossDead)
	if mod_variable_exists("mod","options","bossoutros") and mod_variable_get("mod","options","bossoutros") == "1"
			mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
	}
with LastDie if "music" not in self{
	music = 1
	sound_play(sndBossWin)
	sound_play_music(musBossDead)
	}
with LastExecute{
	GameCont.lastarea = 106
	instance_create(x,y,Portal)
	instance_change(Wind,0)
	instance_destroy()
	}
// }	
//{ bone fish shooting
with instances_matching_gt(BoneFish,"alarm2",0)
	alarm2 -= 1
with BoneFish{
	if "s_idle" in self and spr_idle != s_idle and image_index >= 2{
			spr_idle = s_idle
			spr_walk = s_idle
			}
	if instance_exists(self){//?????????
	if alarm2 == 0{
		alarm2 += choose(75,100,125)
		if "s_fire" in self{ 
			spr_idle = s_fire
			spr_walk = s_fire
			}
		with instance_create(x,y,EnemyBullet1){
			direction = other.direction
			team = other.team
			hitid= other.hitid
			image_angle=direction
			speed = 2
			}
		if instance_exists(Player)
			sound_play_pitchvol(sndFireballerFire,1,(game_width/4)/distance_to_object(Player))
			if fork(){
				repeat(12){
					if instance_exists(self) and !place_meeting(x+lengthdir_x(speed+1,direction+180),y+lengthdir_y(speed+1,direction+180),Wall){
							x=x+lengthdir_x(speed+1,direction+180);
							y=y+lengthdir_y(speed+1,direction+180)
							
							wait 1
							}
					}
				exit;
				}
			}		
		}
	}
//}

//:custom scripts:

//{ Bandit
#define elitebanditsleep_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	spr_idle = global.meleefake
	spr_hurt = sprBanditHurt
	spr_walk = sprBanditHurt
	spr_dead = sprBanditDead
	mask_index = mskBandit
	friction = 0.4
	snd_hurt = sndBanditHit
	image_index = random(5)
	size = 1
	corpse = 1
	raddrop = 0
	team = 1
	my_health = 5
	on_step = script_ref_create(elitebanditsleep_step)	
	return id
	}
#define elitebanditsleep_step
if(nexthurt > current_frame){
	if(sprite_index != spr_hurt){
		image_index = 0;
		with elitebandit_create(x,y,raddrop)
			hurtfor = my_health-5
		instance_change(Wind,1)
		instance_delete(id)
		}
	}
	else{
		sprite_index = spr_idle;
		}
if instance_exists(self){
if distance_to_object(AssassinNotice)<42{
	with elitebandit_create(x,y,raddrop)
			hurtfor = my_health-5
	instance_delete(id)
	}	
}	

if instance_exists(self){ 
	if (distance_to_object(prop)<6 ||distance_to_object(chestprop)<6||distance_to_object(MaggotSpawn)<6||distance_to_object(Wall)<6)
		motion_add(random(360),0.5)
		else
		speed = 0
	if instance_exists(Player){
		var p = instance_nearest(x,y,Player);
		if distance_to_object(p)<=200 and current_frame mod 10+irandom(10) = 0
			instance_create(x,y,Breath)
			
		if distance_to_object(p)<=76 and random(25)<1{
			elitebandit_create(x,y,raddrop)
			instance_change(Wind,1)
			instance_destroy()
			}
		}
	}

#define elitebandit_create(_x, _y,_rads)
if "hurtfor" not in self
	hurtfor = 0
with instance_create(_x, _y, CustomEnemy){
	hitid = [sprBanditIdle,"Bandit"]
	spr_idle = sprBanditIdle
	spr_walk = sprBanditWalk
	spr_hurt = sprBanditHurt
	spr_dead = sprBanditDead
	snd_hurt = sndBanditHit
	snd_dead = sndBanditDie
	direction = random(360)
	mask_index = mskBandit
	spr_shadow = shd24
	gunsprite = sprAllyGunTB
	team = 1
	maxhealth = 5
	my_health = maxhealth+other.hurtfor
	canmelee = 0
	target = 0
	targetvisible = 0
	alrm1 = 100 //fire
	active = 0
	gunangle = random(360)
	alrm0 = -50 //walk
	raddrop = 2+_rads
	alrm2 = 0 //alarmed
	on_draw = script_ref_create(drawenemygun)
	on_step = script_ref_create(elitebandit_step)
	on_death = script_ref_create(elitebandit_destroy)
	return id;
	}
#define elitebandit_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	var p = instance_nearest(x,y,Player)
	alrm1 -= 1
	if target.x > x
		right = 1
	else
		right = -1
	}


if alrm2 == 0 && target > 0 and !collision_line(x,y,target.x,target.y,Wall,0,0) && collision_circle(x,y,100,target,0,0){
	instance_create(x,y,AssassinNotice)
	alrm2 = 20
	alrm0 += 20
	alrm1 -= 15
	direction = point_direction(x,y,target.x,target.y)
	gunangle = direction
	sound_play_pitch(sndSwapMachinegun,0.8)
	}
if alrm2 > 0 && target > 0 and collision_line(x,y,target.x,target.y,Wall,0,0){
	alrm2 -= 1
	}

if alrm1 > 0{
	alrm1 -= 1
	}

if targetvisible == 1 and alrm0 != -1 && random(10)>9{
	direction = point_direction(x,y,target.x,target.y)
	alrm0 = 75
	}
if alrm0 > 0{
	alrm0 -= 1
	motion_add(direction, 0.8)
	}
if speed > 3.5 and alrm2 <= 0{
	speed = 3.0
	}
if speed > 4.5{
	speed = 4.0
	}

if targetvisible == 0 and alrm0 != -1 and (random(50) < 1){
	direction = random(360)
	alrm0 = 20+random(5)
	}
if alrm1 <= 0 and alrm0 != -1  and targetvisible == 1{
	gunangle = point_direction(x,y,target.x,target.y)
	direction = gunangle
	alrm0 = 4
	if distance_to_object(target) < 75{
		alrm1 = 65 + random(5)
		gunangle = point_direction(x,y,target.x,target.y)
		wait 4
		repeat(4)if instance_exists(self){
			with instance_create((x+lengthdir_x(4, gunangle)),(y+lengthdir_y(4, gunangle)),EnemyBullet3){
				sound_play(sndEnemyFire)
				hitid = [sprBanditIdle,"Bandit"]
				damage = 1
				speed = 14
				wallbounce = 1
				team = other.team
				direction = other.gunangle+random_range(-10,10)
				creator = other
				image_angle = direction
				}
			speed = 0
			wkick = 5
			wait 7
			}
		}
	}
#define elitebandit_destroy
scrPickups(8);
//}

//{ Mice
#define undeadmice
if !instance_exists(argument0){
	with instance_create(argument1,argument2,FastRat){
		direction = argument3
		speed = 2
		walk = 25
		}
	}
instance_destroy()
//}
//{ GatorSwim
#define gatorswim_create(_x, _y, _d, _h)
with instance_create(_x, _y, CustomEnemy){
	gator = 1
	hitid = [sprGatorIdle,"GATOT"]
	spr_side = global.gatorswimside
	spr_front = global.gatorswimfront
	spr_back = global.gatorswimback
	direction = _d
	mask_index = mskBandit
	spr_shadow = mskNone
	my_health = _h
	size = 1
	team = 1
	canmelee = 1
	meleedamage = 3
	target = 0
	targetvisible = 0
	fire = 100
	walk = 0
	raddrop = 16
	on_step = script_ref_create(gatorswim_step)
	return id;
	}

#define gatorswim_step
if direction = 0{sprite_index = spr_side;image_xscale = 1}
else if direction = 180{sprite_index = spr_side;image_xscale = -1}
else if direction = 90 sprite_index = spr_back
else if direction = 270 sprite_index = spr_front
	
motion_add(direction, 0.8)

if speed > 6 speed = 6

if direction < 45 || direction >= 315 direction = 0
else if direction >= 45 and direction < 135 direction = 90
else if direction >= 135 and direction < 225 direction = 180
else if direction >= 225 and direction < 315 direction = 270
	
if random(30)<1 direction += choose(90,-90)
if place_meeting(x+hspeed,y+vspeed,Floor) and !place_meeting(x+hspeed,y+vspeed,CustomObject){
	with instance_create(x,y,Gator) my_health = other.my_health
	instance_destroy()
	}
//}

//{ LittleDog
#define littledog_create(_x,_y)
with instance_create(_x,_y,CustomEnemy){
	name = "littledog"
	on_step =  script_ref_create(littledog_step)
	on_destroy = script_ref_create(littledog_destroy)
	hitid = [global.littledogwalk,"little dog"]
	spr_idle = global.littledogwalk
	spr_walk = global.littledogwalk
	spr_hurt = global.littledoghurt
	spr_dead = global.littledogdead
	snd_hurt = sndBigDogHit
	maxhealth = 10
	size = 1
	team = 1
	mask_index = mskBandit
	direction = random(360)
	spr_shadow = shd24
	canmelee = 1
	meleedamage = 3
	target = 0
	raddrop = 10
	return id;
	}
#define littledog_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;
			}
		}
	else{
		sprite_index = spr_idle;
		}
if(instance_exists(Player)){
	target = instance_nearest(x,y,Player);
	}
	else{
	target = 0;
	}


if target > 0{
	if target.x > x{
		image_xscale = 1
		}
	else{
		image_xscale = -1
		}
	if random(50)<1
		motion_add(direction+choose(-90,90),3)
	if speed > random(6)
		speed = 3
	motion_add(point_direction(x,y,target.x,target.y),1)
	}
	
#define littledog_destroy
with instance_create(x,y,Explosion)
	hitid = [global.littledogwalk,"little dog"]
sound_play(sndExplosion)
//}
//{ BATTLE SALAMANDER
#define goldsalamander_create(_x,_y)
with instance_create(_x,_y,CustomEnemy){
	name = "goldsalamander"
	team = 1
	hitid = [global.goldsalamanderidle,"golden salamander"]
	spr_idle = global.goldsalamanderidle
	spr_walk = global.goldsalamanderwalk
	spr_hurt = global.goldsalamanderhurt
	spr_dead = global.goldsalamanderdead
	snd_hurt = sndSalamanderHurt
	snd_dead = sndSalamanderDead
	on_death = goldsalamander_death
	maxhealth = 40 + (10*instance_number(Player))
	direction = random(360)
	spr_shadow = shd64
	size = 2
	mask_index = mskScrapBoss
	friction = 0.8
	canmelee = 1
	meleedamage = 2
	target = 0
	targetvisible = 0
	fire = 150
	walk = 0
	raddrop = 20
	charging = 0
	gunangle = random(360)
	return id;
	}
#define goldsalamander_step
if(nexthurt > current_frame){
	if(sprite_index != spr_hurt) {
		image_index = 0;
		sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction)
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
			}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
else 
	target = 0;
	
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0){
	targetvisible = 1;
	gunangle = point_direction(x,y,target.x,target.y)
	}
else
	targetvisible = 0;	
	
if(target > 0){
	if(targetvisible){
		var p = instance_nearest(x,y,Player)
		fire -= 1
		if(target.x > x)
			image_xscale = 1
		else
			image_xscale = -1
		}
	}

if fire > 0
	fire -= 1
if fire <= 0 and charging = 0 and targetvisible{
	sound_play(sndSalamanderCharge)
	charging = 1
	fire = 300
	}
if charging >= 1{
	sound_loop(sndSalamanderCharge)
	walk = 0
	speed = 0
	spr_idle = global.goldsalamandercharging
	sprite_index = spr_idle
	charging += 2.5
	if image_index > 6
		image_index = 6
	with instance_create(x+(30*right)+random_range(-60+(charging/5),60-(charging/5)),y+random_range(-60+(charging/5),60-(charging/5)),Dust){
		motion_set(point_direction(x,y,other.x+(30*other.right),other.y)+15,3+(other.charging/50))
		sprite_index = sprSmoke
		image_xscale = other.charging/100
		image_yscale = image_xscale
		}
	if charging >= 100{
		sound_stop(sndSalamanderCharge)
		var dir = -50
			if fork(){
				repeat 5 if instance_exists(self){
					with instance_create(x,y,Flare){
						sound_play(sndSalamanderFire)
						move_contact_solid(other.gunangle, 6);
						motion_add(other.gunangle + dir + (random_range(-8, 8)), random_range(6,9));
						image_angle = direction;
						hitid = [global.goldsalamanderidle,"golden salamander"];
						team = other.team;
						creator = other;
						}
					dir += 20
					wait 1
					}
				}
		charging = 0
		spr_idle = global.goldsalamanderidle
		walk = 25
		}
	}
if targetvisible == 1 and charging <= 0 and random(10)>9{
	direction = gunangle
	walk = 25
	}
if walk > 0 and charging <= 0{
	walk -= 1
	motion_add(direction, 0.8)
	}
if speed > 2.5
	speed = 2

if targetvisible == 0 and charging<=0 and (random(50)<1){
	direction = random(360)
	walk = 25+random(10)
	}
#define goldsalamander_death
sound_stop(sndSalamanderCharge)
//}
//{ Fire Projectiles
#define Flame_create(_x,_y)
with instance_create(_x,_y,CustomProjectile){
		name="Flame"
		flame = 1
		deflected=other.deflected
		damage = 0
		creator = other.creator
		hitid=other.hitid
		force = other.force
		team = other.team
		typ = 0
		depth = -2
		image_speed = other.image_speed
		friction = other.friction
		image_angle = other.image_angle
		sprite_index=sprTrapFire
		direction=other.direction
		speed=other.speed
		on_wall = script_ref_create(Flame_wall)
		on_hit = script_ref_create(Flame_hit)
		on_destroy = script_ref_create(Flame_dead)
		on_step = script_ref_create(Flame_step)
		return id;
		}
#define Flame_step
direction += random(6)-3
if random(16)<1 with instance_create(x,y,Dust){
			sprite_index = sprGroundFlame
			depth = other.depth+1
			friction = 1
			image_angle = 0
			}
if (image_index + image_speed >= image_number) instance_destroy()

#define Flame_wall
move_bounce_solid(false)
speed *= 0.3
#define Flame_hit	
with instance_nearest(x,y,hitme)if team!=other.team and my_health > 0{
	if "burning" not in self
		burning = 1
	else if burning < 32
		burning += 0.3
	with other{
		motion_set(point_direction(x,y,other.x,other.y),speed)
		speed *= 0.8
		}
	}
#define Flame_dead
if random(3)<1
with instance_create(x,y,Smoke){
	image_xscale = random_range(0.5,1)
	image_yscale = image_xscale
	}
//}
//{ BigJungleBandit spawner
#define wantjungleboss_create(_x,_y)
with instance_create(_x,_y,CustomObject){
	enemies = instance_number(enemy)+random_range(-3,3)
	name = "wantjungleboss"
	on_step = wantjungleboss_step
	return id;
	}
#define  wantjungleboss_step
if instance_number(enemy) < (enemies/2) && instance_exists(Player){
	var p = instance_nearest(x,y,Player);
	var f = instance_nearest(p.x+random_range(-160,160),p.y+random_range(-160,160),Wall);
	if point_distance(f.x,f.y,p.x,p.y)<64{
		f = instance_nearest(p.x+random_range(-160,160),p.y+random_range(-160,160),Wall)
		}
	else{
		with instance_create(f.x+8, f.y + 8,BanditBoss){
			if fork(){
				var bx = f.x+8;
				var by = f.y+8;
				wait 10
				if instance_exists(self){
					repeat 5 + 3 * (GameCont.loops + 1)
					with instance_create(bx,by,JungleBandit)
						direction = point_direction(x,y,other.x,other.y)+random_range(-45,45)
						walk = 50
						motion_add(direction,6)
					}
				}
			}
		if instance_exists(self) instance_destroy()
		}
	}
//}

//{ Venuz spawner
#define VenuzSpawn_create(_x,_y,_name,_door)
with instance_create(_x, _y, CustomObject){
	Spawner = 1
	name=_name
	door = _door
	if name = "floor" {
		depth = -9
		sprite_index = global.VenuzTop
		if((GameCont.subarea >= 10 and GameCont.subarea < 100)|| GameCont.subarea >= 400)
			image_blend = make_color_rgb(238,240,242);
		else
			image_blend = background_color
		}
	return id;
	}
//}
//{ Prisoner
#define prisoner_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	name = "prisoner"
	hitid = [global.steroidsidle,"PRISONER"]
	spr_idle = global.prisoneridle
	spr_walk = global.prisonerwalk
	spr_hurt = global.prisonerhurt
	spr_dead = global.prisonerdead
	snd_hurt = sndMolefishHurt
	snd_dead = sndMolefishDead
	direction = random(360)
	gunangle = direction
	mask_index = mskBandit
	spr_shadow = shd24
	corpse = 1
	kills = 0
	size = 1
	team = 1
	maxhealth = 5
	my_health = maxhealth
	canmelee = 0
	target = 0
	targetvisible = 0
	walk = -1
	raddrop = 0
	on_step = script_ref_create(prisoner_step)
	return id;
	}

#define prisoner_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;
			with instance_create(x,y,BloodStreak){
				direction = other.direction
				}
			walk +=5
			}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}
	
if walk > 0{
	walk -= 1
	motion_add(direction, 0.8)
	if random(8)<1{
		sound_play_pitch(sndMolefishHurt,random_range(0.8,1.2))
		with instance_create(x,y,BloodStreak){
				direction = other.direction+random_range(-45,45)
				image_xscale = random_range(0.5,1)
				image_yscale = image_xscale
				}
		my_health -= 0.1
		}
	}
if speed > 4{
	speed = 4
	}

if (random(10) < 1) and walk != -1 {
	direction += random_range(-90,90)
	walk = 25+random(10)
	}
//}
//{ Molefish
#define Molefish_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	name = "Molefish"
	hitid = [sprMolefishIdle,"Molefish"]
	spr_idle = sprMolefishIdle
	spr_walk = sprMolefishWalk
	spr_hurt = sprMolefishHurt
	spr_dead = sprMolefishDead
	snd_hurt = sndMolefishHurt
	snd_dead = sndMolefishDead
	direction = random(360)
	mask_index = mskBandit
	spr_shadow = shd24
	gunsprite = sprMolefishGun
	team = 1
	maxhealth = 8
	my_health = 8
	canmelee = 0
	target = 0
	targetvisible = 0
	alrm1 = random_range(20,40) //fire
	active = 0
	gunangle = 90+(60*image_xscale)
	alrm0 = -50 //walk
	raddrop = 0
	weapondrop = "secretweapong1"
	corpse = 0
	alrm2 = -2 //alarmed
	wkick = 0
	if GameCont.area != "mansion"
	activated = 0
	else
	activated = 1
	on_draw = script_ref_create(drawenemygun)
	on_step = script_ref_create(Molefish_step)
	on_destroy = script_ref_create(DropWeapon)
	return id;
	}
#define Molefish_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;
			with instance_create(x,y,BloodStreak){
				direction = other.direction
				}
			}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if instance_exists(target) and current_frame mod 10 = 0 && !collision_line(x,y,target.x,target.y,Wall,0,0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	var p = instance_nearest(x,y,Player)
	alrm1 -= 1
	if target.x > x
		right = 1
	else
		right = -1
	}

if alrm1 <= 0 and targetvisible = 0
	alrm1 = 7

if alrm2 <= -2 && targetvisible{
	instance_create(x,y,AssassinNotice)
	alrm2 = 1
	direction = point_direction(x,y,target.x,target.y)
	gunangle = direction
	sound_play_pitch(sndMolefishHurt,1.2)
	}
if alrm1 > 0 && targetvisible{
	alrm1 -= 1
	}

if targetvisible and alrm0 != -1 && random(10)>9{
	//direction = point_direction(x,y,target.x,target.y)
	alrm0 = 25+random(10)
	}
if alrm0 > 0 and alrm2>-1{
	alrm0 -= 1
	motion_add(direction, 0.8)
	}
if speed > 4{
	speed = 3.5
	}

if !targetvisible and alrm0 != -1 and (random(50) < 1){
	direction = random(360)
	alrm0 = 25+random(10)
	}
if alrm1 <= 0 and alrm0 != -1 and targetvisible{
	gunangle = point_direction(x,y,target.x+hspeed,target.y+vspeed)+random_range(-20,20)
	alrm0 = 0
	var dist = 4;
	wkick += 5
	sound_play(sndMolefishFire);	// Fire Sound
		
		while(place_free(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle)))and !place_meeting(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle),Player)and !place_meeting(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle),CustomObject) and dist<(game_width*3){
			dist += 4;
			}
		with instance_create(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle), Bullet1){
			motion_add(other.gunangle, 10); 
			image_angle = direction; //sprite angle
			image_alpha = 0
			hitid = other.hitid;
			damage = 1
			force = 1
			team = other.team;
			creator = other;
		}
		with instance_create(x+lengthdir_x(dist/2, gunangle), y+lengthdir_y(dist/2, gunangle), Effect){
			name = "venuzpistoltrail"
			sprite_index = sprBoltTrail
			direction = other.gunangle
			image_angle = direction+90; //sprite angle
			creator = other;
			image_yscale *= dist
			image_xscale = random_range(0.5,1.5)
			image_alpha = random_range(0,1)
			motion_add(direction,random_range(0,1.5))
			}
	with instance_create(x+lengthdir_x(4, gunangle), y+lengthdir_y(4, gunangle),EBulletHit){
		sprite_index = sprScrapBossMissileTrail 
		image_angle = other.gunangle+180
		image_speed = 1
		}
	alrm1 += 60
	}
//}
//{ Molesarge
#define Molesarge_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	name = "Molesarge"
	hitid = [sprMolesargeIdle,"Molesarge"]
	spr_idle = sprMolesargeIdle
	spr_walk = sprMolesargeWalk
	spr_hurt = sprMolesargeHurt
	spr_dead = sprMolesargeDead
	snd_hurt = sndMolesargeHurt
	snd_dead = sndMolesargeDead
	direction = random(360)
	mask_index = mskBandit
	spr_shadow = shd24
	gunsprite = sprMolesargeGun
	team = 1
	maxhealth = 20
	my_health = 20
	canmelee = 0
	target = 0
	targetvisible = 0
	alrm1 = random(20) //fire
	active = 0
	gunangle = 90+(60*image_xscale)
	alrm0 = -50 //walk
	raddrop = 0
	weapondrop = "secretweapong2"
	corpse = 0
	alrm2 = -2 //alarmed
	wkick = 0
	if GameCont.area != "mansion"
	activated = 0
	else
	activated = 1
	on_draw = script_ref_create(drawenemygun)
	on_step = script_ref_create(Molesarge_step)
	on_destroy = script_ref_create(DropWeapon)
	return id;
	}
#define Molesarge_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;
			with instance_create(x,y,BloodStreak){
				direction = other.direction
				}
			}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if instance_exists(target) and current_frame mod 10 = 0 && !collision_line(x,y,target.x,target.y,Wall,0,0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	var p = instance_nearest(x,y,Player)
	alrm1 -= 1
	if target.x > x
		right = 1
	else
		right = -1
	}


if alrm2 <= -2 && targetvisible{
	instance_create(x,y,AssassinNotice)
	alrm2 = 1
	direction = point_direction(x,y,target.x,target.y)
	gunangle = direction
	sound_play_pitch(sndMolefishHurt,1.2)
	}
if alrm1 > 0 && targetvisible{
	alrm1 -= 1
	}

if targetvisible and alrm0 != -1 && random(10)>9{
	direction = point_direction(x,y,target.x,target.y)
	alrm0 = 25+random(10)
	}
if alrm0 > 0 and alrm2>-1{
	alrm0 -= 1
	motion_add(direction, 0.8)
	}
if speed > 4{
	speed = 3.5
	}

if !targetvisible and alrm0 != -1 and (random(50) < 1){
	direction = random(360)
	alrm0 = 25+random(10)
	}
if alrm1 <= 0 and alrm0 != -1 and targetvisible{
	gunangle = point_direction(x,y,target.x+hspeed,target.y+vspeed)+random_range(-20,20)
	alrm1 += 70
	direction = gunangle
	alrm0 += 10
	wait 3
	if fork(){
	if instance_exists(self){
	alrm0 = 0
	var dist = 4;
	wkick += 5
	sound_play(sndMolefishFire);	// Fire Sound
	
	var dir = -12
	repeat 6 if instance_exists(self){
	var dist = 4;		
		while(place_free(x+lengthdir_x(dist, gunangle+dir), y+lengthdir_y(dist, gunangle+dir)))and !place_meeting(x+lengthdir_x(dist, gunangle+dir), y+lengthdir_y(dist, gunangle+dir),enemy)and !place_meeting(x+lengthdir_x(dist, gunangle+dir), y+lengthdir_y(dist, gunangle+dir),CustomHitme)and !place_meeting(x+lengthdir_x(dist, gunangle+dir), y+lengthdir_y(dist, gunangle+dir),prop)and dist<(game_width*3){
			dist += 4;
			}
		with instance_create(x+lengthdir_x(dist, gunangle+dir), y+lengthdir_y(dist, gunangle+dir), AllyBullet){
			motion_add(other.gunangle+dir, 10); 
			image_angle = direction; //sprite angle
			image_alpha = 0
			hitid = other.hitid;
			if dist > 32
			damage = 1
			else
			damage = 2
			force = 1
			team = other.team;
			creator = other;
			}
		with instance_create(x+lengthdir_x(dist/2, gunangle+dir), y+lengthdir_y(dist/2, gunangle+dir), Effect){
			name = "venuzpistoltrail"
			sprite_index = sprBoltTrail
			direction = other.gunangle+dir
			image_angle = direction+90; //sprite angle
			creator = other;
			image_yscale *= dist
			image_xscale = random_range(0.5,1.5)
			image_alpha = random_range(0,1)
			motion_add(direction,random_range(0,1.5))
			}
	with instance_create(x+lengthdir_x(4+(dist*0), gunangle+dir), y+lengthdir_y(4+(dist*0), gunangle+dir),EBulletHit){
		sprite_index = sprScrapBossMissileTrail 
		image_angle = dir + other.gunangle+180
		image_speed = random_range(0.4,1.6)
		}
	dir += 4
	}
	}
	}
	exit;
	}
//}
//{ Minigunner
#define Minigunner_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	name = "Minigunner"
	hitid = [global.MinigunnerIdle,"Minigunner"]
	spr_idle = global.MinigunnerIdle
	spr_hurt = global.MinigunnerHurt
	spr_dead = global.MinigunnerDead
	spr_fire = global.MinigunnerFire
	snd_hurt = sndJockHurt
	snd_dead = sndJockDead
	direction = random(360)
	mask_index = mskBanditBoss
	spr_shadow = shd32
	team = 1
	maxhealth = 75
	my_health = 75
	canmelee = 0
	target = 0
	targetvisible = 0
	alrm1 = random(20) //fire
	active = 0
	gunangle = random(360)
	raddrop = 0
	weapondrop = "secretweapong3"
	corpse = 0
	friction = 10
	alrm2 = -2 //alarmed
	firing = 0 //firing
	wkick = 0
	if GameCont.area != "mansion"
	activated = 0
	else
	activated = 1
	on_step = script_ref_create(Minigunner_step)
	on_destroy = script_ref_create(DropWeapon)
	return id;
	}
#define Minigunner_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;
			with instance_create(x,y,BloodStreak){
				direction = other.direction
				}
			}
		}
	else{
		if firing <= 0
		sprite_index = spr_idle;
		else
		sprite_index = spr_fire;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if instance_exists(target) and current_frame mod 10 = 0 && !collision_line(x,y,target.x,target.y,Wall,0,0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	alrm1 -= 1
	
	}


if alrm2 <= -2 && targetvisible{
	instance_create(x,y,AssassinNotice)
	alrm2 = 1
	direction = point_direction(x,y,target.x,target.y)
	gunangle = direction
	sound_play_pitch(sndMolefishHurt,1.2)
	}
if alrm1 > 0 && targetvisible{
	alrm1 -= 1
	}

if speed > 4{
	speed = 3.5
	}
	
if alrm1 <= 0 and target > 0 and firing = 0{
	alrm1 = 200
	firing = 1
	if target.x > x
		image_xscale = 1
	else
		image_xscale = -1
	if fork(){
		instance_create(x,y,AssassinNotice)
		wait 60
		if instance_exists(self) and target > 0{
			var gang_ = point_direction(x,y,target.x+hspeed,target.y+vspeed)
			if target.x > x
				image_xscale = 1
			else
				image_xscale = -1
			}
		repeat(100)
		if instance_exists(self){
			gunangle = gang_+random_range(-20,20)
			var dist = 4;
			sound_play_pitchvol(sndMinigun,0.9,(game_width/4)/distance_to_object(Player));	// Fire Sound
				
				while(place_free(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle)))and !place_meeting(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle),Player)and !place_meeting(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle),CustomHitme) and dist<(game_width*3){
					dist += 4;
					}
				with instance_create(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle), Bullet1){
					motion_add(other.gunangle, 10); 
					image_angle = direction; //sprite angle
					image_alpha = 0
					hitid = other.hitid;
					damage = 1
					force = 1
					team = other.team;
					creator = other;
				}
				with instance_create(x+lengthdir_x(dist/2, gunangle), y+lengthdir_y(dist/2, gunangle), Effect){
					name = "venuzpistoltrail"
					sprite_index = sprBoltTrail
					direction = other.gunangle
					image_angle = direction+90; //sprite angle
					creator = other;
					image_yscale *= dist
					image_xscale = random_range(0.5,1.5)
					image_alpha = random_range(0,1)
					motion_add(direction,random_range(0,1.5))
					}
			with instance_create(x+lengthdir_x(4, gunangle), y+lengthdir_y(4, gunangle),EBulletHit){
				sprite_index = sprScrapBossMissileTrail 
				image_angle = other.gunangle+180
				image_speed = 1
				}
			wait 1
			}
		if instance_exists(self) firing = 0
		}
	}
//}
//{ Monster
#define Monster_create(_x,_y)
with instance_create(_x,_y,CustomEnemy){
	name = "littledog"
	on_step =  script_ref_create(Monster_step)
	hitid = [global.VenuzMonsterWalk,"Monster"]
	spr_idle = global.VenuzMonsterIdle
	spr_walk = global.VenuzMonsterWalk
	spr_hurt = global.VenuzMonsterHurt
	spr_dead = global.VenuzMonsterDead
	snd_hurt = sndBigDogHit
	maxhealth = 50
	size = 1
	team = 1
	mask_index = mskRhinoFreak
	direction = random(360)
	spr_shadow = shd48
	canmelee = 1
	meleedamage = 3
	target = 0
	raddrop = 0
	activated = 0
	return id;
	}
#define Monster_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;
			}
		}
	else{
		if speed > friction
		sprite_index = spr_walk;
		else
		sprite_index = spr_idle;
		}
if(instance_exists(Player)){
	target = instance_nearest(x,y,Player);
	}
	else{
	target = -1;
	}

if activated = 0 && target >= 0 && collision_line(x,y,target.x,target.y,Wall,0,0) < 0{
	activated = 1
	instance_create(x,y,AssassinNotice)
	}
if activated = 1 and target >= 0 {
	if target.x > x{
		image_xscale = 1
		}
	else{
		image_xscale = -1
		}
	if random(50)<1
		motion_add(direction+choose(-90,90),3)
	if speed > random(7)
		speed = 5
	motion_add(point_direction(x,y,target.x,target.y),1)
	}
//}
//{ Chick
#define Chick_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	name = "Chick"
	hitid = [global.VenuzChickIdle,"Chick"]
	spr_idle = global.VenuzChickIdle
	spr_walk = global.VenuzChickWalk
	spr_hurt = global.VenuzChickHurt
	spr_dead = global.VenuzChickDead
	snd_hurt = sndTurtleHurt
	snd_dead = sndTurtleDead1
	direction = random(360)
	mask_index = mskBandit
	spr_shadow = shd24
	gunsprite = sprSmg
	team = 1
	maxhealth = 14
	my_health = 14
	canmelee = 0
	target = 0
	targetvisible = 0
	alrm1 = random_range(20,40) //fire
	active = 0
	gunangle = 90+(60*image_xscale)
	alrm0 = -50 //walk
	raddrop = 0
	weapondrop = "secretweapong5"
	corpse = 0
	alrm2 = -2 //alarmed
	wkick = 0
	if GameCont.area != "mansion"
	activated = 0
	else
	activated = 1
	on_draw = script_ref_create(drawenemygun)
	on_step = script_ref_create(Chick_step)
	on_destroy = script_ref_create(DropWeapon)
	return id;
	}
#define Chick_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;
			with instance_create(x,y,BloodStreak){
				direction = other.direction
				}
			}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if instance_exists(target) and current_frame mod 10 = 0 && !collision_line(x,y,target.x,target.y,Wall,0,0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	var p = instance_nearest(x,y,Player)
	alrm1 -= 1
	if target.x > x
		right = 1
	else
		right = -1
	}

if alrm1 <= 0 and targetvisible = 0
	alrm1 = 16

if alrm2 <= -2 && targetvisible{
	instance_create(x,y,AssassinNotice)
	alrm2 = 1
	gunangle = point_direction(x,y,target.x,target.y)
	direction = random(360)
	sound_play_pitch(snd_hurt,1.2)
	}
if alrm1 > 0 && targetvisible{
	alrm1 -= 1
	}

if targetvisible and alrm0 != -1 && random(10)>9{
	//direction = point_direction(x,y,target.x,target.y)
	alrm0 = 25+random(10)
	}
if alrm0 > 0 and alrm2>-1{
	alrm0 -= 1
	motion_add(direction, 0.8)
	}
if speed > 4{
	speed = 3.5
	}

if !targetvisible and alrm0 != -1 and (random(50) < 1){
	direction = random(360)
	alrm0 = 25+random(10)
	}
if alrm1 <= 0 and alrm0 != -1 and targetvisible{
	if fork(){
	repeat 6{ 
		if instance_exists(self) and instance_exists(Player){
			gunangle = point_direction(x,y,target.x+hspeed,target.y+vspeed)+random_range(-20,20)
			alrm0 = 0
			var dist = 4;
			wkick = 3
			sound_play(sndMolefishFire);	// Fire Sound
				
				while(place_free(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle))and !place_meeting(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle),Player)and !place_meeting(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle),CustomObject) and dist<(game_width*3)){
					dist += 4;
					}
				if random(2)<1
				with instance_create(x+lengthdir_x(dist, gunangle), y+lengthdir_y(dist, gunangle), Bullet1){
					motion_add(other.gunangle, 10); 
					image_angle = direction; //sprite angle
					image_alpha = 0
					hitid = other.hitid;
					damage = 1
					force = 1
					team = other.team;
					creator = other;
				}
				with instance_create(x+lengthdir_x(dist/2, gunangle), y+lengthdir_y(dist/2, gunangle), Effect){
					name = "venuzpistoltrail"
					sprite_index = sprBoltTrail
					direction = other.gunangle
					image_angle = direction+90; //sprite angle
					creator = other;
					image_yscale *= dist
					image_xscale = random_range(0.5,1.5)
					image_alpha = random_range(0,1)
					motion_add(direction,random_range(0,1.5))
					}
			with instance_create(x+lengthdir_x(4, gunangle), y+lengthdir_y(4, gunangle),EBulletHit){
				sprite_index = sprScrapBossMissileTrail 
				image_angle = other.gunangle+180
				image_speed = 1
				}
			}
		wait 2
		}
		exit;
		}
	alrm1 += 60
	}
//}

//{ EliteSpider
#define EliteSpider_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [global.EliteSpiderIdle,"Big Spider"]
	spr_idle = global.EliteSpiderIdle
	spr_walk = global.EliteSpiderWalk
	spr_hurt = global.EliteSpiderHurt
	spr_dead = global.EliteSpiderDead
	snd_hurt = sndSpiderHurt
	snd_dead = sndSpiderDead
	direction = random(360)
	mask_index = mskScorpion
	spr_shadow = shd48
	size = 1
	team = 0
	maxhealth = 56
	canmelee = 1
	meleedamage=1
	target = 0
	targetvisible = 0
	alrm1 = 0 //shielding
	alrm0 = -50 //walking
	raddrop = 16
	on_step = script_ref_create(EliteSpider_step)
	return id;
	}
#define EliteSpider_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}
if spr_idle = global.EliteSpiderShieldOff and image_index >= 2
	spr_idle = global.EliteSpiderIdle
if spr_idle = global.EliteSpiderShield and image_alpha = 1 and image_index >= 8
	with instance_create(x,y,CustomObject){
		depth = other.depth -1
		team = other.team
		creator = other
		name = "customshield"
		other.mask_index=mskScrapBossMissile
		shieldwalk = 0
		time = 75
		image_xscale = other.image_xscale
		other.image_alpha = 0
		sprite_index = global.EliteSpiderShield
		image_index = 8
		image_speed = 0
		mask_index = global.bigcrystalmask
		on_step = script_ref_create(EliteSpiderShield_step)
		sound_play(sndCrystalShield)
		}	
if alrm1 > 0 
	alrm1-=1
	
if alrm0 > 0 and spr_idle = global.EliteSpiderIdle{
	alrm0 -= 1
	motion_add(direction, 0.8)
	}
if speed > 3.5{
	speed = 3.0
	}
if (random(40) < 1) and alrm1 < 25{
	direction = random(360)
	alrm0 = 20+random(5)
	}
if alrm1 <= 0 and targetvisible == 1 and random(40)<1{
	alrm0 = 0
	speed = 0
	alrm1 = 120
	spr_idle = global.EliteSpiderShield
	}
#define EliteSpiderShield_step
if image_speed = 0
with projectile if place_meeting(x,y,other){
	if typ =1{
		sound_play(sndCrystalRicochet)
		team = other.team
		hitid=[global.EliteSpiderIdle,"Big Spider"]
		direction = point_direction(other.x,other.y,x,y)
		image_angle = direction
		with instance_create(x,y,Deflect)
			image_angle = other.direction
		}
	else if typ = 2{
		with instance_create(x,y,Deflect)
			image_angle = other.direction
		sound_play(sndCrystalRicochet);
		instance_destroy()
		}
	}

if instance_exists(creator) and creator.speed>0{
	x=creator.x
	y=creator.y
	if creator.speed > 1
		creator.speed = 1
	}
	
if !instance_exists(creator){
	instance_destroy()
	}	
else if time > 0{
	time -= 1
	}
else{
	with creator{
		spr_idle = global.EliteSpiderShieldOff
		image_alpha = 1
		mask_index = mskScorpion
		}
	instance_destroy()
	}
//}
//{ BigCrystal
#define bigcrystal_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	name = "bigcrystal"
	hitid = [global.bigcrystal,"Big Crystal"]
	spr_idle = global.bigcrystal
	spr_hurt = global.bigcrystal
	spr_dead = global.plasmacrystaldead
//	snd_hurt = sndCrystalHurt
//	snd_dead = sndCrystalDead
	direction = random(360)
	mask_index = mskScrapBossMissile
	spr_shadow = shd48
	right = choose(-1,1)
	size = 1
	team = 0
	friction = 0.4
	maxhealth = 60
	canmelee = 0
	target = 0
	targetvisible = 0
	alrm1 = 0 //shielding
	alrm0 = -50 //walking
	shieldwalk = 0
	raddrop = 16
	on_step = script_ref_create(bigcrystal_step)
	on_destroy = script_ref_create(standarddroprate)
	return id;
	}
#define bigcrystal_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{ 
		sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

image_xscale = right
	
if round(shieldwalk) > 7
	shieldwalk = 0
	
if  alrm0 > 0 and (round(shieldwalk) == 0||round(shieldwalk) == 4||round(shieldwalk) == 2||round(shieldwalk) == 6)
	motion_add(direction,0.6)

if (random(40) < 1) and alrm0 <= 0 and alrm0 != -1{
	direction += random_range(-90,90)
	alrm0 += 40
	}

if alrm0 > 0 alrm0 -= 1

with script_bind_draw("bigcrystaltopdraw",-10-(y/10016))
	creator = other	
	
if "shield" not in self{
	with instance_create(x,y,CustomObject){
		depth = other.depth -1
		team = other.team
		creator = other
		name = "bigshield"
		sprite_index = global.bigcrystal
		mask_index = global.bigcrystalmask
		on_step = script_ref_create(bigshield_step)
		on_draw = script_ref_create(bigshielder_draw)
		}
	sound_play(sndCrystalShield)
	
	shield = 1
	}

	
#define bigshield_step
image_alpha = 0
with instances_matching_ne(projectile,"team",0) if place_meeting(x,y,other) and object_index != Flame{
	if typ =1{
		sound_play(sndCrystalRicochet)
		team = other.team
		hitid=[global.bigcrystal,"Big Crystal"]
		direction = point_direction(other.x,other.y,x,y)+random_range(-30,30)
		image_angle = direction
		with instance_create(x,y,Deflect)
			image_angle = other.direction
		}
	else if typ = 2{
		with instance_create(x,y,Deflect)
			image_angle = other.direction
		sound_play(sndCrystalRicochet);
		instance_destroy()
		}
	}

if instance_exists(creator) and creator.speed>0{
	x=creator.x
	y=creator.y
	if creator.speed > 1
		creator.speed = 1
	}
	
if image_index >= 3{
	image_index = 3
	image_speed = 0
	}
if !instance_exists(creator){
	instance_destroy()
	}	
#define bigshielder_draw
if instance_exists(creator){ 
		if creator.alrm0>0{
			draw_sprite_ext(global.bigcrystalbacklegswalk,creator.shieldwalk,x,y+3,1,1,0,c_white,1);
			draw_sprite_ext(global.bigcrystal,1,creator.x,creator.y,creator.right,1,0,c_white,0.8);
			draw_sprite_ext(global.bigcrystalfrontlegswalk,creator.shieldwalk,x,y+3,1,1,0,c_white,1);
			creator.shieldwalk+=0.25
			}
		else{
			creator.shieldwalk = 0
			draw_sprite(global.bigcrystalbacklegsidle,0,x,y+3)
			draw_sprite_ext(global.bigcrystal,1,creator.x,creator.y,creator.right,1,0,c_white,1);
			draw_sprite(global.bigcrystalfrontlegsidle,0,x,y+3)
			}
		}
#define bigcrystaltopdraw
with creator{ 
	draw_sprite_ext(global.bigcrystaltop,1,x,y,right,1,0,c_white,0.8);
	}
instance_destroy()
//}
//{ SpiderPit 
#define SpiderPit_create(_x,_y)
with instance_create(_x,_y,CustomEnemy){
	name = "spiderpit"
	team = 1
	spr_idle = global.spiderpit
	spr_hurt = global.spiderpit
	spr_dead = sprSpiderDead
	maxhealth = 70
	size = 2
	holdx = x
	holdy = y
	friction = 10
	mask_index = mskFrogQueen
	depth = 4
	canmelee = 0
	spawn = 10
	on_step    = script_ref_create(SpiderPit_step)
	on_destroy = script_ref_create(SpiderPit_dead)
	with instance_create(x,y,PortalClear)
		xscale = 1.2
	return id;
	}
#define SpiderPit_step
sprite_index = spr_idle
if(random(10)<1) && spawn>0
	spawn -= 1

x = holdx
y = holdy

if(spawn <= 0){
	spawn += 5+(instance_number(Spider));
	repeat(3){
		with (instance_create(x+2, y+10, Spider)){
			walk=1
			raddrop = 0
			}
		}
	}
with(Corpse) if place_meeting(x,y,other) and depth > other.depth
	depth = other.depth+0.1
#define SpiderPit_dead
repeat(8) 
with instance_create(x+random_range(-10,10),y+random_range(-10,10),Corpse){
	motion_add(random(360),random(6))
	sprite_index = sprSpiderDead
	}
repeat(34)
with instance_create(x,y,Debris)
	motion_add(random(360),random(4))
//}
//{ PlasmaCrystal
#define plasmacrystal_create(_x,_y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [global.plasmacrystalidle,"PLASMA CRYSTAL"]
	spr_idle = global.plasmacrystalidle
	spr_hurt = global.plasmacrystalhurt
	spr_dead = global.plasmacrystaldead
	spr_fire = sprLaserCrystalFire
	snd_hurt = sndLaserCrystalHit
	snd_dead = sndLaserCrystalDeath
	direction = random(360)
	gunangle = direction
	mask_index = mskBandit
	spr_shadow = shd24
	size = 1
	team = 1
	maxhealth = 55
	canmelee = 1
	meleedamage = 6
	friction = 0.4
	raddrop = 44
	target = 0
	targetvisible = 0
	alrm1 = 50 //fire
	alrm2 = -1 //charging
	on_step = script_ref_create(plasmacrystal_step)
	return id;
	}

#define plasmacrystal_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}
	
if alrm1 > 0 and targetvisible == 1
	alrm1-=1
else if alrm1 < -1
	alrm1 = 0

//if alrm2 = -1 and alrm1 != -1	
//	speed = 1.4

if targetvisible == 1 and alrm1 == 0{
	alrm2 = 50
	//sound_play(sndCrystalShield)
	}

if speed > 2
	speed = 2


if image_speed > 0.4
	image_speed -= 0.1	
	
if alrm2 > 0{
	alrm1 = 125
	alrm2 -= 1
	spr_idle = spr_fire
	image_speed += 0.1
	repeat 3
	if random(alrm2)<30{
		sound_play(sndLightningCrystalCharge)
		with instance_create(x+random_range(alrm2*-1,alrm2),y+random_range(alrm2*-1,alrm2),CaveSparkle){
			motion_add(point_direction(x,y,other.x,other.y),choose(0,0,1,1,2))
			sprite_index = sprPlasmaTrail
			}
		}
	}
else if alrm2 == 0 and target > 0{
		direction = point_direction(x,y,target.x,target.y)
		alrm2 = -1
		alrm1 = 100
		instance_create(x,y,PortalClear)
		if fork(){
			repeat(50)
			if instance_exists(self){
				if current_frame mod 6 = 1 sound_play(sndPlasma)
				if !place_meeting(x+lengthdir_x(2,direction),y+lengthdir_y(2,direction),Wall){
					x=x+lengthdir_x(2,direction);
					y=y+lengthdir_y(2,direction)
					}
				with instance_create(x,y,PlasmaImpact){
					image_xscale = random_range(0.1,1.6)
					image_yscale = image_xscale
					team = other.team
					hitid = other.hitid
					damage = 1
					creator = other
					}
				wait 1
				}
			}
		}
else
if speed < 2.0{
	spr_idle = global.plasmacrystalidle
	speed = 2.0
	}

//trace(alrm1,alrm2,speed,image_speed)
//} mod_script_call("mod", "enemies", "plasmacrystal_create", mouse_x, mouse_y)

//{ NotaYeti
// /gml mod_script_call("mod", "enemies", "yeti_create", mouse_x, mouse_y)
#define yeti_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [sprYetiIdle,"Nothing"]
	spr_idle = sprYetiIdle
	spr_hurt = global.yetihurt
	spr_dead = sprYetiDisappear
	snd_hurt = sndMutant7Hurt
	snd_dead = sndMutant7Hurt
	direction = random(360)
	mask_index = mskRhinoFreak
	spr_shadow = shd24
	size = 1
	team = 1
	maxhealth = 500
	canmelee = 0
	target = 0
	targetvisible = 0
	fire = 100
	walk = 0
	dodge = 0
	corpse = 0
	mad = 0
	on_step = script_ref_create(yeti_step)
	on_destroy = script_ref_create(yeti_dead)
	return id;
	}

#define yeti_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}

with Player if button_pressed(index,"horn"){
		if fork(){
			wait 40
			with other{
				sound_stop(sndMutant7Cptn)
				sound_stop(sndMutant7Cnfm)
				sound_stop(sndMutant7IDPD)
				sound_stop(sndMutant7Cptn)
				sound_stop(sndMutant7Spch)
				sound_stop(sndMutant7Valt)
				sound_stop(sndMutant7Chst)
				sound_play_pitch(choose(sndMutant7Cptn,sndMutant7Cnfm,sndMutant7IDPD,sndMutant7Spch,sndMutant7Valt,sndMutant7Chst),0.8)
				sound_play_pitch(choose(sndMutant7Cptn,sndMutant7Cnfm,sndMutant7IDPD,sndMutant7Spch,sndMutant7Valt,sndMutant7Chst),0.7)
				}
			}
		}
	
if mad ==0{
with instances_matching_ne(projectile,"team",team) if place_meeting(x+lengthdir_x(64,direction),y+lengthdir_y(64,direction),other){
		with other{
			team = other.team
			motion_add(point_direction(x,y,other.x,other.y)+choose(-90,90),other.speed)
			dodge+=3
			}
		}
if dodge>0{
	dodge -= 1
	//instance_create(x+hspeed,y+vspeed,PortalClear)
	instance_create(x,y,Dust)
	}
	else team = 0
	
if dodge<=0 and speed > 3{
	speed = 3
	}
}
else{
if speed > 2{
	canmelee = 1
	meleedamage = 4
	if speed > 6 speed =6
	}
else canmelee = 0

if fire > 0 
	fire-=1
else if targetvisible == 1{
		fire += 3
		direction = point_direction(x,y,target.x,target.y)+random_range(-45,45)
		motion_add(direction,2)
		}
}
if my_health < (maxhealth - 50){
	mad = 1
	team = 0
	}
#define yeti_dead
sound_stop(sndMutant7Cptn)
sound_stop(sndMutant7Cnfm)
sound_stop(sndMutant7IDPD)
sound_stop(sndMutant7Cptn)
sound_stop(sndMutant7Spch)
sound_stop(sndMutant7Valt)
sound_stop(sndMutant7Chst)
//}
//{ VanSpawner
#define makeavan_create(timing)
with instance_create(10016,10016,CustomObject){
	enemies = instance_number(enemy)
	name = "makeavan"
	please = timing
	on_step = script_ref_create(makeavan_step)
	return id;
	}
#define makeavan_step
if (instance_number(enemy) < (enemies/6)*5) && instance_exists(Player)
	if fork(){
		wait(please)
		if instance_exists(self){
			instance_create(0,0,VanSpawn)
			instance_destroy()
			}
		}
#define makeapopo_create(timing)
with instance_create(10016,10016,CustomObject){
	enemies = instance_number(enemy)
	name = "makeapopo"
	please = timing
	on_step = script_ref_create(makeapopo_step)
	return id;
	}
#define makeapopo_step
if (instance_number(enemy) < (enemies/6)*5) && instance_exists(Player)
	if fork(){
		wait(please)
		if instance_exists(self){
			instance_create(0,0,IDPDSpawn)
			instance_destroy()
			}
		}
//}

//{ van code (draw code from jsburg)
#define vanguide
//trace(my_health)
	
	
	if instance_number(enemy)==array_length_1d(instances_matching(CustomObject,"sprite_index",global.sprVan))
	and instance_exists(Player) and instance_exists(Corpse) and !instance_exists(Spiral){
		if fork(){
			var nc_ = instance_nearest(mouse_x,mouse_y,Corpse)
			wait 30
			if !instance_exists(Portal) and instance_exists(self)
			instance_create(nc_.x,nc_.y,Portal)
			
			exit;
			}
		}
	
	
	if start>0 start -= 1
	//image_angle = direction
	if start < 10 and drivespeed > 0
		drivespeed -= 0.25
	if drivespeed > 0{
		motion_add(direction, drivespeed)
		with instance_create(x+lengthdir_x(30,image_angle+180+30),y+lengthdir_y(30,image_angle+180+30),CaveSparkle) sprite_index = sprIDPDPortalCharge
		with instance_create(x+lengthdir_x(30,image_angle+180-30),y+lengthdir_y(30,image_angle+180-30),CaveSparkle) sprite_index = sprIDPDPortalCharge
		with instance_create(x+lengthdir_x(30,image_angle+30),y+lengthdir_y(30,image_angle+30),CaveSparkle) sprite_index = sprIDPDPortalCharge
		with instance_create(x+lengthdir_x(30,image_angle-30),y+lengthdir_y(30,image_angle-30),CaveSparkle) sprite_index = sprIDPDPortalCharge
		if start < 4{
		if random(4)<1 instance_create(x+lengthdir_x(30,image_angle+180+30),y+lengthdir_y(30,image_angle+180+30),BlueFlame) 
		if random(4)<1 instance_create(x+lengthdir_x(30,image_angle+180-30),y+lengthdir_y(30,image_angle+180-30),BlueFlame) 
		if random(4)<1 instance_create(x+lengthdir_x(30,image_angle+30),y+lengthdir_y(30,image_angle+30),BlueFlame)
		if random(4)<1 instance_create(x+lengthdir_x(30,image_angle-30),y+lengthdir_y(30,image_angle-30),BlueFlame) 
		}
		if start < 7{
		with instance_create(x+lengthdir_x(30,image_angle+180+30),y+lengthdir_y(30,image_angle+180+30),Effect) {sprite_index = sprScorch; image_xscale = 0.6; image_yscale = 0.1; image_angle = other.direction; depth = 4}
		with instance_create(x+lengthdir_x(30,image_angle+180-30),y+lengthdir_y(30,image_angle+180-30),Effect) {sprite_index = sprScorch; image_xscale = 0.6; image_yscale = 0.1; image_angle = other.direction; depth = 4}
		with instance_create(x+lengthdir_x(30,image_angle+30),y+lengthdir_y(30,image_angle+30),Effect) {sprite_index = sprScorch; image_xscale = 0.6; image_yscale = 0.1; image_angle = other.direction; depth = 4}
		with instance_create(x+lengthdir_x(30,image_angle-30),y+lengthdir_y(30,image_angle-30),Effect) {sprite_index = sprScorch; image_xscale = 0.6; image_yscale = 0.1; image_angle = other.direction; depth = 4}
		}
		}
	else friction = 1
	if speed > maxspeed 
			speed = maxspeed
	while place_meeting(x,y,Wall){
		with instance_nearest(x+hspeed,y+vspeed,Wall){
			instance_create(x,y,FloorExplo);
			instance_destroy()
			}
		}
	
	if speed == 0 and  land > 0
		land -= 1
	if (GameCont.loops > 0||(GameCont.subarea = 5) and random(6)<GameCont.loops) and start = 6
		mod_script_call("mod", "enemies", "IDPDTank_create", x+lengthdir_x(30,image_angle+180-30),y+lengthdir_y(30,image_angle+180-30),direction);
	if land = 1{
		var ix = x+lengthdir_x(36,image_angle+180);
		var iy = y+lengthdir_y(36,image_angle+180);
		repeat(9 + GameCont.loops * 3){
			var copper = choose(Grunt,Grunt,Grunt,Grunt,Grunt,Grunt,Grunt,Inspector,Inspector,Inspector,Shielder,Shielder,Shielder,EliteGrunt,EliteInspector,EliteShielder);
			with instance_create(ix,iy,copper)
				motion_add(point_direction(other.x,other.y,x,y),4)
			instance_create(ix,iy,PortalClear)
			}
		repeat(30)
			with instance_create(x,y,Dust){
				motion_add(random(360),random(6))
				depth = other.depth + .1
				}
		}
	if instance_exists(target)
			var ang = point_direction(x,y,target.x,target.y);
		else 
			var ang = image_angle;
	if start > 5
		image_angle = image_angle+(angle_difference(ang,image_angle)/8)
	if start < 5 and drivespeed > 0 and !place_meeting(x,y,target) and distance_to_object(target)<(game_width/2){
		image_angle = ang
		//image_angle = angle_difference(ang,direction)
		motion_add(direction+(angle_difference(ang,direction)/4), drivespeed/(5+start))
		drivespeed -= 0.25
		
		}
if instance_exists(baby){
		with baby{
			with instance_nearest(x,y,hitme) if distance_to_object(other)<32
				motion_add(point_direction(other.x,other.y,x,y),0.5)
			x=other.x+other.hspeed
			y=other.y+other.vspeed
			if other.speed > 1
			canmelee = 1
			else
			canmelee = 0
			image_angle = other.image_angle
			}
		}
	else instance_destroy()

#define vandraw
if instance_exists(baby){
	var creator = baby
	var i;
	var j = 0;
	draw_sprite_ext(global.sprOutline, 0 , x, y ,image_xscale, image_yscale, image_angle, c_white, 0.5);
	if creator.nexthurt > current_frame 
		d3d_set_fog(1, c_white, 0, 1)
	for (i = 0; i <= 20; i++){
		repeat(zscale){
			draw_sprite_ext(global.sprOutline, clamp(i,0,17) , x, y-land - .5 *(i + j) ,image_xscale, image_yscale, image_angle, c_white, 1);
			j += 1;
			}
		}
	d3d_set_fog(0, 0, 0, 0)
	j = 0
	if speed == 0
		var sprite = global.sprVanStop;
	else
		var sprite = global.sprVan;
	if creator.nexthurt > current_frame 
		d3d_set_fog(1, c_white, 0, 1)
	for (i = 0; i <= 20; i++){
		repeat(zscale){
			draw_sprite_ext(sprite, clamp(i,0,17) , x, y-land - .5 *(i + j) ,image_xscale, image_yscale, image_angle, c_white, 1);
			j += 1;
			}
		}
	d3d_set_fog(0, 0, 0, 0)
	if speed > 1{
		draw_sprite_ext(global.sprSiren, image_index , x, y-land - .5 *(i + j),image_xscale, image_yscale, image_angle, image_blend, 1);
			}
	}
#define vanexplo
repeat 3
mod_script_call("mod","enemies","scrPickups",80)
if instance_exists(baby)
		with baby
			instance_destroy()
repeat(3)
	instance_create(x+random_range(-30,30),y+random_range(-30,30),PopoExplosion)
with instance_create(x,y,Effect) {
sprite_index = sprScorch;
image_xscale = 3
image_yscale = 3
}
repeat(10)
instance_create(x+random_range(-30,30),x+random_range(-30,30),BlueFlame)
//}
//{ IDPD TANK
#define IDPDTank_draw
draw_self()
if(nexthurt > current_frame) && (spawnanimation<125){
    d3d_set_fog(1, c_white, 0, 1);
	draw_sprite_ext(sprite_index, -1, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
	d3d_set_fog(0, 0, 0, 0);
	}
#define IDPDTank_create(_x,_y,_d)

with instance_create(_x,_y,CustomEnemy){
	name = "IDPDTank"
	hitid = [global.IDPDTankidle,"IDPD Tank"]
	team = 3
	spawnanimation = 150
	on_step = script_ref_create(IDPDTank_step)
	on_destroy = script_ref_create(IDPDTank_dead)
	on_draw = script_ref_create(IDPDTank_draw)
	sound_play_pitch(sndLastMelee,1.2)
	spr_idle = global.IDPDTankintro
	spr_walk = global.IDPDTankwalk
	spr_hurt = global.IDPDTankhurt
	spr_dead = global.IDPDTankdead
	snd_hurt = sndVanHurt
	snd_dead = sndSalamanderDead
	maxhealth = 120+(60*(GameCont.loops-1))+(60*instance_number(Player))
	direction = random(360)
	gunangle = random(360)
	spr_shadow = shd64
	mask_index = mskHyperCrystal
	targetvisible = 0
	walk = 0
	depth = -8
	alrm1 = 1000 //fire
	hurttimer = 50
	motion_add(_d,16)
	with(instance_create(x,y,Dust)){
		direction = random(360);
		speed = 3 + random(3);
		vspeed *= 0.66;
		}
	return id;
	}
#define IDPDTank_step
if spr_idle == global.IDPDTankintro{
	spawnanimation -= 1
	sprite_index = spr_idle
	friction = 30
	if image_index >= 55{
		spawnanimation = 0
		alrm1 = 10
		spr_idle = global.IDPDTankidle
		friction = 0.4
		}
	}
if(nexthurt > current_frame){
	if spr_idle = global.IDPDTankidle{
		if(sprite_index != spr_hurt){
			image_index = 0;
			sprite_index = spr_hurt;
			}
		else
		sprite_index = spr_idle
		}
	}
	else{
	if spr_idle = global.IDPDTankidle{
		if(speed > friction)
			sprite_index = spr_walk;
		else
			sprite_index = spr_idle;
		}
		else
			sprite_index = spr_idle
		}
if spr_idle == global.IDPDTankidle{
	if random(20)<1{
		direction = random(360)
		walk = random_range(5,15)
		}
	if walk > 0{
		walk -= 1
		motion_add(direction, 0.8)
		if place_meeting(x,y,Wall){
			direction += 90 * right;
			walk --;
			}
		}
	if speed > 2.5{
		speed = 2.0
		}	
	if ((gunangle + 270) mod 360) < 180 right = -1
		else
		right = 1;	
	image_xscale = right
	if alrm1 > 0
		alrm1 -= 1
	}
if hurttimer > 0
	hurttimer -= 1
	
if(instance_exists(Player) && collision_line(x,y,Player.x,Player.y,Wall,0,0) < 0){
		target = instance_nearest(x,y,Player)
		targetvisible = 1
		}
	else{
		target = 0
		targetvisible = 0
		}

if targetvisible = 1
	gunangle = point_direction(x,y,target.x,target.y)

if alrm1 <= 0 && targetvisible = 1{
	with instance_create(x,y,CustomProjectile){
		name = "IDPDLaserCannon"
		hitid = [global.IDPDTankidle,"IDPD Tank"]
		on_step = script_ref_create(IDPDLaserCannon_step)
		on_destroy = script_ref_create(IDPDLaserCannon_destroy)
		creator = other
		team = 3
		charge = 0.1
		aim = other.gunangle
		mask_index = mskPopup
		sound_play_pitch(sndLaserCannonCharge,0.3)
		}
	alrm1 = 125
	if random(3)<1{
		instance_create(x,y,PortalClear)
		if fork(){
			repeat(random(5))
			if instance_exists(self)
			with instance_create(x,y,CustomHitme){
				target = instance_nearest(x,y,Player)
				creator = other
				team = 3
				spr_idle = sprPopoRocket
				spr_hurt = sprPopoRocket
				direction = other.gunangle+180+(random_range(-90,90))
				maxhealth = 10
				speed = 0
				time = 0
				friction = 0
				on_step = script_ref_create(idpdtankmissile_step)
				on_hurt = script_ref_create(idpdtankmissile_hurt)
				sound_play(sndEliteGruntRocketFire)
				wait 6
				}
			}
		}
	}

if instance_exists(self) && alrm1 <= 0 && targetvisible = 0{
	instance_create(x,y,PortalClear)
	if fork(){
		alrm1 = 100
		repeat(random(6))
		if instance_exists(self)
		if random(4)<1{
		with instance_create(x,y,CustomObject){
			name = "IDPDLaserCannon"
			hitid = [global.IDPDTankidle,"IDPD Tank"]
			on_step = script_ref_create(IDPDLaserCannon_step)
			on_destroy = script_ref_create(IDPDLaserCannon_destroy)
			creator = other
			team = 3
			charge = 0.1
			aim = other.gunangle
			mask_index = mskPopup
			sound_play_pitch(sndLaserCannonCharge,0.3)
			}
		}
		with instance_create(x,y,CustomHitme){
			target = instance_nearest(x,y,Player)
			creator = other
			team = 3
			spr_idle = sprPopoRocket
			spr_hurt = sprPopoRocket
			direction = other.gunangle+180+(random_range(-90,90))
			maxhealth = 10
			speed = 0
			time = 0
			friction = 0
			on_step = script_ref_create(idpdtankmissile_step)
			on_hurt = script_ref_create(idpdtankmissile_hurt)
			on_destroy = script_ref_create(idpdtankmissile_dead)
			sound_play(sndEliteGruntRocketFire)
			wait 6
			}
		}
	}

#define IDPDTank_dead
if mod_variable_exists("mod","options","bossoutros")
	if mod_variable_get("mod","options","bossoutros") == "1"
		mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
with instance_create(x,y,PopoExplosion){
	hitid = [global.IDPDTankidle,"IDPD Tank"]
	}
repeat(2) scrPickups(50);

#define IDPDLaserCannon_step
//with instance_create(x,y,EnemyLaser)
//{image_angle = other.creator.gunangle+((15-random(other.charge*10))*choose(-1,1))
//team = other.team
//damage = 0
//image_yscale =0.2
//force = 0
//event_perform(ev_alarm,0)}

sprite_index = sprIDPDPortalClose
image_index = 1

if instance_exists(creator){
	if creator.gunangle < 180
		depth = creator.depth+1
	else 
		depth = creator.depth-1
	}
if charge < 1.25 && instance_exists(creator){
	aim = creator.gunangle
	}
if charge > 0{
	repeat 2
	with instance_create(x+random_range(-2,4),y+random_range(-2,4),Dust){
		sprite_index = sprIDPDPortalCharge
		image_xscale = random_range(0.1,2)
		image_yscale = image_xscale
		move_contact_solid(other.aim,random(480))
		motion_add(random(360),2+random(1))
		}
	}

charge += 0.02

with instance_create(x+random_range(-20-(charge*10),20+(charge*10)),y+random_range(-20-(charge*10),20+(charge*10)),Dust){
	motion_set(point_direction(x,y,other.x,other.y),other.charge+1)
	sprite_index = sprIDPDPortalCharge
	}
with instance_create(x,y,PortalClear){
	team = 3
	}
	
image_xscale = charge
image_yscale = image_xscale

with(creator){
	other.x = (x+lengthdir_x(18, gunangle))
	other.y = (y+lengthdir_y(18, gunangle))
	}
if !instance_exists(creator){
	charge -= 0.1
	}
	
if charge <= 0
	instance_destroy()
	
if instance_exists(self) && charge > 1.5{
	var dist = 4;
	var ang = random_range(-5,5)
	if instance_exists(self)
	if instance_exists(creator){
		while(place_free(x+lengthdir_x(dist, aim+ang), y+lengthdir_y(dist, aim+ang))){
			dist += 4;
			}
		with instance_create(x+lengthdir_x(dist, aim+ang), y+lengthdir_y(dist, aim+ang), Laser){
			sound_play_pitch(sndLaserCannon,0.3)
			sprite_index = global.IDPDLaser
			hitid = [global.IDPDTankidle,"IDPD Tank"]
			damage = 1
			creator = other
			team = 3
			depth = other.depth
			image_angle = point_direction(x,y,other.x,other.y)
			image_xscale = - .5* distance_to_object(other) - 5
			image_yscale = 4
			force = 0
			with instance_create(x,y,Explosion){
				hitid = [global.IDPDTankidle,"IDPD Tank"]
				sprite_index = global.IDPDExplo
				}
			}
		charge = choose(0.1,0.1,0.1,0.1,1,-1,-1)
		if charge < 0{
			instance_destroy()
			}
		else
			sound_play_pitch(sndLaserCannonCharge,0.3)
		}
	}
	
#define IDPDLaserCannon_destroy
with(creator)
	alrm1 += 30

#define idpdtankmissile_step
if time < 60{
	time += 1
	}
sprite_index = spr_idle
image_angle = direction

sound_play(sndEliteGruntRocketFly)

var sped = 0;
with instances_matching(CustomObject,"name","bossintro")
sped += 1

if sped == 0{
if speed < 3{
	motion_add(direction,0.1)
	}	
else{
	speed = 3
	}
instance_create(x,y,Smoke)
}
else
speed = 0

if instance_exists(target){
	var tdir = point_direction(x,y,target.x,target.y)
	}
else 
	var tdir = 0

if (tdir > direction mod 360){
	direction += time/10
	}
if (tdir <= direction mod 360){
	direction -= time/10
	}
	
if place_meeting(x,y,Wall){
	if time < 50{
		direction += 180
		sound_play(sndHitMetal)
		}
	else
		with instance_create(x,y,Explosion){
			hitid = [global.IDPDTankidle,"IDPD Tank"]
			sprite_index = global.IDPDExplo
			image_xscale = 0.5
			image_yscale = 0.5
			}
	}
if place_meeting(x,y,Player){
	with instance_create(x,y,Explosion){
		hitid = [global.IDPDTankidle,"IDPD Tank"]
		sprite_index = global.IDPDExplo
		image_xscale = 0.5
		image_yscale = 0.5
		}
	}
	

#define idpdtankmissile_hurt
if(sprite_index != spr_hurt){
	my_health -= argument0;
	image_index = 0
	sprite_index = spr_hurt
	}
if my_health - argument0 <= 0{
	with instance_create(x,y,Explosion){
		hitid = [global.IDPDTankidle,"IDPD Tank"]
		sprite_index = global.IDPDExplo
		image_xscale = 0.5
		image_yscale = 0.5
		}
	instance_destroy()
	}
	
#define idpdtankmissile_dead
scrPickups(80);
//}
//{ Missiles
#define missile_create(_x,_y,_gunangle,_team,_creator,_hitid)
with instance_create(_x,_y,CustomProjectile){
	name = "missile"
	hitid = _hitid
	creator = _creator
	team = _team
	direction = _gunangle
	image_angle = direction
	//friction = 0.1
	speed = -3
	motion_add(_gunangle+180+random_range(-45,45),random(4))
	sprite_index = sprJockRocket
	on_step = script_ref_create(missile_step)
	on_destroy = script_ref_create(missile_destroy)
	on_wall = script_ref_create(missile_wall)
	//on_draw = script_ref_create(missile_draw)
	sound_play(sndRocket)
	return id;
	}
#define missile_step
if instance_exists(Player){
	var t = instance_nearest(x,y,Player);
	if image_angle < point_direction(x,y,t.x,t.y)
	image_angle += abs(speed)
	else
	image_angle -= abs(speed)
	}
if speed < 8
	motion_add(image_angle,0.1)
if speed >= 2 and random(4)<1
	with instance_create(x+lengthdir_x(-8,image_angle),y+lengthdir_y(-8,image_angle),TrapFire){
		motion_add(other.direction+180,other.speed/2)
		team = other.team
		creator = other.creator
		depth = other.depth + choose(-0.1,0.1)
		direction = other.direction
		image_angle = direction
		image_yscale = 0.5
		image_speed = 0.4
		}
#define missile_destroy
with instance_create(x+hspeed,y+vspeed,SmallExplosion){
	team = other.team
	hitid = other.hitid
	}
#define missile_wall
if speed > 6 instance_destroy()
#define missile_draw
lasx = x
lasy = y
lasd = 0
do {lasd += 1 lasx += lengthdir_x(2,image_angle) lasy += lengthdir_y(2,image_angle)}
until position_meeting(lasx,lasy,Wall) or lasd >= 1000

draw_sprite_ext(sprLaserSight,-1,x,y,point_distance(x,y,lasx,lasy)/2+2,1,image_angle,c_white,1)

draw_sprite_ext(sprite_index,0,x,y,1,1,image_angle,c_white,1)

//}
//{ ClamMimic
#define ClamMimic_create(_x,_y)
with instance_create(x,y,CustomEnemy){
	alarm1 = 100
	alarm2 = 10
	friction = 300
	on_step = script_ref_create(ClamMimic_step)
	on_destroy = script_ref_create(ClamMimic_dead)
	spr_idle = global.ClamMimicIdle
	spr_fire = global.ClamMimicFire
	spr_tell = global.ClamMimicTell
	spr_hurt = global.ClamMimicHurt
	spr_dead = global.ClamMimicDead
	hitid = [global.ClamMimicFire,"CLAM"]
	my_health = 12
	size = 1
	canmelee = 1
	meleedamage = 3
	team = 1
	sprite_index = spr_idle;
	return id;
	}
#define ClamMimic_step
if(nexthurt > current_frame){
	if(sprite_index != spr_hurt){
		image_index = 0;
		sound_play(sndMimicHurt);
		sprite_index = spr_hurt;}
	}
	else if sprite_index != spr_fire and sprite_index != spr_tell{
		sprite_index = spr_idle
		}
if sprite_index != spr_fire and alarm1 <= 0{
	alarm1 = random_range(100,300)
	sprite_index = spr_tell;
	sound_play(sndMimicSlurp)
	instance_create(x,y,Bubble)
	if random(5)<1
		motion_add(random(360),random(2))
	}
		
if sprite_index = spr_tell and image_index >= 14{
	alarm1 = random_range(300,600)
	sprite_index = spr_idle
	}

if sprite_index = spr_fire and image_index >= 3
	sprite_index = spr_idle 
 
if alarm1 > 0
	alarm1 -= 1
if alarm2 > 0
	alarm2 -= 1
	
if place_meeting(x,y,Player) and alarm2 <= 0 and (sprite_index = spr_idle || sprite_index = spr_tell){
	sound_play(sndMimicMelee)
	sprite_index = spr_fire
	alarm1 = 100
	alarm2 = 30
	repeat 3
	instance_create(x,y,Bubble)
	}
#define ClamMimic_dead
sound_play(sndMimicDead)
with instance_create(x,y,WepPickup){
	wep = choose("secretweapon2","secretweapon2","secretweapon1");
	ammo = 1;
	}
//}

//{ Fish
#define enemyfish_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [sprMutant1Idle,"FISH"]
	spr_idle = global.fishmenidle
	spr_walk = global.fishmenwalk
	spr_hurt = global.fishmenhurt
	spr_dead = global.fishmendead
	snd_hurt = sndMutant1Hurt
	snd_dead = sndMutant1Hurt
	direction = random(360)
	gunangle = direction
	gunsprite = global.trident
	wkick = 0
	mask_index = mskBandit
	spr_shadow = shd24
	size = 1
	team = 1
	maxhealth = 25
	canmelee = 0
	target = 0
	targetvisible = 0
	fire = 100
	walk = 0
	boosting = 0
	raddrop = 16
	on_step = script_ref_create(enemyfish_step)
	on_draw = script_ref_create(drawenemygun)
	on_destroy = script_ref_create(enemyfish_destroy)
	return id;
	}

#define enemyfish_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}


	
if walk > 0{
	walk -= 1
	motion_add(direction, 0.8)
	}
if speed > 4 and boosting <= 0
	speed = 4
if speed > 6 and boosting > 0
	speed = 6
if wkick > 0
	wkick -= 1
else if wkick < 0
	wkick += 1
	
if  targetvisible == 1 and random(540)<1{
	direction = point_direction(x,y,target.x,target.y)
	walk = 12
	//sound_play(sndCrystalShield)
	}
else if (random(40) < 1){
	direction += random_range(-90,90)
	walk = 30+random(15)
	}
	

if boosting <= 0 if random(250) < 1{
	boosting = 60
	}
if boosting > 0{
	boosting -= 1
	motion_set(direction,6)
	image_angle = direction - 90
	if collision_circle(x, y, 12, Wall, false, false)
		direction += 45
	with instance_create(x,y,FishBoost){
		depth = 4
		evil = 1
		}
	}
else
image_angle = 0	
	
if fire > 0 
	fire-=1
else if targetvisible == 1 and distance_to_object(Player)<64{
	gunangle = point_direction(x,y,target.x,target.y)
	repeat 5{
		if instance_exists(self){
			wkick += 2
			fire = 100
			walk = 0
			}
		wait 2
		}
	if instance_exists(self){
		sound_play(sndWrench)
		var ang = -10
		repeat 3{
			with instance_create((x+lengthdir_x(18, gunangle+ang)),(y+lengthdir_y(+18, gunangle+ang)),Shank){
				motion_add(other.gunangle+(ang),8)
				hitid = [global.fishmenidle,"FISHMEN"]
				damage = 2
				team = other.team
				creator = other
				image_angle = direction
			}
			ang+=10
			}
		motion_add(gunangle,12)
		wkick = -30
		}
}

#define enemyfish_destroy
	if random(10)<(1+skill_get(4)+skill_get(28))
	with instance_create(x,y,WepPickup){
		wep = "secretweapon1"
		rotation = other.gunangle
		}
//}
//{ Crystal
#define crystalshielder_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [sprMutant2Idle,"Crystal"]
	spr_idle = sprMutant2BIdle
	spr_walk = sprMutant2BWalk
	spr_hurt = sprMutant2BHurt
	spr_dead = sprMutant2BDead
	snd_hurt = sndMutant2Hurt
	snd_dead = sndMutant2Hurt
	direction = random(360)
	mask_index = mskBandit
	spr_shadow = shd24
	size = 1
	team = 1
	maxhealth = 56
	canmelee = 0
	target = 0
	targetvisible = 0
	alrm1 = 0 //shielding
	alrm0 = -50 //walking
	raddrop = 16
	on_step = script_ref_create(crystalshielder_step)
	return id;
	}
#define crystalshielder_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}

if alrm1 > 0 
	alrm1-=1
	
if alrm0 > 0{
	alrm0 -= 1
	motion_add(direction, 0.8)
	}
if speed > 3.5{
	speed = 3.0
	}
if (random(40) < 1) and alrm1 < 25{
	direction = random(360)
	alrm0 = 20+random(15)
	}
if alrm1 <= 0 and targetvisible == 1 and random(50)<1{
	alrm0 = choose(0,0,4,20,40,40,40)
	speed = 0
	alrm1 = 60
	with instance_create(x,y,CustomObject){
		depth = other.depth -1
		team = other.team
		creator = other
		name = "customshield"
		shieldwalk = 0
		time = 75
		sprite_index = sprShieldB
		mask_index = mskShield
		on_step = script_ref_create(customshield_step)
		on_draw = script_ref_create(crystalshielder_draw)
		}
	sound_play(sndCrystalShield)
	}
#define customshield_step
if image_speed = 0
with instances_matching_ne(projectile,"team",1) if place_meeting(x,y,other){
	if typ =1{
		sound_play(sndCrystalRicochet)
		team = other.team
		hitid=[sprMutant2BIdle,"Crystal"]
		direction = point_direction(other.x,other.y,x,y)
		image_angle = direction
		with instance_create(x,y,Deflect)
			image_angle = other.direction
		}
	else if typ = 2{
		sound_play(sndCrystalRicochet);
		instance_destroy()
		}
	}

if instance_exists(creator) and creator.speed>0{
	x=creator.x
	y=creator.y
	if creator.speed > 1
		creator.speed = 1
	}
	
if image_index >= 3{
	image_index = 3
	image_speed = 0
	}
if !instance_exists(creator){
	with instance_create(x,y,CrystalShieldDisappear){
		bskin = 1
		sprite_index = sprShieldBDisappear
		}
	instance_destroy()
	}	
else if time > 0{
	time -= 1
	}
else{
	with instance_create(x,y,CrystalShieldDisappear){
		bskin = 1
		sprite_index = sprShieldBDisappear
		}
	instance_destroy()
	}

#define crystalshielder_draw
if instance_exists(creator){ 
	if creator.speed>0{
		draw_sprite_ext(sprCrystalShieldBWalkBack,shieldwalk,x,y+3,1,1,0,c_white,1);
		draw_sprite_ext(sprite_index,image_index,x,y,1,1,0,c_white,1);
		draw_sprite_ext(sprCrystalShieldBWalkFront,shieldwalk,x,y+3,1,1,0,c_white,1);
		shieldwalk+=0.6
		if shieldwalk > 7
			shieldwalk = 0
		}
	else{
		shieldwalk = 0
		draw_sprite(sprCrystalShieldBIdleBack,0,x,y+3)
		draw_sprite_ext(sprite_index,image_index,x,y,1,1,0,c_white,1);
		draw_sprite(sprCrystalShieldBIdleFront,0,x,y+3)
		}
	}
//}
//{ Melting
#define enemymelting_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	bskin = choose(0,1)
	if bskin = 0{
		hitid = [sprMutant4Idle,"MELTING"]
		spr_idle = sprMutant4Idle
		spr_walk = sprMutant4Walk
		spr_hurt = sprMutant4Hurt
		spr_dead = sprMutant4Dead
		}
	else{
		hitid = [sprMutant4BIdle,"MELTING"]
		spr_idle = sprMutant4BIdle
		spr_walk = sprMutant4BWalk
		spr_hurt = sprMutant4BHurt
		spr_dead = sprMutant4BDead
		}
	snd_hurt = sndMutant4Hurt
	snd_dead = sndMutant4Hurt
	direction = random(360)
	gunangle = direction
	mask_index = mskBandit
	spr_shadow = shd24
	corpse = 0
	size = 1
	team = 1
	maxhealth = 12
	canmelee = 0
	target = 0
	targetvisible = 0
	fire = 100
	walk = 0
	raddrop = 2
	on_step = script_ref_create(enemymelting_step)
	on_destroy = script_ref_create(enemymelting_dead)
	return id;
	}

#define enemymelting_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}

if fire > 0 
	fire-=1
	
if walk > 0{
	walk -= 1
	motion_add(direction, 0.8)
	}
if speed > 2{
	speed = 2
	}

if (random(40) < 1) and walk != -1 {
	direction += random_range(-90,90)
	walk = 30+random(15)
	}
#define enemymelting_dead
with instance_create(x,y,Corpse){
		sprite_index = other.spr_dead
		specialrevive = "skeleton"
		}
//}
//{ Plant
//crashes on some level transitions?
#define bulb_create(_x,_y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [sprMutant5Idle,"PLANT"]
	spr_idle = global.planthatch
	spr_hurt = global.planthatch
	spr_dead = mskNone
	snd_hurt = sndMutant5Hurt
	snd_dead = sndMutant5Hurt
	mask_index = mskBandit
	spr_shadow = shd24
	corpse = 1
	size = 1
	team = 1
	speed = 0
	staythefuckstillx = x
	staythefuckstilly = y
	maxhealth = 20
	isaplant = choose(0,1)
	image_speed = 0.4
	image_xscale = choose(-1,1)
	on_step = script_ref_create(bulb_step)
	on_destroy = script_ref_create(bulb_dead)
	return id;
	}
#define bulb_step
	if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		sprite_index = spr_idle;
		image_index = 0
		}
	x = staythefuckstillx
	y = staythefuckstilly
	if random(1000)<1
		instance_destroy()
#define bulb_dead
var __x = staythefuckstillx;
var __y = staythefuckstilly;
with instance_create(x,y,Effect){
	x= __x
	y= __y
	speed = 0
	friction = 0
	sprite_index = global.planthatch
	image_xscale = other.image_xscale
	image_index = 9
	image_speed = 0
	depth = other.depth+1
	}
repeat(random(6)){
	with instance_create(x,y,FireFly)
		motion_add(random(360),random(1))
		}
if isaplant = 1
with instance_create(__x, __y, CustomEnemy){
	hitid = [sprMutant5Idle,"PLANT"]
	spr_idle = global.plantidle
	spr_hurt = global.planthurt
	spr_dead = sprMutant5Dead
	spr_fire = global.plantfire
	snd_hurt = sndMutant5Hurt
	snd_dead = sndMutant5Hurt
	direction = random(360)
	gunangle = direction
	mask_index = mskBandit
	spr_shadow = shd24
	staythefuckstillx = __x
	staythefuckstilly = __y
	corpse = 1
	size = 1
	team = 1
	speed = 0
	maxhealth = 40
	canmelee = 0
	target = 0
	targetvisible = 0
	fire = 80+random(40)
	raddrop = 16
	on_step = script_ref_create(enemyplant_step)
	}
else repeat(9){
	with instance_create(x,y,ToxicGas){
		motion_add(random(360),random(1))
		friction = 0.1
		}
	}
#define enemyplant_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [sprMutant5Idle,"PLANT"]
	spr_idle = global.plantidle
	spr_hurt = global.planthurt
	spr_dead = sprMutant5Dead
	spr_fire = global.plantfire
	snd_hurt = sndMutant5Hurt
	snd_dead = sndMutant5Hurt
	direction = random(360)
	gunangle = direction
	mask_index = mskBandit
	spr_shadow = shd24
	staythefuckstillx = _x
	staythefuckstilly = _y
	corpse = 1
	size = 1
	team = 1
	friction = 300
	speed = 0
	maxhealth = 40
	canmelee = 0
	target = 0
	targetvisible = 0
	fire = 80+random(40)
	raddrop = 16
	on_step = script_ref_create(enemyplant_step)
	on_destroy = script_ref_create(enemyplant_dead)
	return id;
	}

#define enemyplant_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		sprite_index = spr_idle;
		}
x = staythefuckstillx
y = staythefuckstilly
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}

if fire > 0 
	fire-=1
	
if spr_idle == spr_fire and image_index >= 6
	spr_idle = global.plantidle
	
if targetvisible == 1 and fire <= 0{
	spr_idle = spr_fire
	gunangle = point_direction(x,y,target.x,target.y)
	fire = 75
	wait 6
	if instance_exists(self)
	with instance_create(x+(6*other.image_xscale),y,EnemyBullet1){
		motion_add(other.gunangle,4)
		sound_play_pitch(sndFireballerFire,1.5)
		image_angle = direction
		damage = 3
		team = 1
		hitid = other.hitid
		}
	//sound_play(sndCrystalShield)
	}

#define enemyplant_dead
repeat(6){
	with instance_create(x,y,Feather){
		sprite_index = sprLeaf
		motion_add(random(360),random(4))
		image_angle = random(360)
		}
	}
//}
//{ YV
#define enemyyv_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	name = "gungod"
	hitid = [sprMutant6Idle,"GUNGOD"]
	spr_idle = sprMutant6Idle
	spr_walk = sprMutant6Walk
	spr_hurt = sprMutant6Hurt
	spr_dead = sprMutant6Dead
	snd_hurt = sndMutant6Hurt
	snd_dead = sndMutant6Dead
	direction = random(360)
	gunangle = direction
	gunsprite = sprGoldRevolver
	weapondrop = 39
	corpse = 0
	mask_index = mskBandit
	spr_shadow = shd24
	size = 1
	team = 1
	maxhealth = 200
	canmelee = 0
	target = 0
	targetvisible = 0
	alrm1 = 100
	walk = 0
	raddrop = 0
	ammo = 255
	on_step = script_ref_create(enemyyv_step)
	on_draw = script_ref_create(drawenemygun)
	on_destroy = script_ref_create(yv_dead)
	return id;
	}

#define enemyyv_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	gunangle = point_direction(x,y,target.x,target.y)
	if target.x > x
		right = 1
	else
		right = -1
	}

if alrm1 > 0 
	alrm1-=1
	
if walk > 0{
	walk -= 1
	motion_add(direction, 0.8)
	}
if speed > 4{
	speed = 4
	}	
if  targetvisible == 1 and random(50)<1 and walk != -1 {
	direction = point_direction(x,y,target.x,target.y)
	walk = 10
	}
else if (random(50) < 1) and walk != -1 {
	direction += random_range(-90,90)
	walk = 25+random(10)
	}
if alrm1 = 0 and targetvisible{
	alrm1 += 200
	repeat(12){
		if instance_exists(self){ 
			if ammo > 0{
				wkick = 5
				ammo -= 1
				sound_play(sndGoldPistol);
				with instance_create(x,y,Bullet1){
					team = other.team
					damage = 1
					motion_add(other.gunangle+random_range(-15,15),16)
					image_angle = direction
					}
				wait 5;
				}
			else{
				sound_play(sndEmpty);
				wkick = 2
				with instance_create(x,y,PopupText)
					text = "EMPTY"
				wait 5;
				}
			}
		}
	}
#define yv_dead
with instance_create(x,y,WepPickup){	
	wep = other.weapondrop
	rot = other.gunangle
	motion_add(random(360),random(8))
	}
with instance_create(x,y,Corpse){
	sprite_index = other.spr_dead
	}

mod_script_call("mod", "props", "VenuzCar_create", x, y, 300)

		
		
//}
//{ Steroids
#define enemysteroids_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [global.steroidsidle,"STEROIDS"]
	spr_idle = global.steroidsidle
	spr_walk = global.steroidswalk
	spr_hurt = global.steroidshurt
	spr_dead = global.steroidsdead
	snd_hurt = sndMutant7Hurt
	snd_dead = sndMutant7Hurt
	direction = random(360)
	gunangle = direction
	mask_index = mskBandit
	spr_shadow = shd24
	corpse = 0
	size = 1
	team = 1
	maxhealth = 25
	canmelee = 1
	meleedamage = 3
	target = 0
	targetvisible = 0
	fire = 100
	walk = 0
	raddrop = 16
	on_step = script_ref_create(enemysteroids_step)
	on_destroy = script_ref_create(enemysteroids_dead)
	return id;
	}

#define enemysteroids_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}

if fire > 0 
	fire-=1
	
if walk > 0{
	walk -= 1
	motion_add(direction, 0.8)
	}
if speed > 4.5{
	speed = 4.5
	}

if  targetvisible == 1 and walk != -1 and random(50)<1{
	direction = point_direction(x,y,target.x,target.y)
	walk = 10
	//sound_play(sndCrystalShield)
	}
else if (random(40) < 1) and walk != -1 {
	direction += random_range(-90,90)
	walk = 30+random(5)
	}
#define enemysteroids_dead
with instance_create(x,y,Corpse){
	sprite_index = other.spr_dead
	specialrevive = "melting"
	}
//}
//{ Robot
#define enemyrobot_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [sprMutant8Idle,"ROBOT"]
	spr_idle = sprMutant8Idle
	spr_walk = sprMutant8Walk
	spr_hurt = sprMutant8Hurt
	spr_dead = sprMutant8Dead
	snd_hurt = sndMutant8Hurt
	snd_dead = sndMutant8Hurt
	direction = random(360)
	gunangle = direction
	mask_index = mskBandit
	spr_shadow = shd24
	size = 1
	team = 1
	maxhealth = 25
	canmelee = 0
	target = 0
	targetvisible = 0
	fire = 100
	walk = 0
	raddrop = 16
	on_step = script_ref_create(enemyrobot_step)
	return id;
	}

#define enemyrobot_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}

if fire > 0 
	fire-=1
	
if walk > 0{
	walk -= 1
	motion_add(direction, 0.8)
	}
if speed > 4{
	speed = 4
	}

if  targetvisible == 1 and random(50)<1{
	direction = point_direction(x,y,target.x,target.y)
	walk = 10
	//sound_play(sndCrystalShield)
	}
else if (random(40) < 1){
	direction += random_range(-90,90)
	walk = 30+random(15)
	}
//}
//{ Chicken
#define enemychicken_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	bskin = 0
	spr_idle = global.chickenidle
	spr_walk = global.chickenwalk
	spr_hurt = global.chickenhurt
	spr_head = global.chickenhead
	hitid = [spr_idle,"CHICKEN"]
	spr_dead = sprMutant9Dead
	snd_hurt = sndMutant9Hurt
	snd_dead = sndMutant9Hurt
	corpse = 0
	direction = random(360)
	gunangle = direction
	mask_index = mskBandit
	spr_shadow = shd24
	size = 1
	team = 1
	maxhealth = 20
	canmelee = 1
	meleedamage = 3
	target = 0
	targetvisible = 0
	fire = 100
	walk = 0
	time = 0
	raddrop = 0
	on_step = script_ref_create(enemychicken_step)
	on_destroy = script_ref_create(enemychicken_dead)
	return id;
	}

#define enemychicken_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}

if fire > 0 
	fire-=1
	
if walk > 0{
	walk -= 1
	motion_add(direction, 0.8)
	}
if speed > 4.5{
	speed = 4.5
	}

if  targetvisible == 1 and random(40)<1{
	direction = point_direction(x,y,target.x,target.y)
	walk = 15
	//sound_play(sndCrystalShield)
	}
else if (random(40) < 1){
	direction += random_range(-90,90)
	walk = 30+random(15)
	}
if bskin = -1{
	walk = 20
	direction += random_range(-30,30)
	time += 1
	if random(4) < 1
		with instance_create(x,y,BloodStreak){
			image_angle = 60+random(60)
			depth = other.depth+1
			motion_add(image_angle,random(2))
			}
	if time > 100
		my_health = 0
	}
#define enemychicken_dead
repeat(13){
	with instance_create(x,y,Feather){
		motion_add(random(360),random(4))
		image_angle = random(360)
		}
	}
if bskin >= 0{
	with instance_create(x,y,Corpse){
		sprite_index = sprMutant9HeadIdle
		motion_add(random(360),8)
		}
	with instance_create(x, y, CustomEnemy){
		hitid = [sprMutant9Idle,"CHICKEN"]
		bskin = -1
		spr_idle = sprMutant9HeadlessIdle
		spr_walk = sprMutant9HeadlessWalk
		spr_hurt = sprMutant9HeadlessHurt
		spr_dead = sprMutant9Dead
		snd_hurt = sndMutant9Hurt
		snd_dead = sndMutant9Hurt
		direction = random(360)
		gunangle = direction
		mask_index = mskBandit
		spr_shadow = shd24
		size = 1
		team = 1
		maxhealth = 99999
		canmelee = 1
		meleedamage = 3
		target = 0
		targetvisible = 0
		fire = 100
		walk = 100
		time = 0
		raddrop = 16
		on_step = script_ref_create(enemychicken_step)
		}
	}
//}
//{ Rebel
#define enemyrebel_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [global.rebelidle,"LITTLE BANDIT"]
	spr_idle = global.rebelidle
	spr_walk = global.rebelwalk
	spr_hurt = global.rebelhurt
	spr_dead = global.rebeldead
	snd_hurt = sndMutant10Hurt
	snd_dead = sndMutant10Hurt
	direction = random(360)
	gunangle = direction
	mask_index = mskBandit
	spr_shadow = shd24
	gunsprite = global.rebelgun
	size = 1
	team = 1
	maxhealth = 25
	canmelee = 0
	target = 0
	targetvisible = 0
	fire = 100
	walk = 0
	raddrop = 16
	on_draw = script_ref_create(drawenemygun)
	on_step = script_ref_create(enemyrebel_step)
	repeat(random_range(6,12)+GameCont.loops){
		enemyally_create(_x, _y)
		}
	return id;
	}
#define enemyally_create(_x,_y)
		with instance_create(_x, _y, CustomEnemy){
			hitid = [global.allyidle,"BANDIT"]
			spr_idle = global.allyidle
			spr_walk = global.allywalk
			spr_hurt = global.allyhurt
			spr_dead = global.allydead
			snd_hurt = sndBanditHit
			snd_dead = sndBanditDie
			direction = random(360)
			mask_index = mskBandit
			spr_shadow = shd24
			gunsprite = sprAllyGunTB
			creator = other
			team = 1
			maxhealth = 15+(GameCont.loops*3)
			canmelee = 0
			target = 0
			targetvisible = 0
			fire = 100
			gunangle = random(360)
			walk = -50
			raddrop = 2
			on_draw = script_ref_create(drawenemygun)
			on_step = script_ref_create(enemyally_step)
			on_destroy = script_ref_create(standarddroprate)
			return id;
			}
#define enemyrebel_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && !collision_line(x,y,target.x,target.y,Wall,0,0))
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}

if fire > 0 
	fire-=1
	
if walk > 0{
	walk -= 1
	motion_add(direction, 0.8)
	}
if speed > 4.5{
	speed = 4.5
	}

if targetvisible == 1 and random(40)<1{
	direction = point_direction(x,y,target.x,target.y)
	walk = 15
	//sound_play(sndCrystalShield)
	}
else if (random(40) < 1){
	direction += random_range(-90,90)
	walk = 30+random(15)
	}
if fire <= 0 and targetvisible == 1{
	gunangle = point_direction(x,y,target.x,target.y)
	direction = gunangle
	if distance_to_object(target) < 100{
		fire = 65 + random(5)
		gunangle = point_direction(x,y,target.x,target.y)
		repeat 4 
		if instance_exists(self){
			with instance_create((x+lengthdir_x(4, gunangle)),(y+lengthdir_y(4, gunangle)),EnemyBullet1){
				sound_play(sndEnemyFire)
				hitid = [global.rebelidle,"REBEL"]
				damage = 3
				speed = 5
				team = other.team
				direction = other.gunangle+random_range(-10,10)
				creator = other
				image_angle = direction
				}
			wkick += 5
			wait 5
			}
		}
	}
// ally
#define enemyally_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = -1;
if(instance_exists(target) && !collision_line(x,y,target.x,target.y,Wall,0,0))
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target >= 0 and targetvisible{
	var p = instance_nearest(x,y,Player)
	fire -= 1
	if target.x > x
		right = 1
	else
		right = -1
	}
else if instance_exists(creator){
	if creator.x > x
		right = 1
	else
		right = -1
	}

if fire > 0{
	fire -= 1
	}

if walk > 0{
	walk -= 1
	motion_add(direction, 0.8)
	}
if speed > 3.5{
	speed = 3.5
	}	
	

if targetvisible == 0 and (random(40) < 1){
	direction = random(360)
	walk = 30+random(15)
	}

if instance_exists(creator) and distance_to_object(creator)>60 and random(12)<1{
	direction = point_direction(x,y,creator.x,creator.y)
	walk = 30+random(15)
	}	
	
if fire <= 0 and targetvisible == 1{
	gunangle = point_direction(x,y,target.x,target.y)
	if distance_to_object(target) < 100{
		fire = 40 + random(5)
		with instance_create((x+lengthdir_x(4, gunangle)),(y+lengthdir_y(4, gunangle)),EnemyBullet1){
			sound_play(sndEnemyFire)
			hitid = [global.allyidle,"Bandit"]
			damage = 3
			speed = 4
			team = other.team
			direction = other.gunangle+random_range(-10,10)
			creator = other
			image_angle = direction
			}
		wkick += 5
		}
	}
#define drawelitebanditgun
if gunangle < 180
	draw_sprite_ext(sprAllyGunTB,0,x-lengthdir_x(wkick,gunangle),y-lengthdir_y(wkick,gunangle),1,right,gunangle,c_white,1);
	draw_sprite_ext(sprite_index,image_index,x,y,right,1,0,c_white,1);
if gunangle >= 180
	draw_sprite_ext(sprAllyGunTB,0,x-lengthdir_x(wkick,gunangle),y-lengthdir_y(wkick,gunangle),1,right,gunangle,c_white,1);

//}
//{ Rogue
#define enemyrogue_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	revived = 0
	if "specialrevive" in other
		revived = 1
	if revived = 0{
		hitid = [sprMutant12BIdle,"LIEUTENANT"]
		spr_idle = global.rogueback
		spr_walk = sprMutant12BWalk
		spr_hurt = sprMutant12BHurt
		spr_dead = global.roguedead
		snd_hurt = sndMutant12Hurt
		snd_dead = sndMutant12Dead
		}
	else{
		sound_play(sndFreakPopoRevive)
		hitid = [global.roguefreakidle,"FREAK"]
		spr_idle = global.roguefreakidle
		spr_walk = global.roguefreakwalk
		spr_hurt = global.roguefreakhurt
		spr_dead = global.roguefreakdead
		snd_hurt = sndFreakPopoHurt
		snd_dead = sndFreakPopoDead
		}
	direction = random(360)
	gunangle = 112
	mask_index = mskBandit
	spr_shadow = shd24
	gunsprite = sprPopoGun
	corpse = 0
	light = 1
	size = 1
	team = 3
	maxhealth = 40 + ((40*instance_number(Player))*(GameCont.loops))
	my_health = maxhealth
	canmelee = 0
	raddrop = 0
	target = 0
	targetvisible = 0
	roguetime =  0
	intro = 0
	walk = 0
	alrm0 = 30	//fire
	alrm1 = -1	//strike
	strike_x    = x;    //xpos
	strike_y    = y;    //ypos
	strike_d    = 0;    //direction
	on_step = script_ref_create(enemyrogue_step)
	on_destroy = script_ref_create(enemyrogue_death)
	repeat((GameCont.loops+1) * 2)
		instance_create(x,y,IDPDSpawn)
	return id;
	}
//portal strike draw code is from saniblue's hostile rogue mod. i dont know why i felt the need to recreate rogue without just using all of sani's code
#define enemyrogue_step
on_draw = script_ref_create(enemyrogue_draw)
if roguetime < 1000 roguetime++
		else roguetime = 0;
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt){
			image_index = 0;
			sprite_index = spr_hurt;
			with instance_create(x,y,PopoExplosion){
				team = other.team
				image_xscale = 0.5
				image_yscale = 0.5
				image_speed += 0.20
				hitid=other.hitid
				}
			with instances_matching_ne(projectile,"team",other.team) if distance_to_object(other)<60
				instance_destroy()
			}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}
	
if intro == 0 and target > 0 and targetvisible and (distance_to_object(target)< 120||my_health <= maxhealth-1){
	if revived = 0
		spr_idle = sprMutant12BIdle
	instance_create(x,y,AssassinNotice);
	sound_play(sndMutant12LowA);
	if mod_variable_exists("mod","options","intropan"){
		if mod_variable_get("mod","options","intropan") == "1"{
			if mod_variable_get("mod","options","bossportraits") == "1"{
				mod_script_call("mod", "bossintros", "boss_trigger","LIEUTENANT",mskNone,global.rogueintro,global.rogueintrofg,self,60)
				}else
				mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
			}
		else if mod_variable_get("mod","options","bossportraits") == "1"{
			mod_script_call("mod", "bossintros", "boss_trigger","LIEUTENANT",mskNone,global.rogueintro,global.rogueintrofg,Player[0],60)
				}
		}
	
	gunangle = point_direction(x,y,target.x,target.y)
	intro = 1
	}
if intro == 0 and target > 0 and revived > 0{
	if mod_variable_exists("mod","options","intropan") and mod_variable_get("mod","options","intropan") == "1"{
		mod_script_call("mod", "bossintros", "boss_trigger","",mskNone,mskNone,mskNone,self,60)
		}
	gunangle = point_direction(x,y,target.x,target.y)
	intro = 1
	}
if intro == 1 and targetvisible = 0 if random(80)<1{
	var here = instance_nearest(x+random_range(-120,120),y+random_range(-120,120),Floor)
	instance_create(here.x+16,here.y+16,IDPDSpawn)
	}
	
if speed > 4.0{
	speed = 4.0
	}

if intro = 1 and target > 0 and walk != -1{
	if targetvisible == 1 and random(40)<1{
		direction = point_direction(x,y,target.x,target.y)
		walk = 15
		//sound_play(sndCrystalShield)
		}
	else if (random(40) < 1){
		direction += random_range(-90,90)
		walk = 30+random(15)
		}
	if alrm0 > 0 //fire
		alrm0-=1
	if alrm1 > 0 //strike
		alrm1 -= 1	
	if walk > 0{
		walk -= 1
		motion_add(direction, 0.8)
		}

	if random(100)<1 and walk != -1 and alrm1 == -1{
		sound_play(sndRogueAim);
		alrm1 = 25
		if collision_line(x,y,target.x,target.y,Wall,0,1){
			var wall = collision_line(x,y,target.x,target.y,Wall,0,1);
			strike_x = wall.x;
			strike_y = wall.y;
			strike_d = random(360);
			}
		else{
			strike_x = target.x + 48 - random(96);
			strike_y = target.y + 48 - random(96);
			strike_d = point_direction(x,y,target.x,target.y) + 180 - random(360);
			}
		}
	if alrm1 == 0{//deploy strike
		sound_play(sndPortalStrikeFireButt);
		alrm1 = -1
		walk = 60
		var startx = strike_x - sprite_get_width(sndPortalStrikeFireButt) / 2;
		var starty = strike_y - sprite_get_height(sndPortalStrikeFireButt) / 2;
		for(var i=-3;i<=3;i++){
			if instance_exists(self)
			with(instance_create(strike_x+lengthdir_x((24 * i),strike_d)+8-random(16),strike_y+lengthdir_y((24*i), strike_d)+8-random(16),PopoExplosion)){
				team = 0;
				hitid = [sprPopoExplo,"IDPD STRIKE"]
				image_xscale = 0.75;
				image_yscale = 0.75;
				sound_play(sndExplosion);
				}
			wait 2;
			}
		}
	if instance_exists(self) and alrm0 <= 0 and targetvisible == 1{ //shoot gun
		gunangle = point_direction(x,y,target.x,target.y)
		direction = gunangle + choose(-90,90)
		alrm0 = random(15)
		gunangle = point_direction(x,y,target.x,target.y)
		repeat 2 if instance_exists(self){
			with instance_create((x+lengthdir_x(4, gunangle)),(y+lengthdir_y(4, gunangle)),IDPDBullet){
				sound_play(sndRogueRifle)
				hitid = other.hitid
				damage = 3
				speed = 8
				team = other.team
				direction = other.gunangle+random_range(-10-(10*other.revived),10+(10*other.revived))
				creator = other
				image_angle = direction
				}
			wkick += 5
			wait 3 - revived
			}
		}
	}
#define enemyrogue_death
	var xd_ = x;
	var yd_ = y;
	var fl_ = instance_nearest(xd_,yd_,Floor);
	instance_create(x,y,PopoExplosion)
	with instance_create(x,y,Corpse){
		sprite_index = other.spr_dead
		specialrevive = "rogue"
		}
#define enemyrogue_draw
	if (((gunangle+270) mod 360)>180) right = 1 else right = -1;
	if gunangle < 180 draw_sprite_ext(gunsprite,0,x,y,1,1*right,gunangle,c_white,1);
	draw_sprite_ext(sprite_index,image_index,x,y,right,1,image_angle,c_white,1);
	if gunangle > 180 draw_sprite_ext(gunsprite,0,x,y,1,1*right,gunangle,c_white,1);
	if alrm1 > 0{
		strike_x += lengthdir_x(1,strike_d);
		strike_y += lengthdir_y(1,strike_d);
		if target != -1{
			if instance_exists(target){
				gunangle = point_direction(x,y,target.x,target.y);
				var aimDir = point_direction(strike_x,strike_y,target.x,target.y);
				var diff = cycle(aimDir - strike_d, -180, 180);
				if (abs(diff) < 2){
					strike_d -= aimDir
					}
				else{
					strike_d += diff * 0.01;
					}
				}
			}
		draw_sprite_ext(sprRogueStrikeTB,roguetime,strike_x,strike_y,1,1,strike_d,c_white,1);
		}
#define cycle
    /// cycle(value, min, max)
	/// Thanks yal
    var result, delta;
    delta = (argument2 - argument1);
    result = (argument0 - argument1) mod delta;
    if (result < 0) result += delta;
    return result + argument1;
//}
//{ Skeleton
#define enemyskeleton_create(_x, _y)
with instance_create(_x, _y, CustomEnemy){
	hitid = [sprMutant14Idle,"Skeleton"]
	spr_idle = sprMutant14Idle
	spr_walk = sprMutant14Walk
	spr_hurt = sprMutant14Hurt
	spr_dead = sprMutant14Dead
	snd_hurt = sndMutant14Hurt
	snd_dead = sndMutant14Hurt
	direction = random(360)
	gunangle = direction
	mask_index = mskBandit
	spr_shadow = shd24
	corpse = 0
	size = 1
	team = 1
	maxhealth = 8
	canmelee = 1
	meleedamage = 2
	target = 0
	targetvisible = 0
	fire = 100
	walk = 0
	raddrop = 0
	on_step = script_ref_create(enemyskeleton_step)
	on_destroy = script_ref_create(enemymelting_dead)
	with instance_create(x,y-16,FireFly){
		sprite_index = sprMeltGhost
		depth = -6
		}
	return id;
	}

#define enemyskeleton_step
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;}
		}
	else{
		if(speed > friction) 
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	

if target > 0 and targetvisible{
	image_xscale = right
	if target.x > x
		right = 1
	else
		right = -1
	}

if fire > 0 
	fire-=1
	
if walk > 0{
	walk -= 1
	motion_add(direction, 0.8)
	}
if speed > 4.5{
	speed = 4.5
	}	
if speed > 2.5 and random(8)<1{
	speed = 2.5
	}
if  targetvisible == 1 and walk != -1 and random(50)<1{
	direction = point_direction(x,y,target.x,target.y)
	walk = 10
	}
else if (random(40) < 1) and walk != -1 {
	direction += random_range(-90,90)
	walk = 30+random(15)
	}

//}
//{ Frog Knight
//}
#define drawenemygun
if image_alpha > 0 and "wkick" in self{
if gunangle < 180
	draw_sprite_ext(gunsprite,0,x-lengthdir_x(wkick,gunangle),y-lengthdir_y(wkick,gunangle),1,right,gunangle,c_white,1);
	draw_sprite_ext(sprite_index,image_index,x,y,right,1,image_angle,image_blend,1);
if gunangle >= 180
	draw_sprite_ext(gunsprite,0,x-lengthdir_x(wkick,gunangle),y-lengthdir_y(wkick,gunangle),1,right,gunangle,c_white,1);
}
#define gun_spin
with creator if "wkick" in self{
	draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,1,image_angle,c_white,1);
	draw_sprite_ext(sprBanditBossGun,0,x-lengthdir_x(wkick,gunangle),y-lengthdir_y(wkick,gunangle),1,image_xscale,gunspin+gunangle,c_white,1);
	}

instance_destroy()
#define DropWeapon
if weapondrop != 0
with instance_create(x,y,WepPickup){	
	wep = other.weapondrop
	rot = other.gunangle
	motion_add(random(360),random(8))
	}
with instance_create(x,y,Corpse){
	sprite_index = other.spr_dead
	}
#define banditbossoutro
if !instance_exists(BanditBoss) and instance_exists(Player){
	var fl_ = instance_nearest(argument0,argument1,Floor);
	mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,fl_,0)
	}
instance_destroy()
#define standarddroprate
	scrPickups(50)
#define scrPickups(_dropchance)
    with(instance_nearest(x,y,Player)){
        var _need = 0;
        var w = wep;
        repeat(2){
            if(w = bwep && bwep = 0) _need += 0.5;
            else{
                if(ammo[weapon_get_type(w)] < typ_amax[weapon_get_type(w)] * 0.2) _need += 0.75;
                else{
                    if(ammo[weapon_get_type(w)] > typ_amax[weapon_get_type(w)] * 0.6) _need += 0.1;
                    else _need += 0.5;
                }
            }
            w = bwep;
        }

        if(random(100) < _dropchance * (_need + (skill_get(4) * 0.6))){
            if(random(maxhealth) > my_health && random(3) < 2 && GameCont.crown != 2) instance_create(other.x + random_range(-2, 2), other.y + random_range(-2, 2), HPPickup);
            else if(GameCont.crown != 5) instance_create(other.x + random_range(-2, 2), other.y + random_range(-2, 2), AmmoPickup);
        }
    }
	
