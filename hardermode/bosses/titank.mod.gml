// /loadlive mods/blaacmod/bosses/titank.mod.gml
//b: blaac's going in
#define init
global.debug = 0;
//{ sprites


/*global.sprTitankBody = sprite_add_base64("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",
1, 70, 50);*/
/*global.sprTitankBody = sprite_add_base64("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",
1, 70, 50);*/
global.sprTitankBody = sprite_add_base64("",
20, 70, 50);
global.sprTitankBodyHurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAIwAAABkCAYAAABU19jRAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAALBSURBVHhe7dnLjuM4EAXR/v+fdpfcaoE0Qy7S1oNJxgFi4cRgpiTd3fx5PB6z9i36dw4fHoOXotvV0r8tfHgMUK2Wf/YOr8/VfXjssFnQs3cVHjtI/9C7uTU83pDq0Lu7NDxelL5D7/T08HhyOha949PC4wnpGvTuDw2PB6Z70Lc4JDwekPpA3+ar8PhF6hN9q4/C4wcpBvp2TeGxMcVC37A6PFam2Oib/hoeK9IY6Nu+DY9v0pjoW2N43Eljo29ehEdIc6Bvn4XHlzQX2sAWHpM0J9rCMzyuaW60id3BSItiG8XhJymV7SP7sSalsn1kP36SyLaRdCxLEtk24lhUy8GoSTYYqYaDURMHoybPwUjVHIyaOBg1cTBq4mDUxMGoiYNREwejJg5GTRyMmjgYNVkG42hUy//5qCYORk0cjJpsg3E0+s1zJw5GtRyMmhSDcTTas20kHcuSRLaNpGNZksi2kXQsSxLZNpKO5X9SKttH9mNNSmX7yH6sSalsH9mPNSmV7SP7kSQtim0UhzVpUWyjOKxJi2IbxWFNWhTbKA5JmhttwsFoF23CwWgXbeLtYJY0J9rCMzwmaU60hWd4TNKcaAvP8PiS5kIb2MLjS5oLbWALj5DmQN8+C487aWz0zYvw+CaNib41hsdf0ljoG++Gx4o0Bvq2b8NjQ4qJvmVVeGxMsdA3rA6PH6a+0TdrDo9fpr7QN/o4PB6U7kXf5OvweHC6Fn2Dw8LjSelc9M4PD48XpGPQuz01PF6c2tA7vCw83pgYvatbwmNHzYreRRfhseNGRc/aZXjsvNHQM3YbHjtvNPSM3YbHzhsNPWO34TFAo6Bn6zo8BmgU9Gxdh8cgRUfP1H14DFRU9CwhwmOwoqFnCBMeAxYF/e2hwmPQekd/c7jwGLze0N8YNjwO1F3obxkiPA7cWei/NWCPP38BeBnzQKK7WOYAAAAASUVORK5CYII=",
1, 70, 50);
/*global.sprTitankBodyTop = sprite_add_base64("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",
1, 70, 50);*/
/*global.sprTitankBodyTop = sprite_add_base64("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",
1, 70, 50);*/
global.sprTitankHead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAIwAAABkCAYAAABU19jRAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAECSURBVHhe7dZLCsIwFAXQ7suBS3AbTl2IW3EuLq42lZRYQqnST6LnwAUpRdO+y8MGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKhMe7s/firhmV6Pxlraw/EUX3R2CCUnnvt8ucbPrKwvTFqaqeSGtmZyZxgn3Kcw2/moMCUmlEVhttUXJnnp1cR22Ue1W8Z22U91W8Z22V81pVGWcgyliQnXSkgoSYyylGX4T5OWJ1zfI2lJRmehIP1QcsXJDG6xpFtkoighFGoYUlqeqRLlhj43ue9Lz9CFirwNb055vsn4d7rwI3LDXSJ/omme5/USRYuUsnUAAAAASUVORK5CYII=",
1, 70, 50);
global.sprTitankEye = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABIAAAAFCAYAAABIHbx0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABASURBVChTY/j//z9+zACkQBhdHA1jFYRjkPQKWyALSBMwDKIYxIEpJhUDSRANYuHG2DThwFgFUTARhvz//58BACc78fShfJPDAAAAAElFTkSuQmCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
1, 9, 3);
global.sprTitankShadow = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAIoAAABFCAYAAACVOX4FAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIvSURBVHhe7djZcoJQEEXR/P9Pm2hFCzYHBWS4w07VSsUj3KG7n/Jzu92a9/dz/3UY7teiGNaGjSsNz1ujGJaKDagd71eyGJaChW0d71+SGF6Fhesd63OlGJ6JxVHGup0thkdjEbQO63mGGB6Bl9U+WOejxHBPvJiOwbrvLYZ74EV0DvZhLzHciofWtdifb8RwCx5SZWCftorhGjyYysS+rRXDJXgQ1YF9XCqGn3Bz1YX9XCKGc7ih6sb+vhPDhJuoDezznBgSF1db2O8khkNcVG1i3ymGT1xMbWP/h2J4x0XUB87BUw7xsvrCebibBnhJfZrMxSTAC+rTZC5GH/Cw+jaajdcfeEi6c1C0yGhQ+KU05KBoEQdFi/zPSP5SghhKFEOJYihRDCWKoUQxlCiGEsVQGvM/s/rkMSMOij5xULTIa1AcFs15zYeDoncmg/L4gIfUt9FsDD88AjysPk3mYhLgBfVpMhcMHiFeUl84D3eT4Ikvqw+cg6cYPnERtY39H4rhEBdTm9h3iiFxUbWF/U5imHBxtYF9nhPDOdxEdWN/34nhJ9xQdWE/l4jhEtxcdWAfl4rhGjyIysS+rRXDLXgwlYF92iqGW/GQuhb7840YfosH1rnYjz3EcE+8hI7Buu8thkfgxbQP1vkoMTwaL6t1WM8zxPAsLIDeY/3OFMOrsDC9Y32uFMNSsHCt4/1LEsNSsbC14/1KFsPasAGl4XlrFMPWsHF7437tuf38Amp+5/MIxytHAAAAAElFTkSuQmCC",
1, 69, 34);
global.sprTitankLeg = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABwAAACFCAYAAABIZJgfAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAALLSURBVGhD7ZdbbhNBEEWzGdYBm0Hig58shJUg8Y9YXPDp8h1Vddf0PGK3Ie4rHTmZvjfHduxgXq55O4iSnfUoefv5/fMh2MCv338CWRe+fvlUuO5uJxR1/+5CD/2PLYThwm+vP8YLYRFykR+kQi2ouYnQk0k8U1izKYRMJO4iFMOFcAtheB9mpZr3CJu/NFmp5qyQfi0ky8UaPf/103JNuCMZ+jl0bWJZDsBLvCwZppKtR0eWA/90eCSla5OSVZnoCutyzU2FWbmGDl2blCzX/a3nLkJ/7r+HlV/FA4R1MWO4EOjapCScDRdmTOEmdG1SknY8zyEEujaxpOUMujYpSTueKdyErk1K0o7nOYTzfdiFrk1K0o7nOYTzX4sudG1SknY8w4XIhgn5FDdEiEisCcnyfK9Bx6ohQQASb+xMKLxoY7hIauHaC0ZZZBroB+wV1uwS+oGEktKxakjYePQA6Fg1phl4Id/TsWpIsxNTmI6m8JJmI6YwHUkGdKwaEvqe/0PooWPVkLQLyLp/S7ORh45VQ9IuTGE68tCxakjahY8vRDaFXehYNSTtwnO8SoGOVWPSkYeOVUPSLkxhOvLQsWpI2gVk823RhY5VQ9IuH02Q9YRk+UWrvGd0yfLpTuzc5f8p5WvOrJKmSPTIuD0k9E8Lt0eEYrfQjzycWSXNFK4mjDycWSVN0x8u1KucM6vkaYaCM6ukafoPEe54O03hapr+FCrNUHBmlTRNfwqVZig4s0qapj+FSjMUnFklTdOfQqUZCs6skqbpP4fw3/yIUX/c0/ecWSVN2MC7hMCZVdKEDRwSSqqvhwhrOLNKmkaIbI+QLOUjo0vCHTywOy/kkSHTI+SaHfVTyifu6XmhZIJrdtTNY4RiuJC3BdfsqJ8pXMsUrua0kK6EQ94W6g8XwhT6hCFwzY66CZsjQnJUppySKadGl3R2Ly9/AUSHNqxwhgUEAAAAAElFTkSuQmCC",
2, 0, 0);
global.sprTitankLegDark = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABwAAACFCAYAAABIZJgfAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJzSURBVGhD7ZfdbRsxEITVRSpIFQngdJAqAuTBLy7ElQTIe5DiFH9cz4HkLSne+URF9g4wkMGd0Xe/8t3pVeeNlrxZz0nnX48P5x/fPg+ZLB38+8/f88+n58VeHn/9dEp+7R0HbIGvDsxN530D8XTgl4fv84F4AVLkyxSoIbkPA+YBDyQH0PNFIPZg+GpAeToQHwEs7sOR4luAq1+aawLp1EBUDHLr+GMyZK2SlDZAG+NZ30PWKqZimENk1smQtUqSC7y0d2gZ5ocjN1AyZK2StALWvS6wDtc+FEixDtcmQ9YqSenCEWgaUHMPqPNP1iqm+cCRe2o6kAxZqyTdFug5gF0H0DNATNYqpgAmB9DzTYBxHzYdQM/A4r9F03cBBDYNyFPcFCAguQVEKaxAbcpkLFooPSDnEIHVJWPRUinESdaJzn0JmO+ZgK0LRlpCKugLRoG1h4C5BZTJWLRQ8/zraJGxaKlVMYc5F4wUwHEgDuCLArgdyOf7Bcp7gd3f0gCSsWihAM4DAgugW8R7gB/jKsVkLFoqgPcBjNvCLeKtQB5NgPWAKIW1ZTJlZhZxtXopHYGhBZhDWWNmEVfFSymfm4CyypiZRVytXkqHgd756Jw/KYBN7QbWvenASze9dN9AzMwivgLYUgCbCmBLAWwqgC0FsKn7Bv6fjxj14x5P39OBrDGziKu3AfVOwec0YO49QGAjQJQgKvA3azbqqtjYURjaDWQvyWsPWbNRX8tWyqzZqKv9wPzQDJw/6TbA/KJhzUZ9HQLktmDNRn0FsKUANrUbSFbAKbeFetOBOIC5pgNRKm+ASQuUv21pXLtKL+r0Tqd/PrrH+IIQIToAAAAASUVORK5CYII=",
2, 0, 0);
global.sprTitankLegDestroyed = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABwAAACFCAYAAABIZJgfAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMFSURBVGhD7ZdNbhNBEEZ9gaw5AcqaE8BlkFiw4SCcBIk94nAhr2uqVd39Tc+P7Y6I+5OeHE99NS/jeBLnsuTlIB4165Hy8uv750OwA7///C1QXfj65WNi2bud0Kn7dxdG6L9vIQwXfvvxc7wQspCDnMgLtaDmJsKIkkSmsGZTCErk3EXoDBfCLYTFfahKNdcIm980qlRzVki/FpJ8sMZf//plWVJ8Iwo/D11bseQBREmUiUUp2bo6kgfx5Yi4lK6tpKzKnK6wLtfcVKjKNXTo2kpKPh4fI3cRxnl8Dis/ijcQ1kXFcCHQtZWUYjZcqJjCTejaSorsRB5DCHRtxSLLCrq2kiI7kSnchK6tpMhO5DGE8z7sQtdWUmQn8hjC+deiC11bSZGdyHAhsmFCPsUNESJy1oQkv95r0LFqkUIALt7YM6ETRRuLWVIL194wnizzBT/BXmHNLmFccKFL6Vi1SLET8QugY9UyzUIU8pyOVYs0e84UyqUpfE2z40yhXHIZ0LFqkaIf+T+EETpWLSK7gKz7u1QtRehYtYjswhTKpQgdqxaRXXj/QmRT2IWOVYvILjzGuxToWLWMXIrQsWoR2YUplEsROlYtIruAbN4WXehYtYjs8tEEWU9I8g/ay3uWXpM/3Tk79/Q/pXzNzCoySeJXxuMhYXxZeDwidHYL41KEmVVkpnA1xVKEmVVkmv5wob/LmVlFp1l0mFlFpum/iXDH7TSFq2n6U+hpFh1mVpFp+lPoaRYdZlaRafpT6GkWHWZWkWn6U+hpFh1mVpFp+o8h3P0X/9Pzc3MCZlaRafq7hXzci0L/+MfMKjK57xwSxkXkHGNmFZliB05dIV/7c2ZWkble6LKzQmR7hCQJKMfHZdZL8U3ulV04eeSIkCtD5lfIMRt1wsk/PD2NF0bpUKE/LuNeksjZLXRZ5IyQ24JjNurkTYTxZXWWcS/nhYpl3MsU6igZLONe8j0IV90WsIx7ScLDN76SwTLuJQthCnOUDJZxL+eE5ITMc1zmOSHzdGSXyz9NA/Srwn3nRgAAAABJRU5ErkJggg==",
2, 0, 0);
global.sprTitankLegDarkDestroyed = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABwAAACFCAYAAABIZJgfAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAKfSURBVGhD7ZdNjtNAFIRzgVnPCdCsWYM03IBTILFgw0E4CRJ7xOECXz+X1e28brcdp6MMr6RSZvyq/Pk3sU+TzhstebOWk84/v72ev3x612WydPCv33/OX7//mO3l8cfnU/LUOw5YA98cmJvO2wbi4cAPr5/HA/EMpMjKFFhCch8GzAMeSA6g51Ug9mD4ZkB5OBAfASzuw57iNcCLb5pbAuksgagY5Nbxx2TIWiUpbYA2xrPWQ9YqpmKYQ2SWkyFrlSQXuLZ3aB7mhyM3UDJkrZJ0AVz2msBleOlDgRSX4aXJkLVKUrpwBBoG1NwD6vyTtYppPLDnnhoOJEPWKkn3BXoOYNMB9AwQk7WKKYDJAfR8F2Dch1UH0DOw+LWo+iGAwIYBeYobAgQk14AohRVYmjIZixZKD8g5RGB1yVi0VApxknWic68B8z0TsHbBSHNIBa2gF7h0FzC3gDIZixaqnn8dLTIWLXVRzGHOBSMFsB+IA/hPAdwO5PPtAuW9wOZ3aQDJWLRQAMcBgQXQLeI9wP/jKsVkLFoqgI8BjNvCLeKtQB5NgLWAKIW1ZTJlZhZxdfFS2gNDMzCHsoyZRVwVL6V8bgLKKmNmFnF18VLaDfTOR+P8SQGsajdw2RsOXLvppccGYmYW8RXAmgJYVQBrCmBVAawpgFU9NrD7F//9y0tRvimQx70cyNP3zYF5ETjLmFnE1TF7qDch/mdmEVfXAwXbCwTWA0QJQFjgCbimtLHayF7YiZXn3gJkL8lrD1lmo4ZY+fPT03hgDh0K1Oc0bqm4cLqBguXeA+S2YJmNGroLMD+s8jRu6bg9xNO4pQD68mB4GrdU/NJcdVvgadzS/F06HIgDOMuD4Wnc0j4g2gGTZih/26JO7YBJDdjp9Bc65ZrvvfFM0AAAAABJRU5ErkJggg==",
2, 0, 0);
global.sprTitankLegHurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAA4AAACFCAYAAABrP8nKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAEySURBVFhH7ZM7jsNQDAN9/0t7QUMhyI0l5tOk0ABTyOaU7zjPE77L8Ul0seHAhgMbDiD8JL4e8ob3bDiw4cCGAxsObDjwffhOfO03vGfDgQ0HNhzYcGDDgR8IX4m51QgmuNUIJrjVCCa41QgmuNUIJrjVCCa41QgmuNUIJrjVCCa41QgmuNUIJrjVCCa41QgmuNUIJrjVCCa41QgmuNUIJrjVCCa41QgmuNUIJrjVCCa41QgmuNUIJrjVCCa41QgmuNUIJrjVCCa41QgmuNUIJrjVCCa41QgmuNXoYYft7Cg7bGdH2WE7O8oO29lRdtjOjrLDdnaUHbazo+ywnR1lh+3sKDtsZ0fZYTs7yg7b2VF22M6OssN2dpQdtrOj7LCdHWWH7ewQ//O0efogPrj5dx5/PMnaky122hEAAAAASUVORK5CYII=",
1, 0, 0);
global.sprSnowFootstep = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABEAAAAMCAYAAACEJVa/AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAB/SURBVDhPlY7BDYAwDAO7/yBswIclkGCgQCpd5YQUwePUxLGtNjML7Md5P1FTqntYYFY00/uhOmaNXXWywZQNzOxo2TtMoEfmZd16yPGZO4QFNMxLATclLIDRX+VXiZPDswLnISiEKfhU8mYESlUbQw77jrkKqn+Iyuw3tW7tAjlRd3OWX9vvAAAAAElFTkSuQmCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
1, 8, 9);
/*global.sprSnowClump = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAAgAAAAFCAYAAAB4ka1VAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAySURBVBhXY/j//z8cP378+D8II4uBifOXLoMl0DFYAUgSlwIQhivApQhuBTb8//9/BgCvUIkXliqBzgAAAABJRU5ErkJgggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
1, 4, 3);*/
global.sprSnowClumpBig = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABAAAAAKCAYAAAC9vt6cAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABPSURBVChTY/j//z8Gfvz48X9sGF0dCKNwsGnChpH1kKwZhlEMOH/pMlZFhDB1DABphmFsighh6hpAjiHwMCDHEHAYgAgYRjcIF0bo+c8AALHaLl321ivNAAAAAElFTkSuQmCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
1, 8, 7);
/*global.sprTitankBodyHitmask = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAADQAAAAVCAYAAAAJiM14AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACYSURBVFhH7c/bDoAgDANQ/v+nsV7A0I0siMbN+HCqKYIs5ZzvkfCYgbyDWpr4Mk9BjlJLgX/0FqRFLSs+0Atkj1qKA7xCsrbgDVEgi/oiPooGeQ7Ei1FtyWVw/0De/QN5h/zQUEfueDEaZDvQij+KAlnUlwZv8ArJRNHgA7xA9qilwAe+BWlRSxP/6CnIUWp5CV9mFHJeTgvWRmcYAAk69gAAAABJRU5ErkJggg==",
1, 26, 11);*/
global.titankportrait = sprite_add_base64("",1,246,0 )
global.titankportraitfg = sprite_add_base64("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",1,246,0 )
global.titankportraitbg = sprite_add_base64("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",1,246,0 )
//}
#define step

if(global.debug)
{
GameCont.area = "city";
	with(Player)
	{
		my_health = 500
		if(instance_exists(self))
		{
			//alarm10 = 90;
			if(button_pressed(index, "horn"))
			{
				for(var l = 0; l < 999; l += 1)
				{
					if(weapon_get_name("#" + string(l)) == "GUITAR")
					{
						wep = l;
					}
				}
				titank_create(mouse_x[index], mouse_y[index]);
			}
		}
		//if(GameCont.area != 5
		//&& !instance_exists(Portal))
		//{
		//	GameCont.area = 5;
		//	GameCont.subarea = 2;
		//	instance_create(x, y, Portal);
		//}
	}
}
/*  //spawning from hunter
if(instance_exists(LilHunter))
{
	with(LilHunter)
	{
		var hp = 0;
		with(enemy)
		{
			if(id != other)
			{
				hp += my_health;
			}
		}
		with(instance_create(x, y, CustomObject))
		{
			thp = hp;
			
			if(fork())
			{
				while(instance_exists(self))
				{
					var ehp = 0;
					with(enemy)
					{
						if(id != other)
						{
							ehp += my_health;
						}
					}
					if(ehp < thp/2)
					{
						with(Player)
						{
							if(index == 0
							&& fork())
							{
								var f = instance_nearest(x, y, Floor);
								titank_create(f.x, f.y);
							}
						}
						instance_destroy();
					}
					wait(1);
				}
			}
		}
		instance_change(Wind, 0);
	}
}
*/
#define wanttitank
with instance_create(0,0,CustomObject){
	enemies = instance_number(enemy)
	name = "wanttitank"
	on_step = script_ref_create(wanttitank_step)
	return id;
	}
#define wanttitank_step
if (instance_number(enemy) < (enemies/6)*5) && instance_exists(Player){
	var wall_ = instance_nearest(Player.x+random(100),Player.y+random(100),Wall)
	var wx = wall_.x;
	var wy = wall_.y;
	if fork(){
		wait(60)
		if instance_exists(self){
			titank_create(wx, wy)
			instance_destroy()
			}
		exit;
		}
	}
#define titank_create(tankx, tanky)
if(fork()){
	sound_play(sndExplosionL);
	sound_play_music(-1);
	
	for(var i = 0; i < 360; i += 4+irandom(4)){
		with(instance_create(tankx+lengthdir_x(70, i), tanky+20+lengthdir_y(36, i), Dust)){
			speed = random(4);
			direction = 90;
			}
		}
	with(Wall){
		if(point_distance(x+8, y+8, tankx, tanky) <= 64){
			instance_create(x, y, FloorExplo);
			instance_destroy();
			}
		}
	
	wait(45);
	
	sound_play(sndExplosionXL);
	for(var i = 0; i < 360; i += 3+irandom(3)){
		with(instance_create(tankx+lengthdir_x(70, i), tanky+20+lengthdir_y(36, i), Dust)){
			speed = random(8);
			direction = 90;
			}
		}
	with(Wall){
		if(point_distance(x+8, y+8, tankx, tanky) <= 64){
			instance_create(x, y, FloorExplo);
			instance_destroy();
			}
		}
	
	wait(35);
	
	sound_play(sndExplosionXL);
	for(var i = 0; i < 360; i += 2+irandom(2)){
		with(instance_create(tankx+lengthdir_x(70, i), tanky+20+lengthdir_y(36, i), Dust)){
			speed = random(12);
			direction = 90;
			image_xscale *= 3;
			image_yscale = image_xscale;
			depth = -8-(y > tanky ? 1 : -1);
			}
		}
	with(Wall){
		if(point_distance(x+8, y+8, tankx, tanky) <= 64){
			instance_create(x, y, FloorExplo);
			instance_destroy();
			}
		}
	sound_play_music(musBoss3);
	with(instance_create(tankx, tanky, CustomEnemy)){
		name = "titank"
		team = 1; //was 7174..okay
		legs = 4+(GameCont.loops*2);
		//hp = 100;
		maxhealth = legs*3/2;
		my_health = maxhealth
		candie = 0;
		canmove = 1;
		canfly = 1;
		spr_idle = global.sprTitankBody;
		spr_walk = global.sprTitankBody;
		spr_hurt = global.sprTitankBodyHurt;
		spr_dead = mskNone;
		spr_shadow = mskNone;
		hitid = [global.sprTitankBody,"Titank"]
		mask_index = mskNone;
		sprite_index = spr_idle;
		image_alpha = 0;
		image_speed = 0.4;
		z = 96;
		zstart = z;
		friction = 0.05;
		attacking = 0;
		headZ = 0;
		lastatk = -1;
		kneeRelativePos = 1.25;
		image_speed = 0;
		hurtTimer = 0;
		depth = -8
		
		script_bind_draw(draw_tank, depth); 
		
		//b: intro
		if fork(){
			wait 20
			if instance_exists(self) and instance_exists(Player){
			my_health = legs
			sound_play_music(musBoss2)
			if mod_variable_exists("mod","options","intropan") and mod_variable_get("mod","options","intropan") == "1"{
				if UberCont.opt_bossintros == 1{
						mod_script_call("mod", "bossintros", "boss_trigger","",global.titankportraitbg,global.titankportrait,global.titankportraitfg,self,60)
						}else
						mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,60)
					}
				else if UberCont.opt_bossintros == 1{
					mod_script_call("mod", "bossintros", "boss_trigger","",global.titankportraitbg,global.titankportrait,global.titankportraitfg,instance_nearest(x,y,Player),0)
						}
					
				}
			exit;
			}
		
		// body hitmask 
		/*with(instance_create(x, y-z, CustomEnemy))
		{
			sprite_index = global.sprTitankBodyHitmask;
			team = other.team;
			my_health = 999;
			maxhealth = 999;
			//image_alpha = 0;
			depth = -999;
			snd_hurt = sndGoldTankHurt;
			canfly = 1;
			var msk = sprite_index;
			
			if(fork())
			{
				while(instance_exists(self)
				&& instance_exists(other))
				{
					x = other.x;
					y = other.y-other.z;
					
					//trace(other.z);
					if(other.z <= 48)
					{
						sprite_index = mskNone;
						with(projectile)
						{
							if(distance_to_object(other) <= 0
							&& team != other.team)
							{
								projectile_hit(other, damage, force, direction);
							}
						}
						if(my_health > maxhealth)
						{
							with(other)
							{
								for(var i = 0; i < legs; i += 1)
								{
									foot_hp[i] -= (maxhealth-my_health)/legs;
								}
								//other.sprite_index = other.spr_hurt;
								//other.image_index = 0;
								hurtTimer = 1;
								//sound_play(sndGoldTankHurt);
							}
							my_health = maxhealth;
						}
					}
					sprite_index = mskNone;
					wait(1);
				}
				exit;
			}
		}*/
		
		/*
			init legs
			relative x/y offset from tank body
		*/
		for(var i = 0; i < legs; i += 1)
		{
			leg_x[i] = lengthdir_x(58, i*(360/legs)+45);
			leg_y[i] = lengthdir_y(28, i*(360/legs)+45);
		}
		
		/*
			init feet
			absolute x/y offset from tank body
		*/
		
		for(var i = 0; i < legs; i += 1)//b: set up feet
		{
			foot_x[i] = x+lengthdir_x(96, i*(360/legs)+45);
			foot_y[i] = y+lengthdir_y(48, i*(360/legs)+45);
			foot_z[i] = 0;
			foot_hp[i] = 150;
			
			foot_home_x[i] = lengthdir_x(96-16, i*(360/legs)+45);
			foot_home_y[i] = lengthdir_y(48-12, i*(360/legs)+45);
			foot_target_x[i] = lengthdir_x(96, i*(360/legs)+45);
			foot_target_y[i] = lengthdir_y(48, i*(360/legs)+45);
			
			// foot hitmasks
			if(fork())
			{
				var titank = self;
				with(instance_create(x, y-z, CustomEnemy))
				{
					sprite_index = mskLaserCrystal; //b: you cant have only the tips of them be hitboxes joao.
					visible = 0;
					team = other.team;
					my_health = other.foot_hp[i];
					lsthealth = my_health;
					candie = 0;
					canfly = 1;
					snd_hurt = sndHitMetal;
					friction = 10
					
					while(instance_exists(self))  //b:foot's on_step
					{
					if !instance_exists(other) instance_destroy()
					else{
						//speed = 0;
						if(speed > 0)
						{
							other.foot_x[i] += hspeed;
							other.foot_y[i] += vspeed;
						}
						if(other.foot_z[i] <= 0)
						{
							speed /= 2;
						}
						x = other.foot_x[i];
						y = other.foot_y[i]-4;
						team = other.team;
						
						/*if(other.foot_z[i] < 4
						&& other.sprite_index != other.spr_hurt
						&& distance_to_object(projectile) <= 0)
						{
							with(projectile)
							{
								if(team != other.team
								&& distance_to_object(other) <= 0)
								{
									other.my_health -= damage;
									titank.sprite_index = titank.spr_hurt;
									titank.image_index = 0;
									sound_play(sndGoldTankHurt);
									instance_destroy();
								}
							}
						}*/
						
						if(other.foot_z[i] < 4)
						{
							mask_index = mskLaserCrystal;
						}
						else
						{
							mask_index = mskNone;
						}
						
						other.foot_hp[i] = my_health;
						if(lsthealth != my_health)
						{
							/*other.sprite_index = other.spr_hurt;
							other.image_index = 0;*/
							titank.hurtTimer = 1;
							lsthealth = my_health;
						}
						
						if(my_health <= 0)
						{
							/*other.sprite_index = other.spr_hurt;
							other.image_index = 0;*/
							titank.hurtTimer = 10;
							sound_play(sndGoldTankDead); //b:had ONE explosion when the foot DIED, at its end
							if fork(){
							for(var legdie = 0; legdie < 16; legdie += 1){//b:leg corpse not sure if working
								with other{
								var legang_ = point_direction(foot_x[i],foot_y[i],x+(leg_x[i]+(foot_x[i]-x))/1.25, y+(leg_y[i]+(foot_y[i]-y))/1.25-zstart-foot_z[i])
								with(instance_create(foot_x[i]+lengthdir_x(5*legdie,legang_), foot_y[i]+lengthdir_y(5*legdie,legang_), Dust)){
									sprite_index = sprSmokeOLD
									image_speed = 0.1
									}
								with(instance_create(foot_x[i]+lengthdir_x(5*legdie,legang_), foot_y[i]+lengthdir_y(5*legdie,legang_), LaserBrain)){
									sprite_index = choose(sprPortalL1,sprPortalL2,sprPortalL3,sprPortalL4,sprPortalL5)
									}
								}
							}
							for(var legdie = 8; legdie > 0; legdie -= 1){//b: leg explosions
								
								with other{
								var legang_ = point_direction(foot_x[i],foot_y[i],x+(leg_x[i]+(foot_x[i]-x))/1.25, y+(leg_y[i]+(foot_y[i]-y))/1.25-zstart-foot_z[i])
								with(instance_create(foot_x[i]+lengthdir_x(10*legdie,legang_), foot_y[i]+lengthdir_y(10*legdie,legang_), SmallExplosion)){
									team = other.team;
									if legdie>2 mask_index = mskNone
									depth = other.depth -1
									hitid = other.hitid
									}
								}
								wait 3;
								}
							exit;
							}
						with other{
								if my_health > 0 my_health -= 1;
								//legs = my_health;
								var livelegs = my_health;
								for(var i = 0; i < legs; i += 1)
								{
									if foot_hp[i]>0{
									leg_x[i] = lengthdir_x(58, i*(360/livelegs)+45);
									leg_y[i] = lengthdir_y(28, i*(360/livelegs)+45);
								
									//foot_x[i] = x+lengthdir_x(96, i*(360/legs)+45);
									//foot_y[i] = y+lengthdir_y(48, i*(360/legs)+45);
									//foot_z[i] = 0;
									
									foot_home_x[i] = lengthdir_x(96-16, i*(360/livelegs)+45);
									foot_home_y[i] = lengthdir_y(48-12, i*(360/livelegs)+45);
									foot_target_x[i] = lengthdir_x(96, i*(360/livelegs)+45);
									foot_target_y[i] = lengthdir_y(48, i*(360/livelegs)+45);
									livelegs += 1
									}
								}
							}
						instance_destroy();
						}
						wait(1);
					}
					}
				}
				exit;
			}
		}
		
		z = 0; //b:set the z higher for the legs spawn?
		headZ = 32;
		attacking = 999;
		kneeRelativePos = 2;
		if(fork()){ //lower head
			wait(15);
			while(headZ > 0)
			{
				headZ -= 1;
				wait(1);
			}
			exit;
		}
		if(fork()){ //split legs?
			wait(15);
			while(kneeRelativePos > 1.25)
			{
				kneeRelativePos -= 0.02;
				wait(1);
			}
			kneeRelativePos = 1.25;
			exit;
		}
		var cf = current_frame;
		//b: oh god the while statements begin, i think it should try to set it to a step event so i understand them a bit more or die trying
		while(z < zstart) // head resets to normal
		{
			z += (current_frame-cf)/24;
			wait(1);
		}
		z = zstart;
		attacking = 30+irandom(30);
		
		while(instance_exists(self)){
			if(hurtTimer > 0) hurtTimer -= 0.4;
			
			/*image_index += 0.4;
			if(image_index >= image_number-0.4)
			sprite_index = spr_idle;*/
			if my_health <= 1
				canmove = 0
			
			if(my_health > 0)
			{
				_x = x;
				_y = y;
			}
			else if(my_health <= 0) and my_health != -10 //die
			{
				sound_play_music(-1);
				speed = 0;
				z = zstart;
				if(fork()) //?
				{
					while(instance_exists(self))
					{
						z -= choose(0,1,1,-1)
						x = _x+random_range(-1,1);
						y = _y;
						wait(1);
					}
					exit;
				}
				sound_play(sndBossWin);
				sound_play_music(musBossDead)
				if fork(){
					var xd_ = x;
					var yd_ = y;
					var fl_ = instance_nearest(xd_,yd_,Floor);
					wait 5
					if instance_exists(Player)
					with fl_
						if mod_variable_exists("mod","options","bossoutros") and mod_variable_get("mod","options","bossoutros") == "1"
							mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
					exit
					}
				sprite_index = spr_hurt;
				image_index = 0;
				
				my_health = -10;
				canmove = 0;
				attacking = 999;
				
				if(fork())
				{
					wait(10);
					var zz = z;
					
					repeat(35)
					if instance_exists(self){
						/*if(sprite_index != spr_hurt)
						{
							sprite_index = spr_hurt;
							image_index = 0;
						}*/
						if(hurtTimer <= 0)
						{
							hurtTimer = 1;
							
							if(fork())
							{
								wait(1);
								hurtTimer = 0;
								exit;
							}
						}
						
						z = zstart;
						z = z+random_range(-2, 2);
						
						with(instance_create(x+lengthdir_x(random(48), random(360)), y+lengthdir_y(random(96), random(360))-z, Explosion))
						{
							team = other.team;
							sound_play(sndExplosion);
							if(other.z > 16)
							mask_index = mskNone;
							
							if(!place_meeting(x, y, Floor))
							{
								x = instance_nearest(x, y, Floor).x+16;
								y = instance_nearest(x, y, Floor).y+16;
							}
						}
						with(instance_create(x+lengthdir_x(random(48), random(360)), y+lengthdir_y(random(96), random(360))-z, SmallExplosion))
						{
							team = other.team;
							if(other.z > 16)
							mask_index = mskNone;
							
							if(!place_meeting(x, y, Floor))
							{
								x = instance_nearest(x, y, Floor).x+8+random(16);
								y = instance_nearest(x, y, Floor).y+8+random(16);
							}
						}
						
						wait(2);
					}
					
					scrNuke(z, 1.5);
					repeat 5
						mod_script_call("mod","enemies","scrPickups",50)
					sound_play(sndExplosionXL);
					instance_destroy();
					exit;
				}
			}
			
			if(instance_exists(self)
			&& my_health > 0)
			{
				if(canmove)
				{
					var ip = instance_nearest(x, y, Player);
					if(ip != noone)
					{
						motion_add(point_direction(x, y, ip.x, ip.y), min(point_distance(x, y, ip.x, ip.y)/8, 0.1));
					}
				}
				speed = min(speed, 1+(1*GameCont.loops)+((maxhealth-my_health)*0.5));
				
				// smoke from foot damage
				for(var i = 0; i < legs; i += 1)
				{
					if foot_hp[i]>0 and random(foot_hp[i]) <= 1
					{
					
					var legang_ = point_direction(foot_x[i],foot_y[i],x+(leg_x[i]+(foot_x[i]-x))/1.25, y+(leg_y[i]+(foot_y[i]-y))/1.25-zstart-foot_z[i])			
					var r_ = random(100);
						with(instance_create(foot_x[i]+lengthdir_x(r_,legang_), foot_y[i]-foot_z[i]+lengthdir_y(r_,legang_), Smoke))
						{
							depth = other.depth+choose(-1, 1); //b: hey, i learned to do this exact thing on my own, gj me
							vspeed -= 1+random(3);
							hspeed = 1*random_range(-1, 1);
						}
					}
				}
				
				attacking -= 1;
				attacking = max(0, attacking);
				
				if(!attacking
				&& instance_exists(Player)
				&& my_health > 0)
				{
					var atk = -1;
					//if(random(1) <= 1)
					if(random(1) <= min(1, 0.05+(0.15*GameCont.loops)))
					{
						do
						{
							atk = irandom(2);
						}
						while(atk == lastatk)
						lastatk = atk;
						//atk = 2; // DEBUG
					}
					if(atk == 0)
					{
						// lower to the ground and fire 3d flaks upwards with gravity
						attacking += 30*4;
						
						// arm weapon
						if(fork())
						{
							while(instance_exists(self)
							&& my_health > 0
							&& sprite_index != spr_hurt
							&& image_index < image_number-0.4)
							{
								image_index += 0.4;
								wait(1);
							}
							if instance_exists(self)
							image_index = image_number-0.4;
							exit;
						}
						
						if(fork())
						{
							sound_play(sndGoldTankAim);
							
							if(fork())
							{
								var _zspd = 1;
								while(z > 48
								&& my_health > 0)
								{
									//z -= 2;
									z -= min(_zspd, max(1, point_distance(x, y-z, x, y-48)/4));
									_zspd *= 1.25;
									wait(1);
								}
								if(instance_exists(self)) z = 48;
								exit;
							}
							
							wait(30);
							
							if(instance_exists(self))
							{
								var ip = instance_nearest(x, y, Player);
								var pdir = random(360);
								if(ip != noone)
								var pdir = point_direction(x, y, ip.x, ip.y);
								var spread = 0;
								
								repeat(10)
								{
									if(instance_exists(self)
									&& my_health > 0)
									{
										sound_play(sndGoldTankShoot);
										if(fork())
										{
											with(instance_create(x, y-8-z, CustomProjectile)) //b:grenades seem better for z axis
											{
												//name = "3dbullet";
												
												var bulletip = instance_nearest(x, y, Player);
												var bullepdir = random(360);
												var bulletdist = random(360);
												var rdir = random(360);
												var rdist = random(32);
												
												if(bulletip != noone)
												{
													var rdist = random(bulletip.speed*10);
													var bulletdir = point_direction(x, y, bulletip.x+lengthdir_x(rdist, rdir), bulletip.y+lengthdir_y(rdist, rdir));
													var bulletdist = point_distance(x, y, bulletip.x+lengthdir_x(rdist, rdir), bulletip.y+lengthdir_y(rdist, rdir))/30;
												}
												alarm0 = 800
												sprite_index = sprGrenade
												team = other.team;
												hitid =  other.hitid
												speed = bulletdist;
												direction = bulletdir;
												friction = 0;
												image_angle = direction;
												z = other.z-4;
												oz = z;
												zspeed = -12;
												var msk = mask_index;
												mask_index = mskNone;
												
												while(instance_exists(self))
												{
													image_index = 0
													speed = bulletdist*0.6;
													zspeed += 16/30;
													z += zspeed;
													y += zspeed;
													depth += zspeed;
													image_angle = point_direction(x, y, x+hspeed, y+vspeed+zspeed);
													mask_index = mskNone;
													
													if(zspeed >= 0
													&& z >= -4)
													{
														tinade_create(x,y,other)
														//trace("nade")
														instance_delete(id)
													}
													if(instance_exists(self)
													&& z > oz)
													{
														tinade_create(x,y,other)
														//trace("nade?")
														instance_delete(id)
													}
													
													wait(2);
												}
											}
											exit;
										}
										spread += 2;
										wait(2);
									}
								}
								
								if(instance_exists(self)
								&& fork())
								{
									// disarm weapon
									if(fork())
									{
										while(instance_exists(self)
										&& sprite_index != spr_hurt
										&& image_index > 0)
										{
											image_index -= 0.4;
											if(image_index < 0) image_index = 0;
											wait(1);
										}
										if(instance_exists(self)) image_index = 0;
										exit;
									}
									
									var _zspd = 1;
									while(instance_exists(self)
									&& z < zstart
									&& my_health > 0)
									{
										//z += 2;
										z += min(_zspd, max(1, point_distance(x, y-z, x, y-zstart)/4));
										_zspd *= 1.25;
										wait(1);
									}
									if(instance_exists(self)) z = zstart;
									exit;
								}
							}
							exit;
						}
					}
					else if(atk == 1)
					{
						// jump up and fall down, causing a shockwave
						attacking += 30*4;
						
						if(fork())
						{
							canmove = 0;
							wait(10);
							sound_play(sndNothingBeamWarn);
							
							if(fork())
							{
								var _zspd = 1;
								while(instance_exists(self)
								&& z > 16
								&& my_health > 0) // down
								{
									z -= min(_zspd, max(1, point_distance(x, y-z, x, y-16)/3));
									_zspd *= 1.25;
									if(headZ < 32) headZ += 1;
									wait(1);
								}
								if(instance_exists(self)) z = 16;
								
								_zspd = 1;
								while(instance_exists(self)
								&& z < 512
								&& my_health > 0) // up
								{
									z += min(_zspd, max(1, point_distance(x, y-z, x, y-512)/4));
									_zspd *= 1.25;
									wait(1);
								}
								if(instance_exists(self)) z = 512;
								
								_zspd = 1;
								while(instance_exists(self)
								&& z > 32
								&& my_health > 0) // down
								{
									z -= min(_zspd, max(1, point_distance(x, y-z, x, y-32)/3));
									_zspd *= 1.5;
									wait(1);
								}
								if(instance_exists(self)) z = 32;
								
								_zspd = 1;
								while(instance_exists(self)
								&& z < zstart
								&& my_health > 0) // up
								{
									//z += 2;
									z += min(_zspd, max(1, point_distance(x, y-z, x, y-zstart)/4));
									_zspd *= 1.25;
									if(headZ > 0) headZ -= 1;
									wait(1);
								}
								if(instance_exists(self)) z = zstart;
								exit;
							}
							
							if(fork())
							{
								wait(40);
								
								sound_play(sndNothingBeamStart);
								var p = instance_nearest(x, y, Player);
								var pdir = random(360);
								var pdist = random(128);
								if(p != noone)
								{
									pdir = point_direction(x, y, p.x, p.y);
									pdist = point_distance(x, y, p.x, p.y);
								}
								
								while(instance_exists(self)
								&& z > zstart
								&& my_health > 0)
								{
									x += lengthdir_x(pdist/30, pdir);
									y += lengthdir_y(pdist/30, pdir);
									for(var i = 0; i < legs; i += 1)
									{
										//foot_x[i] += lengthdir_x(pdist/30, pdir);
										//foot_y[i] += lengthdir_y(pdist/30, pdir);
										
										foot_x[i] = x+foot_home_x[i]*0.25;
										foot_y[i] = y+foot_home_y[i]*0.25;
									}
									wait(1);
								}
								exit;
							}
							if(fork())
							{
								wait(38);
								
								for(var i = 0; i < legs; i += 1)
								{
									if(fork())
									{
										if foot_hp[i]>0
										repeat(6+irandom(3))
										{
											with(instance_create(foot_x[i]+lengthdir_x(4, random(360)), foot_y[i]+lengthdir_y(4, random(360)), Dust))
											{
												direction = point_direction(x, y, other.foot_x[i], other.foot_y[i]-32);
												speed = 1//+random(3);
												image_xscale /= speed;
												image_yscale = image_xscale;
											}
										}
										
										var _zspd = 32;
										while(instance_exists(self)
										&& foot_z[i] < 512
										&& my_health > 0
										&& foot_hp[i]>0) // up
										{
											//foot_z[i] += min(_zspd, max(1, point_distance(foot_x[i], foot_y[i], foot_x[i], foot_y[i]+foot_z[i])/3));
											foot_z[i] += _zspd;
											_zspd *= 1.25;
											with(instance_create(foot_x[i], foot_y[i], Dust))
											{
												direction = 90;
												speed = -3+random(6);
											}
											wait(1);
										}
										if(instance_exists(self)) foot_z[i] = 512;
										
										_zspd = 1;
										while(instance_exists(self)
										&& foot_z[i] > 0
										&& my_health > 0
										&& foot_hp[i]>0) // down
										{
											//foot_z[i] -= min(_zspd, max(1, point_distance(foot_x[i], foot_y[i], foot_x[i], foot_y[i]+foot_z[i])/3));
											foot_z[i] -= _zspd;
											_zspd *= 1.25;
											wait(1);
										}
										if(instance_exists(self))
										{
											foot_z[i] = 0;
											sound_play(sndImpWristHit);
											for(var i = 0; i < legs; i += 1){
												if foot_hp[i]>0
												with(instance_create(foot_x[i], foot_y[i], SmallExplosion)){
														team = other.team
														hitid=other.hitid
														creator = 1
													}
												}
											
											if(i == 0
											&& my_health > 0) // ONLY ONCE
											{//b, then why call leg[0] but not them others?
												//repeat(9+irandom(6))
												//{
												//	with(instance_create(foot_x[i], foot_y[i], Dust))
												//	{
												//		direction = random(360);
												//		speed = 3+random(3);
												//		image_xscale *= 6;
												//		image_yscale *= 6;
												//	}
												//}
												//repeat(18+irandom(12))
												//{
												//	with(instance_create(foot_x[i], foot_y[i], Dust))
												//	{
												//		direction = random(360);
												//		speed = 9+random(6);
												//		image_xscale *= 4;
												//		image_yscale *= 4;
												//		friction = 0.75;
												//	}
												//}
												with(Player)
												{
													view_shake[index] += 8;
												}
												sound_play(sndExplosionXL);
												sound_play(sndNothingBeamEnd);
												/*with(instance_create(foot_x[i], foot_y[i], Explosion))
												{
													//visible = 0;
													//image_xscale = 1.5;
													//image_yscale = image_xscale;
													team = other.team;
													while(distance_to_object(Wall) < 32)
													{
														with(Wall)
														{
															if(distance_to_object(other) < 32)
															{
																instance_create(x, y, FloorExplo);
																instance_destroy();
															}
														}
														wait(2);
													}
												}*/
												/*repeat(3)
												{
													instance_create(foot_x[i]+lengthdir_x(8, random(360)), foot_y[i]+lengthdir_y(8, random(360)), Explosion);
												}*/
												with(instance_create(x, y, Explosion))
												{
													team = other.team;
													image_xscale = 1.5;
													image_yscale = image_xscale;
													image_alpha = 0;
												}
												if(fork())
												{
													wait(10);
													
													for(var j = 0; j < 90; j += 2)
													{
														with(instance_create(x, y, Detail))
														{
															sprite_index = global.sprSnowClumpBig;
															image_xscale = 1;
															speed = 3;
															direction = j+choose(0,1);
															vspeed /= 1.25;
															friction = 0.1;
															depth -= vspeed*0.01;
															
															if(fork())
															{
																while(speed > 1)
																{
																	with(instance_nearest(x, y, Detail))
																	{
																		if(speed == 0)
																		{
																			instance_destroy();
																		}
																	}
																	wait(1);
																}
																exit;
															}
														}
													}
												}
											}
											
											wait(15);
											if(instance_exists(self) && my_health > 0 || my_health < 4) canmove = 1;
										}
										exit;
									}
								}
								exit;
							}
							exit;
						}
					}
					if(atk == 2
					&& distance_to_object(Player) < 32)
					{
						// stomp the ground with whole body
						attacking += 30*4;
						
						if(fork())
						{
							canmove = 0;
							sound_play(sndNothingBeamWarn);
							
							if(fork())
							{
								var _zspd = 1;
								while(instance_exists(self)
								&& z < zstart+32
								&& my_health > 0) // up
								{
									z += min(_zspd, max(1, point_distance(x, y-z, x, y-zstart+32)/8));
									_zspd *= 1.1;
									wait(1);
								}
								if(instance_exists(self)) z = zstart+32;
								
								_zspd = 1;
								while(instance_exists(self)
								&& z > 16
								&& my_health > 0) // down
								{
									//z -= min(_zspd, max(1, point_distance(x, y-z, x, y-16)/3));
									z -= _zspd;
									_zspd *= 1.5;
									wait(1);
								}
								if(instance_exists(self))
								{
									z = 16;
									headZ = 16;
									sound_play(sndGoldTankDead);
									sound_play(sndExplosionL);
									with instance_create(x, y, Explosion)
										team = other.team
									repeat(3)
									{
										instance_create(x+lengthdir_x(8, random(360)), y+lengthdir_y(8, random(360)), Explosion);
									}
								}
								
								wait(10);
								
								_zspd = 1;
								while(instance_exists(self)
								&& z < zstart
								&& my_health > 0) // up
								{
									//z += 2;
									z += min(_zspd, max(1, point_distance(x, y-z, x, y-zstart)/4));
									_zspd *= 1.25;
									if(headZ > 0) headZ -= 1;
									wait(1);
								}
								if(instance_exists(self))
								{
									z = zstart;
									canmove = 1;
								}
								exit;
							}
							exit;
						}
					}
				}
				else if(!attacking
				&& !instance_exists(Player))
				{
					if(random(1) < 0.01
					&& speed < 1)
					{
						if(fork())
						{
							// walk somewhere
							var targetX = x+lengthdir_x(random(256), random(360));
							var targetY = y+lengthdir_y(random(256), random(360));
							while(instance_exists(self)
							&& point_distance(x, y, targetX, targetY) > 16)
							{
								motion_add(point_direction(x, y, targetX, targetY), min(point_distance(x, y, targetX, targetY)/8, 0.1));
								wait(1);
							}
							exit;
						}
					}
				}
				// move feet
				if(canmove)
				{
					for(var i = 0; i < array_length_1d(foot_x); i += 1)
					{
						if foot_hp[i]>0{
							var randomFactor = random(1);
							var lx = lengthdir_x((speed*randomFactor)*(GameCont.loops+1), direction);
							var ly = lengthdir_y((speed*randomFactor)*(GameCont.loops+1), direction);
							
							if(foot_z[i] == 0
							&& point_distance(foot_x[i], foot_y[i], x+foot_home_x[i]+lx, y+foot_home_y[i]+ly) > 32)
							{
								var canLift = 1;
								for(var j = 0; j < array_length_1d(foot_x); j += 1)
								{
									if(j != i
									&& foot_z[j] != 0)
									{
										//canLift -= 0.5;
										canLift -= 1/(legs/2);
									}
								}
								if(canLift > 0)
								{
									//foot_x[i] = x+foot_target_x[i];
									//foot_y[i] = y+foot_target_y[i];
									
									repeat(6+irandom(3))
									{
										if foot_hp[i]>0
										with(instance_create(foot_x[i]+lengthdir_x(4, random(360)), foot_y[i]+lengthdir_y(4, random(360)), Dust))
										{
											direction = point_direction(x, y, other.foot_x[i], other.foot_y[i]-32);
											speed = 1+random(3);
											image_xscale /= speed;
											image_yscale = image_xscale;
										}
									}
									
									var dist = point_distance(foot_x[i], foot_y[i], x+foot_target_x[i]+lx, y+foot_target_y[i]+ly)*(foot_hp[i] <= 0 ? 1.2 : 1);
									var dir = point_direction(foot_x[i], foot_y[i], x+foot_target_x[i]+lx, y+foot_target_y[i]+ly);
									var doNormal = 1;
									
									/*var ie = instance_nearest(x+foot_target_x[i]+lx, y+foot_target_y[i]+ly, Player);
									if(ie != noone
									&& point_distance(x+foot_target_x[i]+lx, y+foot_target_y[i]+ly, ie.x, ie.y) < 64
									&& point_distance(x+foot_target_x[i]+lx, y+foot_target_y[i]+ly, x+ly, y+ly) > 64)
									{
										doNormal = 0;
										
										var dist = point_distance(foot_x[i], foot_y[i], ie.x, ie.y);
										var dir = point_direction(foot_x[i], foot_y[i], ie.x, ie.y);
										
										var zt = 0;
										var times = 30;
										foot_z[i] = 1;
										
										sound_play(sndBigDogMissile);
										
										if(fork())
										{
											repeat(times)
											{
												if(instance_exists(self))
												{
													foot_x[i] += lengthdir_x(dist/(times/(1+(speed/8))), dir);
													foot_y[i] += lengthdir_y(dist/(times/(1+(speed/8))), dir);
													zt += 1;
													foot_z[i] = max(1, abs(sin(zt/(times/3))*64));
													
													wait(1);
												}
											}
											if(instance_exists(self))
											{
												foot_z[i] = 0;
												sound_play(sndImpWristHit);
												sound_play(sndExplosion);
												instance_create(foot_x[i], foot_y[i], Explosion);
												repeat(3)
												{
													instance_create(foot_x[i]+lengthdir_x(8, random(360)), foot_y[i]+lengthdir_y(8, random(360)), SmallExplosion);
												}
											}
											exit;
										}
									}*/
									if(doNormal)
									{
										sound_play(sndSnowBotPickup);
										
										var zt = 0;
										//var times = 5+irandom(5);
										var times = (60/legs)/(foot_hp[i] <= 0 ? 3 : 1);
										foot_z[i] = 1;
	
										if(fork())
										{
											repeat(times)
											{
												if(instance_exists(self))
												{
													foot_x[i] += lengthdir_x(dist/(times/(1+(speed/16))), dir);
													foot_y[i] += lengthdir_y(dist/(times/(1+(speed/16))), dir);
													zt += 1;
													foot_z[i] = max(1, abs(sin(zt/(times/3))*16));
													//trace("Frame: "+string(current_frame) + " // z: "+string(foot_z[i]) + " (leg " + string(i) + ")");
													
													wait(1);
												}
											}
											
											if(instance_exists(self))
											{
												foot_z[i] = 0;
												sound_play(sndImpWristHit);
												with(instance_create(foot_x[i], foot_y[i], Detail))
												{
													sprite_index = global.sprSnowFootstep;
												}
												repeat(6+irandom(3))
												{
													with(instance_create(foot_x[i], foot_y[i], Dust))
													{
														direction = random(360);
														speed = 2+random(1);
													}
												}
												
												if(point_distance(foot_x[i], foot_y[i], instance_nearest(foot_x[i], foot_y[i], Wall).x+8, instance_nearest(foot_x[i], foot_y[i], Wall).y+8) <= 16
												|| point_distance(foot_x[i], foot_y[i], instance_nearest(foot_x[i], foot_y[i], TopSmall).x+8, instance_nearest(foot_x[i], foot_y[i], TopSmall).y+8) <= 16 || point_distance(foot_x[i], foot_y[i], instance_nearest(foot_x[i], foot_y[i], Floor).x+8, instance_nearest(foot_x[i], foot_y[i], Floor).y+8) <= 16)
												{
													sound_play(sndExplosionS);
													with(instance_create(foot_x[i], foot_y[i], SmallExplosion))
													{
														team = other.team;
														hitid = other.hitid
														creator = other
													}
												}
												with(Wall)
												{
													if(point_distance(x+8, y+8, other.foot_x[i], other.foot_y[i]) <= 24)
													{
														sound_play(sndWallBreak);
														instance_create(x, y, FloorExplo);
														instance_destroy();
													}
												}
											}
											exit;
										}
										i += 1;
									}
								}
								
								//wait(10);
							}
						}
					}
				}
			}
			
			wait(1);
		}
	}
	exit;
}

#define draw
if(global.debug)
{
	with(CustomEnemy)
	{
		draw_text_shadow(x, y+32, string(my_health));
	}
}

#define draw_tank
with instances_matching(CustomEnemy,"name","titank"){
		for(var i = 0; i < array_length_1d(leg_x); i += 1)
		{
			if(y+leg_y[i] < y) and foot_hp[i]>0
			draw_leg(i);
		}
		
		draw_sprite_ext(global.sprTitankHead, -1, x, y-z-headZ, image_xscale, image_yscale, image_angle, image_blend, 1);
		
		var ip = instance_nearest(x, y, Player);
		if(ip != noone)
		{
			var pdir = round(point_direction(x, y-z, ip.x, ip.y/*+256*/)/5)*5;
			draw_sprite_ext(global.sprTitankEye, -1, x+lengthdir_x(28, pdir), y+22+lengthdir_y(22, pdir)-z-headZ, image_xscale, image_yscale, image_angle, image_blend, 1);
			
			draw_set_blend_mode(bm_add);
			for(var i = 0; i < 360; i += 36)
			{
				draw_sprite_ext(global.sprTitankEye, -1, x+lengthdir_x(28, pdir)+lengthdir_x(16, i), y+22+lengthdir_y(22, pdir)-z+lengthdir_y(2, i)-headZ, image_xscale, image_yscale, image_angle, image_blend, 0.1);
			}
			draw_set_blend_mode(bm_normal);
		}
		
		draw_sprite_ext(hurtTimer > 0 ? spr_hurt : sprite_index, -1, x, y-z, image_xscale, image_yscale, image_angle, image_blend, 1);
		
		for(var i = 0; i < array_length_1d(leg_x); i += 1)
		{
			if(y+leg_y[i] >= y) and foot_hp[i]>0
			draw_leg(i);
		}
		
		//if(sprite_index != spr_hurt)
		//draw_sprite_ext(global.sprTitankBodyTop, -1, x, y-z, image_xscale, image_yscale, image_angle, image_blend, 1);
		
		// DEBUG
		if(global.debug)
		{
			for(var i = 0; i < array_length_1d(leg_x); i += 1)
			{
				// draw leg points
				draw_set_color(c_red);
				draw_circle(x+leg_x[i], y+leg_y[i]-z, 3, 1);
				
				// draw knee points
				draw_set_color(c_green);
				draw_circle(x+(leg_x[i]+(foot_x[i]-x))/1.25, y+(leg_y[i]+(foot_y[i]-y))/1.25-zstart-foot_z[i], 3, 1);
				
				// draw foot points
				draw_set_color(c_blue);
				draw_circle(foot_x[i], foot_y[i]-foot_z[i], 3, 1);
				
				// draw foot shadows
				draw_set_color(c_blue);
				draw_circle(foot_x[i], foot_y[i], 3, 0);
			}
		}
	}

#define draw_leg(i)
var ldir = (x+leg_x[i] >= x ? 1 : -1);

if(y+leg_y[i] >= y)
{
	// draw back knees
	var kneex = x+(leg_x[i]+(foot_x[i]-x))/kneeRelativePos;
	var kneey = y+(leg_y[i]+(foot_y[i]-y))/kneeRelativePos;
	var pdir = point_direction(kneex, kneey-z, x, y-z);

	draw_sprite_pos(hurtTimer > 0 ? spr_hurt : global.sprTitankLeg, 1,
	// leg point top left
	x+leg_x[i]+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir),
	y+leg_y[i]+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir)-z,
	// leg point top right
	x+leg_x[i]+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir),
	y+leg_y[i]+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir)-z,
	// knee point bottom right
	kneex+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir),
	kneey+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir)-zstart-foot_z[i],
	// knee point bottom left
	kneex+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir),
	kneey+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir)-zstart-foot_z[i],
	1);
}

// DEBUG
//if(global.debug) draw_line(kneex, kneey-z-foot_z[i], x+leg_x[i], y+leg_y[i]-z);

var kneex = x+(leg_x[i]+(foot_x[i]-x))/kneeRelativePos;
var kneey = y+(leg_y[i]+(foot_y[i]-y))/kneeRelativePos;
var pdir = point_direction(kneex, kneey-zstart-foot_z[i], foot_x[i], foot_y[i]-foot_z[i]);

// draw feet
draw_sprite_pos((hurtTimer > 0 ? global.sprTitankLegHurt : (y+leg_y[i] >= y ? (foot_hp[i] <= 0 ? global.sprTitankLegDestroyed : global.sprTitankLeg) : (foot_hp[i] <= 0 ? global.sprTitankLegDarkDestroyed : global.sprTitankLegDark))), 0,
// knee point top left
kneex+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir),
kneey+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir)-zstart-foot_z[i],
// knee point top right
kneex+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir),
kneey+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir)-zstart-foot_z[i],
// foot point bottom right
foot_x[i]+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir),
foot_y[i]+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir)-foot_z[i],
// foot point bottom left
foot_x[i]+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir),
foot_y[i]+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir)-foot_z[i],
1);

if(y+leg_y[i] < y)
{
	// draw front knees
	var kneex = x+(leg_x[i]+(foot_x[i]-x))/kneeRelativePos;
	var kneey = y+(leg_y[i]+(foot_y[i]-y))/kneeRelativePos;
	var pdir = point_direction(kneex, kneey-z, x, y-z);

	draw_sprite_pos(hurtTimer > 0 ? spr_hurt : global.sprTitankLeg, 1,
	// leg point top left
	x+leg_x[i]+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir),
	y+leg_y[i]+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir)-z,
	// leg point top right
	x+leg_x[i]+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir),
	y+leg_y[i]+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir)-z,
	// knee point top left
	kneex+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir),
	kneey+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir+90*ldir)-zstart-foot_z[i],
	// knee point top right
	kneex+lengthdir_x(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir),
	kneey+lengthdir_y(sprite_get_width(global.sprTitankLeg)/2, pdir-90*ldir)-zstart-foot_z[i],
	1);
}

// DEBUG
if(global.debug) draw_line(kneex, kneey-zstart-foot_z[i], foot_x[i], foot_y[i]-foot_z[i]);
#define draw_shadows
with instances_matching(CustomEnemy,"name","titank"){
	for(var i = 0; i < legs; i += 1){
	if foot_hp[i]>0 and position_meeting(foot_x[i], foot_y[i]-6,Floor)
		draw_sprite_ext(shd24,1,foot_x[i], foot_y[i]-6,0.5,0.5,0,c_white,1)
	}
	var shad_scale;
	shad_scale = 1 - min(0.66 * (z / 96),0.66)
	draw_sprite_ext(global.sprTitankShadow,1,x,y,shad_scale,shad_scale,0,c_white,1)
	}
#define scrNuke(z, size)
// THE GODDESS OF EXPLOSIONS
//     SMILES UPON YOU
with(instance_create(x, y-z, Explosion))
{
	team = 2;
	visible = 0;
	image_xscale *= 2.5*size;
	image_yscale = image_xscale;
	
	with(hitme)
	{
		if("team" in self
		&& team != other.team
		&& distance_to_object(other) <= 0)
		{
			my_health -= 20+10*GameCont.level;
		}
	}
}
// ground ring
for(var i = 0; i < 360; i += 60/size)
{
	with(instance_create(x, y-z, Explosion))
	{
		team = other.team;
		mask_index = mskNone;
		direction = i;
		speed = 8*size/1.5;
		vspeed *= 0.75;
	}
}
// tiny ground ring
for(var i = 15; i < 360; i += 60/size)
{
	with(instance_create(x, y-z, SmallExplosion))
	{
		team = other.team;
		mask_index = mskNone;
		direction = i;
		speed = 10*size/1.5;
		vspeed *= 0.75;
	}
}
// pillar
repeat(32*size)
{
	with(instance_create(x+lengthdir_x(random(8)*size, random(360)), y+lengthdir_y(random(8)*size, random(360))-z, SmallExplosion))
	{
		team = other.team;
		mask_index = mskNone;
		vspeed = -random(4)*size;
		var d = depth;
		
		if(fork())
		{
			while(instance_exists(self))
			{
				depth = d-(y+ystart)/2;
				wait(1);
			}
			exit;
		}
	}
}
// top ring
for(var i = 0; i < 360; i += 24/size)
{
	with(instance_create(x, y-z, Explosion))
	{
		team = other.team;
		mask_index = mskNone;
		direction = i;
		speed = 6*size;
		vspeed *= 0.5;
		vspeed -= 6*size;
		image_xscale = 1.5;
		image_yscale = image_xscale;
		var d = depth;
		
		if(fork())
		{
			while(instance_exists(self))
			{
				depth = d-(y+ystart);
				wait(1);
			}
			exit;
		}
	}
}
#define tinade_create(_x,_y,_creator)
with instance_create(x,y,CustomProjectile){
	alarm0 = 40
	team = other.team
	hitid = other.hitid
	motion_add(random(180),2)
	bounce = irandom(2)
	sprite_index = sprGrenade
	friction = 0.2
	z=0
	typ = 1
	on_step = script_ref_create(tinade)
	on_destroy = script_ref_create(tinade_explo)
	on_wall = script_ref_create(tinade_wall)
	//on_draw = script_ref_create(tinade_draw)
	on_hit = tinade_hit
	sound_play(sndHitMetal)
	return id;
	}
#define tinade

//if fork(){
//	if bounce > 0 and z <= 0{
//	repeat(6){
//	while(instance_exists(self)){
//		z+=bounce
//		}
//		wait 1
//		}
//	repeat(6){
//	while(instance_exists(self)){
//		z-=bounce
//		}
//		wait 1
//		}
//	bounce-=1
//	sound_play(sndGrenadeHitWall)
//	}
//	exit;
//	}
alarm0--
if alarm0 < 20 and alarm0 mod 3 = 3{
	sprite_index = sprGrenadeBlink
	image_index = 0
	}
	
if alarm0 <= 0
	instance_destroy()
#define tinade_explo
with instance_create(x,y,Explosion){
	hitid = other.hitid
	if (instance_exists(other.creator) and other.team = other.creator.team)
	team = other.creator.team
	else team = 0
	}
#define tinade_wall
	move_bounce_solid(1);
	sound_play(sndGrenadeHitWall)
#define tinade_hit
#define tinade_draw
//draw_sprite(sprite_index,image_index,x,y-z,)