//{ Sprites
global.scorpionbossidle = 	sprite_add_base64("", 16, 48,48)
global.scorpionbosshurt = 	sprite_add_base64("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", 3, 48,48)
global.scorpionbossdead = 	sprite_add_base64("", 6, 48,48)
global.scorpionintro = sprite_add_base64("",1,246,0 )
//}
global.scorpionExplode = sound_add("../music/scorpionexplode.ogg");
//{ ScorpionBoss
#define scorpionboss_create(_x,_y)
with instance_create(_x,_y,CustomEnemy){
	name = "scorpionboss"
	on_step =  script_ref_create(scorpionboss_step)
	if GameCont.loops == 0
	on_destroy = script_ref_create(scorpionboss_death)
	else
	on_destroy = script_ref_create(fancyscorpionboss_death)
	hitid = [global.scorpionbossidle,"grand scorpion"]
	spr_idle = global.scorpionbossidle
	spr_walk = global.scorpionbossidle
	spr_hurt = global.scorpionbosshurt
	spr_dead = global.scorpionbossdead
	snd_hurt = sndGoldScorpionHurt
	snd_dead = sndGoldScorpionDead
	maxhealth = 300
	maxhealth += (maxhealth*2/3)*instance_number(Player)
	maxhealth *= GameCont.loops+1
	my_health = maxhealth
	midpoint = (maxhealth/4)*3
	//trace(maxhealth)
	team = 1
	friction = 0.4
	direction = random(360)
	direction2 = direction
	mask_index = mskShield
	spr_shadow = shd96
	size = 3
	canmelee = 1
	meleedamage = 6
	target = 0
	targetvisible = 0
	raddrop = 100
	intro = 0
	dashing = 0
	
	alrm0 = 0  //walk
	alrm1 = -1 //fire
	alrm2 = -1 //alarmed
	wakeup = 0
	repeat(GameCont.loops + 3){
		if random(8)<GameCont.loops instance_create(x + 16, y + 16, GoldScorpion);
		else instance_create(x + 16, y + 16, Scorpion);
		}
	return id;
	}
#define scorpionboss_step
	with Player if weapon_get_type(wep) = 3 and "boltsticks" not in other
		with other{
			with instance_create(x,y+16,CustomObject){
				name = "boltsticksfly"
				creator = other
				on_step = script_ref_create(boltstickfly)
				}
			boltsticks = 1
			}
	spr_idle = global.scorpionbossidle
	spr_walk = global.scorpionbossidle
	spr_hurt = global.scorpionbosshurt
	spr_dead = global.scorpionbossdead
	
if(nexthurt > current_frame){
		if(sprite_index != spr_hurt) {
			image_index = 0;
			sprite_index = spr_hurt;
			}
		if my_health<midpoint{
			sound_play_pitchvol(sndScorpionDie,1.4,2)
			if fork(){
				if fork(){
					for(var q=0;q<10;q++){
						if q mod 2 = 1{
						sound_play_pitchvol(sndEliteInspectorStart,0.8,0.5)
						}
						wait 1
						}
					exit
					}
				alrm2 = max(round(d/8),16)
				wait 10
					for(var i=-70;i<70;i++){
						with instance_create(x+lengthdir_x(32+random_range(-30,30),i+a),y+lengthdir_y(32+random_range(-30,30),i+a),DustOLD){
							motion_add(i+a,20)
							set = 0
							time = 0
							image_xscale = random_range(1,3)
							image_yscale = image_xscale
							image_speed = 0
							friction = 0.4
							creator = other
							}
						with instance_create(x+lengthdir_x(32+random_range(-30,30),i+a),y+lengthdir_y(32+random_range(-30,30),i+a),Dust){
							motion_add(i+a,20)
							set = 0
							image_xscale = random_range(1,3)
							image_yscale = image_xscale
							image_speed = 0
							friction = 0.4
							creator = other
							}
						}
				exit;
				}
			midpoint -= maxhealth/4
			}
		}
	else{
		if(speed > friction)
			sprite_index = spr_walk;
		else 
			sprite_index = spr_idle;
		}
if intro == 0{ 
	with Player if distance_to_object(Wall)>32{
		other.alrm2 = 1
		other.wakeup = 1
		}
	
	with projectile if distance_to_object(other) < 164{
		other.alrm2 = 1
		other.wakeup = 1
		}
	//if targetvisible{
	//	alrm2 = 1
	//	wakeup = 1
	//	}
	}

if intro == 0 and alrm2 > 0{
	sound_play_music(musBoss1)
	if mod_variable_exists("mod","options","intropan"){
		if mod_variable_get("mod","options","intropan") == "1"{
			if UberCont.opt_bossintros == 1{
				mod_script_call("mod", "bossintros", "boss_trigger", "GRAND SCORPION",global.scorpionintro,mskNone,mskNone,self,60)
				}else
				mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
			}
		else if UberCont.opt_bossintros == 1{
			mod_script_call("mod", "bossintros", "boss_trigger", "GRAND SCORPION",global.scorpionintro,mskNone,mskNone,instance_nearest(x,y,Player),0)
				}
		}
	intro = 1
	alrm2 += 50
		target = instance_nearest(x,y,Player)
		var _inc = distance_to_object(target)/12;
		var _dis = 0;
		var _ang = point_direction(x,y,target.x,target.y)
		repeat 12{
		if instance_exists(self)
		with instance_create(x+lengthdir_x(50 + _dis,_ang),y+lengthdir_y(50 + _dis,_ang),PortalClear){
			image_xscale = 2
			image_yscale = 2
			with instance_create(x+random(120),y+random(120),Dust){
				image_angle = random(360)
				motion_add(_ang,6)
				}
			repeat 16
			with instance_create(x+random_range(-32,32),y+random_range(-32,32),Dust){
				depth = other.depth + 0.1
				}
			}
		_dis += _inc
		wait 1;
		}
	}
if alrm2 > 0 && target > 0{// and collision_line(x,y,target.x,target.y,Wall,0,0){
	alrm2 -= 1
	//if alrm2 > GameCont.loops+1
	//	alrm2 -= GameCont.loops
	}	
	
if(instance_exists(Player))
	target = instance_nearest(x,y,Player);
	else
	target = 0;
if(instance_exists(target) && collision_line(x,y,target.x,target.y,Wall,0,0) < 0)
	targetvisible = 1;
	else 
	targetvisible = 0;	
if(target > 0){
	if (alrm2<=0||alrm1<=0){
	if(target.x > x) {
		image_xscale = 1
		}
	else{
		image_xscale = -1
		}
	}
	}
//trace("a0:",alrm0)//,"a1:",alrm1,"a2:",alrm2)
if alrm1 > 0 alrm1--
if alrm0 > 0 and dashing == 0{
	alrm0 -= 1
	motion_add(direction, 3)
	}
if dashing <= 0{
	if speed > 2.5
		speed = 2.5
	}
else{ //if dashing
	direction = direction2
	if target > 0 and distance_to_object(target)>(50-(10*GameCont.loops)){
		
		if distance_to_object(target)>(120-(30*GameCont.loops))
			motion_add(direction,0.6)
		else
			motion_add(direction,0.4)
		}
	repeat 4{
		with instance_create(x+random_range(-16,16),y+32+random_range(-16,16),Dust)
			depth = other.depth + 0.1
		}
	
	//if speed > 12+(GameCont.loops*2)
	//	speed -= 1
	}
if distance_to_object(Wall)<46
	instance_create(x,y,PortalClear)
if alrm0 == 0{
	if target > 0
	direction = point_direction(x,y,target.x,target.y)+180+random_range(-60,60)
	else
	direction = random(360)
	alrm0 += 20
	}
	
if alrm2 == 0 and target > -1{ 
	if (targetvisible){
		if wakeup == 1 wakeup=-1
		alrm2 = 80
		
		var a = point_direction(x,y,target.x,target.y);
		var d = point_distance(x,y,target.x,target.y);
		
		if d<160 || random(4)<1 ||d>320{ //make walls
			if fork(){
				for(var q=0;q<10;q++){
					if q mod 2 = 1{
					sound_play_pitchvol(sndEliteInspectorStart,0.8,0.5)
					}
					wait 1
					}
				exit
				}
			alrm2 = max(round(d/8),16)
			wait 10
			if instance_exists(self)
				for(var i=-70;i<70;i++){
					with instance_create(x+lengthdir_x(32+random_range(-30,30),i+a),y+lengthdir_y(32+random_range(-30,30),i+a),DustOLD){
						motion_add(i+a,20)
						set = 0
						time = 0
						image_xscale = random_range(1,3)
						image_yscale = image_xscale
						image_speed = 0
						friction = 0.4
						creator = other
						}
					with instance_create(x+lengthdir_x(32+random_range(-30,30),i+a),y+lengthdir_y(32+random_range(-30,30),i+a),Dust){
						motion_add(i+a,20)
						set = 0
						image_xscale = random_range(1,3)
						image_yscale = image_xscale
						image_speed = 0
						friction = 0.4
						creator = other
						}
					}
				
			}
		else{ //dash then spray
		
		sound_play_pitch(sndEliteInspectorAlarmed,0.8)
		var _inc = distance_to_object(target)/12;
		var _dis = 0;
		var _ang = direction;
		direction = point_direction(x,y,target.x,target.y)+random_range(-70,70)
		speed += 3
		dashing = 1
		direction2 = direction
		friction = 0.4
		wait 12+(5*(GameCont.loops))
		if instance_exists(self){
			dashing = 0
			friction = 0.4
			//if alrm1 != -1
			alrm1 = 0
			wait 20
			if instance_exists(self) alrm0 +=1
			}
		}
	}
	else{ // break walls and tight attack
		
		alrm2 = 140
		sound_play_pitch(sndExploGuardianCharge,1.3)
		if fork(){
			for(var t=0;t<30;t++){
				repeat round(1+t/2.5)
				if instance_exists(self)
				with instance_create(x+lengthdir_x(64-(t*2),random(360)),y+lengthdir_y(64-(t*2),random(360)),Dust)
					motion_add(point_direction(x,y,other.x,other.y),4+t/5)
				wait 1
				}
			exit;
			}
		wait 30
		
		if instance_exists(self){
		direction = point_direction(x,y,target.x,target.y)//+random_range(-30,30)
		repeat(300)
			with instance_create(x+random_range(-16,16),y+32+random_range(-16,16),Dust){
				image_speed = 0.1
				depth = other.depth + 0.1
				motion_add(other.direction,30)
				//friction = random_range(0.0,1.0)
				}
		//speed += 3
		sound_play_pitch(sndEliteInspectorAlarmed,0.4)
		//dashing = 1
		//direction2 = direction
		//friction = 0.1
		sound_play(sndGoldScorpionFire)
		alrm1 = 1000//max(150-(50*(GameCont.loops)),50)
		var a = point_direction(x,y,target.x,target.y)
		var c = self
		if(fork()){
		repeat 60{
			if instance_exists(self){
			sound_play_pitchvol(sndScorpionFireStart,1,(game_width/4)/distance_to_object(Player))
			var d = a+random_range(-10,10);
			with instance_create(x+lengthdir_x(32,d),y+lengthdir_y(32,d),EnemyBullet2){
				damage = 1
				maggot = 1
				creator = c
				hitid = [global.scorpionbossidle,"grand scorpion"]
				team = 1
				speed = random_range(4,13+(GameCont.loops*2))
				direction = d
				image_angle = direction
				if random(3)<1
				wait(1)
				}
			}
			}
			exit;
		}
		if instance_exists(self) and target > 0{
		
		var _inc = distance_to_object(target)/8;
		var _dis = 0;
		var _ang = point_direction(x,y,target.x,target.y);
		repeat 12{
			if instance_exists(self)
			with instance_create(x+lengthdir_x(50 + _dis,_ang),y+lengthdir_y(50 + _dis,_ang),PortalClear){
				image_xscale = 2
				image_yscale = 1-((_dis/_inc)/10)
				image_angle = _ang
				with instance_create(x+random(120),y+random(120),Dust){
					image_angle = random(360)
					motion_add(_ang,6)
					}
				}
			_dis += _inc
			wait 1;
			}
		}
		}
		}
	}

if instance_exists(self) and alrm1 == 0 && target > 0{
	sound_play(sndGoldScorpionFire)
	alrm1 = 1000//max(150-(50*(GameCont.loops)),50)
	var a = point_direction(x,y,target.x,target.y)
	var c = self
	if(fork()){
		repeat 60{
			if instance_exists(self){
			sound_play_pitchvol(sndScorpionFireStart,1,(game_width/4)/distance_to_object(Player))
			var d = a+random_range(-55,55);
			with instance_create(x+lengthdir_x(32,d),y+lengthdir_y(32,d),EnemyBullet2){
				damage = 2
				maggot = 1
				creator = c
				hitid = [global.scorpionbossidle,"grand scorpion"]
				team = 1
				if GameCont.loops == 0
					speed = random_range(2,9)
				else
					speed = random_range(1,10)
				direction = d
				image_angle = direction
				wait(random_range(0,1))
				}
			}
			}
		}
	var ang = 0
	repeat 40{
		if instance_exists(self){
		var wide_ = 60-(20*GameCont.loops)-0
		var d = a+random_range(-5,5)+choose(wide_*-1,wide_);
		with instance_create(x+lengthdir_x(32,d),y+lengthdir_y(32,d),EnemyBullet2){
			sound_play_pitchvol(sndScorpionFireStart,1,(game_width/4)/distance_to_object(Player))
			damage = 1
			maggot = 1
			creator = c
			hitid = [global.scorpionbossidle,"grand scorpion"]
			team = 1
			if GameCont.loops == 0
				speed = random_range(4,9)
			else
				speed = random_range(2+GameCont.loops,9+GameCont.loops)
			direction = d
			image_angle = direction
			wait(random_range(0,1))
			}
		}
		ang += 1
		}
	}
#define step
with instances_matching(DustOLD,"set",0){
	if current_time mod 30 = 1
		time += 1
	with Player if place_meeting(x,y,other){
			x += lengthdir_x(1, other.direction);
			y += lengthdir_y(1, other.direction);
			view_shake[index]=choose(100,-100)
		}
	if random(200-(time*3))<1
	if place_meeting(x,y,Floor) and distance_to_object(Player)>32{
		with instance_nearest(x,y,Floor){	
			var _x = x
			var _y = y
			if object_index != FloorExplo{
			if random(2)<1
				_x = x+16
			if random(2)<1
				_y = y+16
			}
			
			repeat(12)
				with instance_create(_x,_y,Dust){
					motion_add(random_range(80,100),random(4))
					depth = -11
					}
			instance_create(_x,_y,Wall)
			sound_play(sndWallBreak)
			}
		}
	if place_meeting(x,y,Wall)
		instance_destroy()
	}
with instances_matching(DustOLD,"set",1){
	image_xscale *= 0.9
	image_yscale = image_xscale
	image_alpha = min(image_xscale+0.5,1)
	if image_xscale<=0
	instance_destroy()
	else 
	if place_meeting(x,y,Wall)
		instance_destroy()
	}
with DustOLD if speed <= 0{
	motion_add(direction+180,20)
	if "set" in self and set = 0
		set = 1
	else instance_destroy()
	}
#define scorpionboss_death
sound_play(sndBossWin)
sound_play_music(musBossDead)
sound_play_pitchvol(sndGoldScorpionDead,0.8,4)
var xd_ = x;
var yd_ = y;
var fl_ = instance_nearest(xd_,yd_,Floor);
repeat(75){
	with instance_create(xd_,yd_,EnemyBullet2){
		//creator = other
		hitid = [global.scorpionbossidle,"grand scorpion"]
		team = 1
		motion_add(random(360),random_range(2,6))
		image_angle = direction
		}
	}
wait 6
if instance_exists(Player)
with fl_
if mod_variable_exists("mod","options","bossoutros") and mod_variable_get("mod","options","bossoutros") == "1"
mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)

//}
#define fancyscorpionboss_death
//by 9joao6
if(fork())
{
	var xd_ = x;
	var yd_ = y;
	var fl_ = instance_nearest(xd_,yd_,Floor);
	
	wait(1);
	
	if instance_exists(Player)
		with fl_
			if mod_variable_exists("mod","options","bossoutros") and mod_variable_get("mod","options","bossoutros") == "1"
				mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
	
	
	
	if(!instance_exists(Spiral))
	{
		sound_play_music(musBoss4Silence);
		sound_play(global.scorpionExplode);
		
		// uh oh, it's about to blow
		with(instance_create(xd_, yd_, CaveSparkle))
		{
			image_xscale = 32;
			image_yscale = 4;
		}
		
		with(projectile)
		{
			if(team == 1)
			{
				speed = 0;
				if(instance_exists(Player)) team = Player.team;
				fakeEnemyBullet = 1;
			}
		}
		
		wait(0.65*30);
		
		// initial explosion
		if(fork())
		{
			var s = 128;
			
			while(s > 1)
			{
				for(var i = 0; i < maxp; i += 1)
				view_shake[i] = s;
				
				s /= 1.1;
				wait(1);
			}
			exit;
		}
		
		with(Wall)
		{
			if(point_seen(x+8, y+8, 0))
			{
				instance_create(x, y, FloorExplo);
				instance_destroy();
			}
		}
		
		with(projectile)
		{
			if("fakeEnemyBullet" in self)
			{
				speed = 8;
			}
		}
		
		repeat(500)
		{
			with instance_create(xd_,yd_,EnemyBullet2)
			{
				hitid = [global.scorpionbossidle,"grand scorpion"]
				team = 1
				if(instance_exists(Player)) team = Player.team;
				fakeEnemyBullet = 1;
				motion_add(random(360),random_range(2,24));
				image_angle = direction;
				friction = speed*0.01;
			}
		}
		
		repeat(100)
		{
			with(instance_create(xd_, yd_, CaveSparkle))
			{
				sprite_index = sprDust;
				image_index = random(image_number);
				image_xscale = 2+random(2);
				var ixs = image_xscale;
				image_yscale = image_xscale;
				image_speed = 0;
				motion_add(random(360), random_range(12, 32));
				image_angle = direction;
				friction = speed*0.02;
				
				if(fork())
				{
					while(instance_exists(self))
					{
						visible = place_meeting(x, y, Floor);
						wait(1);
					}
					exit;
				}
			}
		}
		
		wait(1.13*30);
		
		// warp backwards
		with(CaveSparkle)
		{
			direction += 10;
			friction = 0;
		}
		
		var warpspeed = 0;
		
		repeat(0.75*30)
		{
			warpspeed += 1;
			
			for(var i = 0; i < maxp; i += 1)
			view_shake[i] = 3+warpspeed;
			
			//with(Player)
			//{
			//	x += lengthdir_x(warpspeed/2, point_direction(x, y, xd_, yd_));
			//	y += lengthdir_y(warpspeed/2, point_direction(x, y, xd_, yd_));
			//}
			
			with(projectile)
			{
				if("fakeEnemyBullet" in self)
				{
					speed -= 2;
					if(-speed >= point_distance(x, y, xstart, ystart)) instance_destroy();
				}
			}
			with(CaveSparkle)
			{
				var pdir = point_direction(x, y, xstart, ystart);
				var pdist = point_distance(x, y, xstart, ystart);
				
				x += lengthdir_x(warpspeed, direction+90);
				y += lengthdir_y(warpspeed, direction+90);
				move_towards_point(xstart, ystart, 1^(warpspeed*2));
				
				image_angle = direction+warpspeed*1.5;
				image_xscale += 0.1*(ixs/4);
				image_yscale -= 0.1*(ixs/4);
				if(image_xscale <= 0) instance_destroy();
			}
			
			wait(1);
		}
		
		// and kaboom
		if(fork())
		{
			var s = 128;
			
			while(s > 1)
			{
				for(var i = 0; i < maxp; i += 1)
				view_shake[i] = s;
				
				s /= 1.2;
				wait(1);
			}
			exit;
		}
		
		with(projectile)
		{
			if("fakeEnemyBullet" in self)
			{
				instance_destroy();
			}
		}
		
		with(CaveSparkle) instance_destroy();
		
		repeat(75)
		{
			with instance_create(xd_,yd_,EnemyBullet2)
			{
				hitid = [global.scorpionbossidle,"grand scorpion"]
				fancy = 1
				team = 1
				motion_add(random(360),random_range(2,6));
				image_angle = direction;
				friction = -0.25;				
				for(var i = 0; i < 4; i += 1)
				{
					with(instance_copy(0))
					{
						speed -= i;
					}
				}
			}
		}
		
		repeat(100)
		{
			with(instance_create(xd_, yd_, Dust))
			{
				sprite_index = sprDust;
				image_index = random(image_number);
				image_xscale = 2+random(2);
				var ixs = image_xscale;
				image_yscale = image_xscale;
				image_speed = 0;
				motion_add(random(360), random_range(2, 16));
				image_angle = direction;
				friction = speed*0.02;
			}
		}
		
		sound_play(sndBossWin)
		var a = GameCont.area;
		var sa = GameCont.subarea;
		//repeat(180) wait(1) if(instance_exists(Player) && GameCont.area == a && GameCont.subarea == sa) sound_play_music(musBossDead)
	}
	
	exit;
}
//
//wait(2);
//
//with(Corpse)
//{
//	if(sprite_index == global.scorpionbossdead) image_speed /= 8;
//	alarm0 += 180;
//}

//}
#define boltstickfly
if instance_exists(creator){
	x=creator.x
	y=creator.y+16
	
	with BoltStick if target = other.creator
		target = other
	}
else instance_destroy()