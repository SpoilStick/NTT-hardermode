//{ Sprites
global.ravenbossidle = sprite_add_base64("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", 18, 16,16)
global.ravenbosswalk = sprite_add_base64("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", 8, 16,16)
global.ravenbosshurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAgCAYAAADtwH1UAAAAB3RJTUUH4QQLCyI0uR4eMgAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAADKUlEQVR4nO2aPU4cQRCF9wJONnFISoJjCCB2Zokb2BIxp/ABfACfwKmv4JwDWRpcSA8/HlU9Pf03vYiRSrvbC7yu71VX93h8uLn7cciNRa5orFf8uxaOaOyU9IvhR1fP5I/Hj8vFp6vn4DF77WlAL/1m4HuZgcqyBBUAjwFA69XQW78b/BYGcOKp5L3PLQwYod8Nfq0BuuTt/dfb6+Xn929P8fDn94uwMW0Pp6A/tQGcPBI3CJo8QwC4FgaM0O9qQI0JAKCVZ+9TELht1JgwSv8kDEDyCFxeBaIKa9tQSh+GtNDvCr/UAO/kofDVBP6u1oCUvsH/e3l4CjbB3mO8yoCW8EsMsElfn58tZ8cPLzbByAAGwwYU3xit6LMB2prYgFz9KVuPAbBQAEiY4evyRwvoqY99oIX+dNVvlQcAFrwRcljS/KobY2n1j9bvasBWIxTA/eer50pkCHwWj87lJW1oD/0hBuSaAACAYAAseAww9GTiAbDr1/2X/GrsqB8ZMsyAHEMwQW4BgICNEeOaFIJviFJRqo85bNW338PfYv1d4HsmYJJ8ClEIXjAsBoPvGAD/rVeVmND35oBxmIJgE6GD+bCR0N/VADaBIfErh8JWIPoKA7yfZQg5+ikz1BT+7OlzAUxpAEPwWsCaQVz1+p0HgfVZS/eAVHirUL8/GQMi4IDhLX8F7PXnVBtSA3L1I13v+QDvL9MbwJXn9ftoc2YDo41SIagBWgCRftQWYQCbwPvD1Juwl6AHm5dztEfg2MjtIDwOBitQ95RoNWgL4gc5bEB4H7AX+NQZPAUgMkbbRg6EtT2I4XotUD+rAal/mh5+H7DlTtSrMK/na/IcORC8AoiqW1fomuaa/pQG8M1OBFoBMQh+RrvlOS0XAB8fI/NZV/Vy9V9NYk8D1ARdEQpa2070oJw3wxbaqusZkKs/1IA1+DkQ9HQD8F7Sue3H01/TZsNr9N1J7GkAIChkrnxd5tFxk+HkGqD6nnZL/eREasGWGhAZESWb+v0SA0bqFxmwJYlaA7z/fVYKcUb9TQBLINZGbRXPrp/1Q3vB1yp6i/q7JPQe/+MRIXD+j7Z+xXAAAAAASUVORK5CYII=", 3, 16,16)
global.ravenbossdead = sprite_add_base64("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", 7, 16,16)
global.ravenbossdash = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAgCAYAAADtwH1UAAAAB3RJTUUH4QQKFzgTAbls8wAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAACxElEQVR4nO2ZMW4bMRBFdYE0alK6dRPXduHUrnODBEjtU/gAOYBv4Sukz4ECKOECE/x8/JnlkkOubcnAhyWu1n5/ZjgkV4fP338cLtpPuwOcu3YHOHftDnDu2h3gNenvz6noTSfAMzHbWCv7/fXViT2MZJ9q4rUnwdhNxjuSvRnUA1ImcGzvJEQz1BgfH+4WGS97UYXV6qurUhQMm0AjDNsLn8GOLFg4zG/3fLq5W4T349jUBHBlXB0/LGITCjQam5EAj9+7ZjoeP/5jLirvcWyrh24TWClRxXPADRbh7fXQRa+BHQNrATdW9X6Lh2poFlY7GrDr5XW5jkE30K9f7k/PT98W/fr58p9GJkHxY9XjeoX8XCRr/EXpCfB6IyaB4T0DBl+MsAEzkZUADHpU+ZYU9KU8ZPOnTV3PAPdPrJ7yWpko1zITEHEjvwo+JmAEf5MRZQZnghf88tvg0YSaypktaC0JyK6qHxOQzd9shIW9VFWOTWGGtwpCE5kzYCu7x28tNJu/un+qxcvAeTGzMd71FPEU/n17WITj5X1vAmrZeR3DWaC2ndn8VSai1oMHFTWNvV2EEk7f3jNBCzu3UDULsvk3TV8D9hYyVVW8FhQxOO4osJIyWtFW9mgdGMHf1UMjE9GOAk14++nMBVmdXTDYqo3O4m82oM4D6jEEG4gqy3ZJWQmo2f9zK1pLUDb/cAN8YOPFGpPLjwF6ElDT/2taqSok9NHLn25ABTmaLV5FYQG0JkAtxDUyFlVImKBoRtTyDzPgHWbw79p7NjriDBCptr2M4E81gGAIi1s47zPYkjKDH/nBQ6I3xk89s/mbDSDomvixrTc+K/hYDDWM6hqPN7fK1uCrZ+Rc5Z5UVY3+HgDZo8CvsavP97CnGKj9RgthlWZVfxTg2expBmrvnxXs6P/33JvNPs3ARQkJuOiSgHenP2CL/gEDVBUJAAAAAElFTkSuQmCC", 2, 16,16)
global.ravenbosslift = sprite_add_base64("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", 12, 32,32)
global.ravenbossfly  = sprite_add_base64("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", 5, 32,32)
global.ravenbossland = sprite_add_base64("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", 10, 32,32)
global.ravenbosstell = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAgCAYAAADtwH1UAAAAB3RJTUUH4QQLCyI0uR4eMgAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QASABvAKgKRg8wAAADKUlEQVR4nO2aPU4cQRCF9wJONnFISoJjCCB2Zokb2BIxp/ABfACfwKmv4JwDWRpcSA8/HlU9Pf03vYiRSrvbC7yu71VX93h8uLn7cciNRa5orFf8uxaOaOyU9IvhR1fP5I/Hj8vFp6vn4DF77WlAL/1m4HuZgcqyBBUAjwFA69XQW78b/BYGcOKp5L3PLQwYod8Nfq0BuuTt/dfb6+Xn929P8fDn94uwMW0Pp6A/tQGcPBI3CJo8QwC4FgaM0O9qQI0JAKCVZ+9TELht1JgwSv8kDEDyCFxeBaIKa9tQSh+GtNDvCr/UAO/kofDVBP6u1oCUvsH/e3l4CjbB3mO8yoCW8EsMsElfn58tZ8cPLzbByAAGwwYU3xit6LMB2prYgFz9KVuPAbBQAEiY4evyRwvoqY99oIX+dNVvlQcAFrwRcljS/KobY2n1j9bvasBWIxTA/eer50pkCHwWj87lJW1oD/0hBuSaAACAYAAseAww9GTiAbDr1/2X/GrsqB8ZMsyAHEMwQW4BgICNEeOaFIJviFJRqo85bNW338PfYv1d4HsmYJJ8ClEIXjAsBoPvGAD/rVeVmND35oBxmIJgE6GD+bCR0N/VADaBIfErh8JWIPoKA7yfZQg5+ikz1BT+7OlzAUxpAEPwWsCaQVz1+p0HgfVZS/eAVHirUL8/GQMi4IDhLX8F7PXnVBtSA3L1I13v+QDvL9MbwJXn9ftoc2YDo41SIagBWgCRftQWYQCbwPvD1Juwl6AHm5dztEfg2MjtIDwOBitQ95RoNWgL4gc5bEB4H7AX+NQZPAUgMkbbRg6EtT2I4XotUD+rAal/mh5+H7DlTtSrMK/na/IcORC8AoiqW1fomuaa/pQG8M1OBFoBMQh+RrvlOS0XAB8fI/NZV/Vy9V9NYk8D1ARdEQpa2070oJw3wxbaqusZkKs/1IA1+DkQ9HQD8F7Sue3H01/TZsNr9N1J7GkAIChkrnxd5tFxk+HkGqD6nnZL/eREasGWGhAZESWb+v0SA0bqFxmwJYlaA7z/fVYKcUb9TQBLINZGbRXPrp/1Q3vB1yp6i/q7JPQe/+MRIXD+j7Z+xXAAAAAASUVORK5CYII=", 3, 16,16);
global.ravenintro = sprite_add_base64("",1,246,0 )
global.ravenintrofg = sprite_add_base64("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",1,246,0 )
global.ravenintrobg = sprite_add_base64("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",1,246,0 )
//}
//{ RavenBoss
//original code by saniblues, mutilated code (and sprites) by blaac
#define wantravenboss_create(_x,_y)
with instance_create(_x,_y,CustomObject){
	enemies = instance_number(enemy)
	name = "wantRavenboss"
	on_step = wantravenboss_step
	return id;
	}
#define  wantravenboss_step
if instance_number(enemy) < (enemies/2) && instance_exists(Player){
	var p = instance_nearest(x,y,Player);
	var r = random_range(64,140);
	var r2 = random(360);
	var f = instance_nearest(p.x+lengthdir_x(r2,r),p.y+lengthdir_y(r2,r),Floor);
	while(point_distance(f.x+16,f.y+16,p.x,p.y)<60){
		r = random_range(64,140);
		r2 = random(360);
		f = instance_nearest(p.x+lengthdir_x(r2,r),p.y+lengthdir_y(r2,r),Floor);
		}
	while(f.object_index = FloorExplo){
		r = random_range(64,140);
		r2 = random(360);
		f = instance_nearest(p.x+lengthdir_x(r2,r),p.y+lengthdir_y(r2,r),Floor);
		}
	ravenboss_create(f.x+16, f.y + 16);
	sound_play_pitchvol(sndRavenDie,0.6,4)
	instance_destroy()
	}
#define ravenboss_create(_x,_y)
with(instance_create(_x,_y,CustomEnemy)){
	name = "BIG BIRD"
	
	maxhealth = 300
	maxhealth += (maxhealth*2/3)*instance_number(Player)
	maxhealth += (maxhealth/2)*GameCont.loops
	friction = 0.4
	my_health = maxhealth;
	canfly = true;
	spr_idle = global.ravenbossidle;
	spr_walk = global.ravenbosswalk;
	spr_hurt = global.ravenbosshurt;
	spr_dead = global.ravenbossdead;
	spr_tell = global.ravenbosstell;
	spr_chrg = global.ravenbossdash;
	spr_lift = global.ravenbosslift;
	spr_fly  = global.ravenbossfly;
	spr_land = global.ravenbossland;
	sprite_index  = spr_fly;
	mask_index = mskNone;
	size = 2;
	meleedamage = 10;
	hitid = [spr_fly,name];
	snd_hurt = sndBuffGatorHit
	snd_lowh = sndBigBanditHalfHP;
	snd_lift = sndBigBanditMeleeStart;
	snd_land = sndBigBanditMelee;
	snd_dash1 = sndBigBanditMeleeStart;
	snd_dash2 = sndBigBanditMelee;
	snd_dead = sound_play_pitch(sndRavenDie,0.5)
	lowh = 0;
	sound_play_pitch(sndRavenDie,0.6)
	
	alrm0 = 0;// Behaviors (Walking, Targeting, etc)
	alrm1 = 0;// Firing
	alrm2 = 0;// Liftoff for Flight
	alrm3 = 0;// Dash attack
	alrm4 = 100; //bandaid fix for dashing at at spawn
	
	ammo = 0;
	range_min = 32;
	range_max = 100;
	charge_time = 0;
	charge_dir = 0;
	intro = 0;
	angry = 0;
	gunangle = random(360);
	walk = 0;
	raddrop = 60;
	
	evade_aux = 0;
	evade_timer = 0;
	
	z = 512; // Only this high for the intro stomp
	zspd = 0;
	flying = false;
	sleeping = 1; // for joao platfomer
	flight_x = x;
	flight_y = y;
	wantfly = 0;
	on_hurt = script_ref_create(ravenboss_hurt);
	on_step = script_ref_create(ravenboss_step);
	on_draw = script_ref_create(ravenboss_draw);
	on_destroy = script_ref_create(ravenboss_death);
	animating = 1
	
	if fork(){
		wait 45
		if instance_exists(self) and instance_exists(Player){
		sound_play_music(musBoss1)
		
		if mod_variable_exists("mod","options","intropan") and mod_variable_get("mod","options","intropan") == "1"{
			if UberCont.opt_bossintros == 1{
					mod_script_call("mod", "bossintros", "boss_trigger",name,global.ravenintrobg,global.ravenintro,global.ravenintrofg,self,60)
					}else
					mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,60)
				}
			else if UberCont.opt_bossintros == 1{
				mod_script_call("mod", "bossintros", "boss_trigger",name,global.ravenintrobg,global.ravenintro,global.ravenintrofg,instance_nearest(x,y,Player),0)
					}
				
			}
		wait 180
		if instance_exists(self){ alrm1 = 1; alrm0 = 1}
		exit;
		}
	return id;
	}

#define ravenboss_callbackup
	repeat((argument0 + 1) * (GameCont.loops + 2)){
		if instance_exists(target) and target > 0
		with(instance_create(x+random_range(200,-200),target.y-random_range(250,300),Raven)){
			transform = 1
			image_alpha = 0
			instance_change(RavenFly,true);
			image_index = 0;
			var f = instance_nearest(other.x+random_range(-80,80),other.y+random_range(-80,80),Floor);
			if f.object_index = FloorExplo{
				if place_meeting(f.x,f.y,Wall){
					targetx = other.x
					targety = other.y
					}
				else{
					targetx = f.x
					targety = f.y
					}
				}
			else{
				if place_meeting(f.x,f.y,Wall){
					targetx = other.x
					targety = other.y
					}
				else{
					targetx = f.x+16
					targety = f.y+16
					}
				}
			}
		}
#define ravenboss_hurt
	//(damage, knockback_velocity, knockback_direction)
	evade_aux += argument0;
	nexthurt = current_frame + 5;
	if evade_aux > maxhealth * 0.5{
		alrm2 = 1;
		angry = 0;
		motion_add(argument1+choose(90,-90),10)
		evade_aux = 0;
		mask_index = mskNone;
		sleeping = 1 // for joao platformer
		}
	else{
		var _dmg = argument0;
		if sprite_index = spr_chrg _dmg *= 0.50;
		if my_health - _dmg <= 0{
			sound_play(snd_dead);
			}
		evade_timer = 0;
		my_health -= _dmg;
		if sprite_index = spr_idle || sprite_index = spr_walk || sprite_index = spr_land{
			sprite_index = spr_hurt;
			image_index = 0;
			}
		motion_add(argument2,argument1 * 0.33);
		sound_play(snd_hurt);
		if random(6)<1
		alrm2 = 1
		}
#define ravenboss_step
	
	/// Alarms
	if ++evade_timer > 30 * 6 && evade_timer < 30 * 6{
		evade_aux = 0;
		}
	if alrm1>0 alrm1--
	if alrm2>0 alrm2--
	if alrm4>0 alrm2--
	/// Behavioral Alarm
	if instance_exists(Player){
			target = instance_nearest(x,y,Player);
			if !collision_line(x,y,target.x,target.y,Wall,0,1){
				if ammo > 0
					gunangle = point_direction(x,y,target.x,target.y);
				else 
					gunangle = 90+(16*image_xscale)
				targetvisible = 1;
				}
			else
				targetvisible = 0;
			}
		else{
			target = -1;
			targetvisible = 0;
			}
	if (alrm0 && !--alrm0){
		firing = 0;
		if instance_exists(target) && target > 0{
			if (distance_to_object(target) > range_max * 1.25 && angry && !--angry) || random(12) < 1{
				alrm2 = 1;// Initiates flight if you're WAY TOO FAR AWAY
				angry = 0;// ANG HE'S ANGRY!!
				}
			else{
				if !collision_line(x,y,target.x,target.y,Wall,0,1){
					if distance_to_object(target) <= range_max && distance_to_object(target) > range_min{
						if random(3) < 2{
							walk = 25
							direction = (point_direction(x,y,target.x,target.y) + choose(60,-60) + random_range(-10,10)) * -1;
							alrm1 += 1;
							ammo += irandom(4);
							}
						else{
							walk = 25 + irandom(35);
							direction = point_direction(x,y,target.x,target.y) + choose(60,-60) + random_range(-10,10);
							alrm0 = walk + irandom(5);
							}
						}
					else{
						alrm3 = 0;// Slam the motherfucker
						}
					}
				else{
					if (angry && !--angry){
						if distance_to_object(target) < range_max{
							if random(3) < 2 alrm3 = 1 // dash
								else alrm2 = 1;//Fly
							}
						else{
							alrm2 = 1; // Fly
							}
						}
					else{
						walk = 25 + irandom(35);
						direction = point_direction(x,y,target.x,target.y) + choose(60,-60) + random_range(-10,10);
						alrm0 = walk + irandom(5);
						}
					}
				}
			}
		else{
			walk = 25 + irandom(35);
			direction = random(360);
			alrm0 = walk + irandom(5);
			}
		}
	///shoot missile
	if alrm1 ==0 and flying = false and sprite_index = (spr_idle||spr_hurt||spr_walk){
	if ammo > 0{
		if instance_exists(target) && target > 0{
			alrm1 += 5
			ammo -= 1
			sound_play(sndRocket)
			gunangle = point_direction(x,y,target.x,target.y);
			with instance_create(x+lengthdir_x(12,gunangle),y+lengthdir_y(12,gunangle),JockRocket){
				//sound_play(sndRocket)
				//name = "ravenrocket"
				creator = other
				hitid = [other.spr_idle,other.name]
				team = other.team
				//target = other.target
				//image_speed = 0.4
				direction = other.gunangle
				sprite_index = sprJockRocket
				image_angle = direction
				speed += 5
				//on_step = script_ref_create(ravenrocket_step)
				//on_destroy = script_ref_create(ravenrocket_explode)
				//other.alrm0 = 60 + (ammo * alrmmax)
				}
			alrm0 += 20
			//alrm1 += 60
			wkick += 8
			motion_add(gunangle+180,6)
			repeat 8
				with instance_create(x+lengthdir_x(12,gunangle+180),y+lengthdir_y(12,gunangle+180),Smoke)
					motion_add(other.gunangle+180+random_range(-60,60),random(2))
			if random(5)<1 and flying = false{
				alrm2 = 1
				}
			}
		// Only disable Alarm 3 in case we want to fly at some point in time here.
		//if intro > 1
		alrm3 = 0;
		}
	else{
	alrm1 += 60
	if fork(){
		repeat 4
			if instance_exists(self){
				sound_play_pitch(sndNadeReload,0.8)
				wait 20;
				}
		if instance_exists(self){
			ammo += 5
			if random(3)<1
			alrm2 = 1
			}
		}
	}
	}
if instance_exists(self){	
	with Feather if !place_meeting(x,y,Floor) and random(50)<1 instance_destroy()
	/// Flight
	if(alrm2 && !--alrm2){
		//trace("?")
		image_index = 0;
		sprite_index = spr_lift;
		walk = 0;
		alrm0 = 0;
		alrm1 = 0;
		alrm3 = 0;
		ammo  = 4;
		}
	/// Initiates a dash
	if (alrm3 && !--alrm3){
		sprite_index = spr_tell;
		image_index = 0;
		sound_play(snd_dash1)
		//gunangle = point_direction(x,y,target.x,target.y);
		alrm0 = 0;
		alrm1 = 0;
		alrm2 = 0;
		}
	/// Dash attack. Based on sprite animation rather than alarms.
	if sprite_index = spr_chrg{
		hitid = [spr_chrg,name];
		direction = charge_dir;
		if --charge_time > 0{
			speed = 8;
			}
		/// Create PortalClear objects to destroy the walls. Easier this way.
		instance_create(x,y,PortalClear);
		/// Stop the charge and revert sprite when speed is low enough.
		if speed < 2{
			sprite_index = spr_idle;
			meleedamage = 0;
			alrm0 = 45;
			angry = 3 + irandom(3);
			sound_play(snd_dash2)
			ravenboss_callbackup(3);
			}
		}
	/// Z Axis manipulation
	/// Increment Z Speeds
	if !(flying){
		if z + zspd > 0 zspd -= 0.4;
		}
	else{
		if z < 48{
			zspd += 1
			}
		else{
			if zspd > 0 zspd -= 1;
			}
		}
	/// Depth correction. Draw on top when z > 16 (Above walls)
	if z > 16{
		depth = -10
		mask_index = mskNone;
		sleeping = 1 // for joao platformer
		}
	else{
		depth = -2;
		mask_index = mskBanditBoss;
		sleeping = 0 // for joao platformer
		}
	
	/// Landing
	if z + zspd <= 0{
		if z > 0{
			sprite_index = spr_land;
			image_index = 0;
			alrm0 = 30 + irandom(20);
			instance_create(x,y,PortalClear);
			ravenboss_callbackup(2)
			repeat(32){
				with(instance_create(x,y,Dust)){
					direction = random(360);
					speed = 3 + random(3);
					vspeed *= 0.66;
					}
				}
			if angry = 0 angry = 3 + irandom(3);
			sound_play(sndWallBreakBrick);
			if intro = 1{
				ravenboss_callbackup(6);
				sound_play(sndBigBanditIntro);
				alrm1 += 60
				intro++;
				}
			else if intro < 1{
				intro ++;
				//sound_stop_all();
				//sound_play_music(musBoss1)
				alrm2 = 0;
				mask_index = mskBanditBoss
				sleeping = 0 // for joao platformer
				}
			}
		zspd = 0;
		z = 0;
		}
	/// Clamps Zspeed
	zspd = clamp(zspd,-16,16);
	/// Shifts Z based on Zspeed
	z += zspd;
	/// Makes it so that, when angry, the boss will always try to squash the player
	if instance_exists(target)&& target > 0{
		if angry = 0{
			flight_x = target.x;
			flight_y = target.y;
			}
		}
	/// Lift-off. Assigns flight destinations and activates the flight variable
	if sprite_index = spr_lift && floor(image_index) = 5 && flying = 0{
		if instance_exists(Player)
			var targetplayer = instance_furthest(x,y,Player);
			else var targetplayer = self;
		sound_play(snd_lift)
		if (angry > 0){
			var randfloor = instance_nearest(targetplayer.x + (choose(64,-64)*irandom_range(1,2)), targetplayer.y+(choose(64,-64)* irandom_range(1,2)),Floor);
			flight_x = randfloor.x + 16;
			flight_y = randfloor.y + 16;
			}
		else{
			if instance_exists(target)&& target > 0{
				flight_x = target.x;
				flight_y = target.y;
				}
			}
		alrm0 = -1;

		// In case the floor chosen is its own
		if distance_to_point(flight_x,flight_y) < 32{
			var randfloor = instance_nearest(x + choose(32,-32), y+choose(32,-32),Floor);
			flight_x = randfloor.x + 16;
			flight_y = randfloor.y + 16;
			}
		
		repeat(32){
			with(instance_create(x,y,Feather)){
				sprite_index = sprRavenFeather
				direction = random(360);
				speed = 3 + random(3);
				vspeed *= 0.66;
				}
			}
		flying = 1;
		}
	/// Move towards flight destination when in flight
	if (flying){
		var _dir = point_direction(x,y,flight_x,flight_y);
		if z >= 48{
			var _maxspd;
			if angry = 0 _maxspd = 7
				else _maxspd = 5;
			x += lengthdir_x(min(abs(flight_x - x)*0.10,_maxspd),_dir);
			y += lengthdir_y(min(abs(flight_y - y)*0.10,_maxspd),_dir);
			if intro > 0
			meleedamage = 10;
			hitid = [spr_fly,name];
			}
		if distance_to_point(flight_x,flight_y) < 8{
			flying = 0;
			angry = 3 + irandom(3);
			}
		}
	/// Speed Decay
	if abs(speed) > 0.20{
		if sprite_index != spr_chrg speed *= 0.90
		}
	else
		speed = 0;
		
	/// Walking
	if (walk){
		walk --;
		if speed < 4.0 speed += 0.5;
		if place_meeting(x,y,Wall){
			direction += 90 * right;
			walk --;
			}
		}
	/// Flips the sprite
	if ((gunangle + 270) mod 360) < 180 right = -1
		else right = 1;
	/// Animation stuff
	/// This part in particular keeps the landing sprite looping until you land
	if sprite_index = spr_land && z > 0{
		image_index = image_index mod 1;
		}	
	/// Changes to walk sprite when idling and speed > 0.20
	if abs(speed) > 0.50 && sprite_index = spr_idle{
		sprite_index = spr_walk;
		}
	/// Animation handler. Changes the sprites accordingly upon completing animations
	if (image_index + image_speed >= image_number){
		if sprite_index = spr_idle || sprite_index = spr_walk || sprite_index = spr_hurt || sprite_index = spr_land{
			if speed > friction
				sprite_index = spr_walk
			else 
				sprite_index = spr_idle;
			hitid = [spr_idle,name];
			meleedamage = 0;
			}
		else
			if sprite_index = spr_lift{
			sprite_index = spr_fly;
			}
		else 
			if sprite_index = spr_fly{
				if (flying)
					sprite_index = spr_fly
				else
					sprite_index = spr_land;
					}
			else 
				if sprite_index = spr_tell{
					/// THIS IS WHERE DASHES ARE ACTUALLY INITIATED
					charge_time = 15;
					sprite_index = spr_chrg;
					direction = point_direction(x,y,target.x,target.y);
					charge_dir = point_direction(x,y,target.x,target.y);
					meleedamage = 10;
					}
		image_index = 0;
		}
	/// Makes it so that, when angry, the boss will always try to squash the player
    if instance_exists(target) && target > 0 && angry = 0{
        flight_x = target.x;
        flight_y = target.y;
		}
	with Player if weapon_get_type(wep) = 3 and "boltsticks" not in other
		with other{
			with instance_create(x,y-z,CustomObject){
				name = "boltsticksfly"
				creator = other
				on_step = script_ref_create(boltstickfly)
				}
			boltsticks = 1
			}
	if sprite_index = spr_idle and alrm0 == 0
	and instance_exists(target) && target > 0 and alrm4 <= 0{
		if collision_line(x,y,target.x,target.y,Wall,0,1)
		alrm3=1
		else
		alrm2=1
		}
}
//trace("a0:",alrm0,"a1:",alrm1,"a2:",alrm2,"am",ammo,"fl",flying)
#define ravenboss_draw
	var shad_scale;
	shad_scale = 1 - min(0.66 * (z / 96),0.66)
	draw_set_color(make_color_rgb(20,20,20));
	draw_set_alpha(0.4);
	draw_ellipse(x + (16 * shad_scale), y + 10 + (8 * shad_scale), x - (16 * shad_scale), y + 10 - (8 * shad_scale), 0);
	draw_set_color(c_white);
	draw_set_alpha(1);
	if gunangle < 180 && z = 0 draw_sprite_ext(sprGatlingBazooka,0,x-lengthdir_x(wkick,gunangle),y-z-lengthdir_y(wkick,gunangle),1,right,gunangle,c_white,1);
	draw_sprite_ext(sprite_index,image_index,x,y-z,right,1,0,image_blend,1);
	if gunangle >= 180 && z = 0 draw_sprite_ext(sprGatlingBazooka,0,x-lengthdir_x(wkick,gunangle),y-z-lengthdir_y(wkick,gunangle),1,right,gunangle,c_white,1);
#define ravenboss_death
repeat(32){
	with(instance_create(x,y,Feather)){
		sprite_index = sprRavenFeather
		direction = random(360);
		speed = 3 + random(6);
		}
	}
sound_play(sndBossWin)
sound_play_music(musBossDead)
var xd_ = x;
var yd_ = y;
var fl_ = instance_nearest(xd_,yd_,Floor);
wait 14
if instance_exists(Player)
with fl_
if mod_variable_exists("mod","options","bossoutros") and mod_variable_get("mod","options","bossoutros") == "1"
mod_script_call("mod", "bossintros", "boss_trigger", "", mskNone,mskNone,mskNone,self,0)
#define boltstickfly
if instance_exists(creator){
	x=creator.x+creator.hspeed
	y=creator.y+creator.vspeed-creator.z
	
	with BoltStick if target = other.creator
		target = other
	}
else instance_destroy()
//}
